#
# PySNMP MIB module IPE-COMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file://./IPE-COMMON-MIBv3.77_VLAN.mib
# Produced by pysmi-0.3.4 at Mon Aug 31 12:04:39 2020
# On host WX-OR7517150 platform Linux version 4.4.0-17763-Microsoft by user silas
# Using Python version 3.6.9 (default, Apr 18 2020, 01:56:04) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, IpAddress, TimeTicks, ObjectIdentity, iso, Unsigned32, NotificationType, Integer32, Opaque, MibIdentifier, Counter64, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "IpAddress", "TimeTicks", "ObjectIdentity", "iso", "Unsigned32", "NotificationType", "Integer32", "Opaque", "MibIdentifier", "Counter64", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "enterprises")
DisplayString, TextualConvention, DateAndTime, MacAddress, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime", "MacAddress", "TruthValue", "RowStatus")
class AlarmTypeValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("invalid", 0), ("communicationsAlarm", 1), ("qualityOfServiceAlarm", 2), ("processingErrorAlarm", 3), ("equipmentAlarm", 4), ("environmentalAlarm", 5), ("integrityViolationAlarm", 6), ("operationalViolationAlarm", 7), ("physicalViolationAlarm", 8), ("securityViolationAlarm", 9), ("timeDomainViolationAlarm", 10))

class EnableDisableValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invalid", 0), ("disable", 1), ("enable", 2))

class IpeMepId(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 128)

class IpeStatsInfo(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("invalid", 0), ("validNoMaint", 1), ("validMaint", 2), ("invalidNoMaint", 3), ("invalidMaint", 4))

class IpeVlanIndex(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class IpeVlanIndexOrZero(TextualConvention, Integer32):
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4094)

class IpeVlanListOrZero(TextualConvention, OctetString):
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(512, 512), )
class OffOnValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invalid", 0), ("off", 1), ("on", 2))

class ProbableCauseValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 201, 202, 203, 204, 205, 206, 207, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 1024))
    namedValues = NamedValues(("invalid", 0), ("aIS", 1), ("callSetUpFailure", 2), ("degradedSignal", 3), ("farEndReceiverFailure", 4), ("framingError", 5), ("lossOfFrame", 6), ("lossOfPointer", 7), ("lossOfSignal", 8), ("payloadTypeMismatch", 9), ("transmissionError", 10), ("remoteAlarmInterface", 11), ("excessiveBER", 12), ("pathTraceMismatch", 13), ("unavailable", 14), ("signalLabelMismatch", 15), ("lossOfMultiFrame", 16), ("receiveFailure", 17), ("transmitFailure", 18), ("modulationFailure", 19), ("demodulationFailure", 20), ("broadcastChannelFailure", 21), ("connectionEstablishmentError", 22), ("invalidMessageReceived", 23), ("localNodeTransmissionError", 24), ("remoteNodeTransmissionError", 25), ("routingFailure", 26), ("backplaneFailure", 51), ("dataSetProblem", 52), ("equipmentIdentifierDuplication", 53), ("externalIFDeviceProblem", 54), ("lineCardProblem", 55), ("multiplexerProblem", 56), ("nEIdentifierDuplication", 57), ("powerProblem", 58), ("processorProblem", 59), ("protectionPathFailure", 60), ("receiverFailure", 61), ("replaceableUnitMissing", 62), ("replaceableUnitTypeMismatch", 63), ("synchronizationSourceMismatch", 64), ("terminalProblem", 65), ("timingProblem", 66), ("transmitterFailure", 67), ("trunkCardProblem", 68), ("replaceableUnitProblem", 69), ("realTimeClockFailure", 70), ("antennaFailure", 71), ("batteryChargingFailure", 72), ("diskFailure", 73), ("frequencyHoppingFailure", 74), ("iODeviceError", 75), ("lossOfSynchronisation", 76), ("lossOfRedundancy", 77), ("powerSupplyFailure", 78), ("signalQualityEvaluationFailure", 79), ("tranceiverFailure", 80), ("protectionMechanismFailure", 81), ("protectingResourceFailure", 82), ("airCompressorFailure", 101), ("airConditioningFailure", 102), ("airDryerFailure", 103), ("batteryDischarging", 104), ("batteryFailure", 105), ("commercialPowerFailure", 106), ("coolingFanFailure", 107), ("engineFailure", 108), ("fireDetectorFailure", 109), ("fuseFailure", 110), ("generatorFailure", 111), ("lowBatteryThreshold", 112), ("pumpFailure", 113), ("rectifierFailure", 114), ("rectifierHighVoltage", 115), ("rectifierLowFVoltage", 116), ("ventilationsSystemFailure", 117), ("enclosureDoorOpen", 118), ("explosiveGas", 119), ("fire", 120), ("flood", 121), ("highHumidity", 122), ("highTemperature", 123), ("highWind", 124), ("iceBuildUp", 125), ("intrusionDetection", 126), ("lowFuel", 127), ("lowHumidity", 128), ("lowCablePressure", 129), ("lowTemperatue", 130), ("lowWater", 131), ("smoke", 132), ("toxicGas", 133), ("coolingSystemFailure", 134), ("externalEquipmentFailure", 135), ("externalPointFailure", 136), ("storageCapacityProblem", 151), ("memoryMismatch", 152), ("corruptData", 153), ("outOfCPUCycles", 154), ("sfwrEnvironmentProblem", 155), ("sfwrDownloadFailure", 156), ("lossOfRealTimel", 157), ("applicationSubsystemFailure", 158), ("configurationOrCustomisationError", 159), ("databaseInconsistency", 160), ("fileError", 161), ("outOfMemory", 162), ("softwareError", 163), ("timeoutExpired", 164), ("underlayingResourceUnavailable", 165), ("versionMismatch", 166), ("bandwidthReduced", 201), ("congestion", 202), ("excessiveErrorRate", 203), ("excessiveResponseTime", 204), ("excessiveRetransmissionRate", 205), ("reducedLoggingCapability", 206), ("systemResourcesOverload", 207), ("adapterError", 500), ("applicationSubsystemFailture", 501), ("bandwidthReducedX733", 502), ("callEstablishmentError", 503), ("communicationsProtocolError", 504), ("communicationsSubsystemFailure", 505), ("configurationOrCustomizationError", 506), ("congestionX733", 507), ("coruptData", 508), ("cpuCyclesLimitExceeded", 509), ("dataSetOrModemError", 510), ("degradedSignalX733", 511), ("dteDceInterfaceError", 512), ("enclosureDoorOpenX733", 513), ("equipmentMalfunction", 514), ("excessiveVibration", 515), ("fileErrorX733", 516), ("fireDetected", 517), ("framingErrorX733", 518), ("heatingVentCoolingSystemProblem", 519), ("humidityUnacceptable", 520), ("inputOutputDeviceError", 521), ("inputDeviceError", 522), ("lanError", 523), ("leakDetected", 524), ("localNodeTransmissionErrorX733", 525), ("lossOfFrameX733", 526), ("lossOfSignalX733", 527), ("materialSupplyExhausted", 528), ("multiplexerProblemX733", 529), ("outOfMemoryX733", 530), ("ouputDeviceError", 531), ("performanceDegraded", 532), ("powerProblems", 533), ("pressureUnacceptable", 534), ("processorProblems", 535), ("pumpFailureX733", 536), ("queueSizeExceeded", 537), ("receiveFailureX733", 538), ("receiverFailureX733", 539), ("remoteNodeTransmissionErrorX733", 540), ("resourceAtOrNearingCapacity", 541), ("responseTimeExecessive", 542), ("retransmissionRateExcessive", 543), ("softwareErrorX733", 544), ("softwareProgramAbnormallyTerminated", 545), ("softwareProgramError", 546), ("storageCapacityProblemX733", 547), ("temperatureUnacceptable", 548), ("thresholdCrossed", 549), ("timingProblemX733", 550), ("toxicLeakDetected", 551), ("transmitFailureX733", 552), ("transmiterFailure", 553), ("underlyingResourceUnavailable", 554), ("versionMismatchX733", 555), ("authenticationFailure", 600), ("breachOfConfidentiality", 601), ("cableTamper", 602), ("delayedInformation", 603), ("denialOfService", 604), ("duplicateInformation", 605), ("informationMissing", 606), ("informationModificationDetected", 607), ("informationOutOfSequence", 608), ("keyExpired", 609), ("nonRepudiationFailure", 610), ("outOfHoursActivity", 611), ("outOfService", 612), ("proceduralError", 613), ("unauthorizedAccessAttempt", 614), ("unexpectedInformation", 615), ("other", 1024))

class ReportNotreportValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invalid", 0), ("notReport", 1), ("report", 2))

class SeverityValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("cleared", 1), ("indetermine", 2), ("critical", 3), ("major", 4), ("minor", 5), ("warning", 6))

class UsedNotusedValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("invalid", 0), ("notUsed", 1), ("used", 2))

class ValidInvalidValue(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("invalid", 0), ("valid", 1))

nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
radioEquipment = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69))
pasoNeoIpe_common = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501)).setLabel("pasoNeoIpe-common")
summaryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1))
trapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2))
alarmStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3))
provisioningGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5))
inventoryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7))
meteringGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8))
pmonGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9))
pmonTxRxLevGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10))
rmonGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11))
alarmSummaryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1))
alarmSummaryCommonInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1), )
if mibBuilder.loadTexts: alarmSummaryCommonInfoTable.setStatus('current')
alarmSummaryCommonInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "alarmSummaryCommonInfoIndex"))
if mibBuilder.loadTexts: alarmSummaryCommonInfoEntry.setStatus('current')
alarmSummaryCommonInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: alarmSummaryCommonInfoIndex.setStatus('current')
alarmSummaryCommonInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: alarmSummaryCommonInfoNEAddress.setStatus('current')
alarmTotalSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTotalSummary.setStatus('current')
alarmIduSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIduSummary.setStatus('current')
alarmCtrlSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCtrlSummary.setStatus('current')
alarmOduSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOduSummary.setStatus('current')
alarmAuxInputSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmAuxInputSummary.setStatus('current')
alarmPmonTcnSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPmonTcnSummary.setStatus('current')
alarmRmonTcnSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 9), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRmonTcnSummary.setStatus('current')
alarmRmonTcnCtrlSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 1, 1, 10), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRmonTcnCtrlSummary.setStatus('current')
alarmSummaryIduGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2))
alarmSummaryIduSlotInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 1), )
if mibBuilder.loadTexts: alarmSummaryIduSlotInfoTable.setStatus('current')
alarmSummaryIduSlotInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "alarmSummaryIduSlotInfoIndex"))
if mibBuilder.loadTexts: alarmSummaryIduSlotInfoEntry.setStatus('current')
alarmSummaryIduSlotInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: alarmSummaryIduSlotInfoIndex.setStatus('current')
alarmSummaryIduSlotInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: alarmSummaryIduSlotInfoNEAddress.setStatus('current')
alarmIduSlotSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIduSlotSummary.setStatus('current')
alarmSummaryIduSwGrpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 2), )
if mibBuilder.loadTexts: alarmSummaryIduSwGrpInfoTable.setStatus('current')
alarmSummaryIduSwGrpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "alarmSummaryIduSwGrpInfoIndex"))
if mibBuilder.loadTexts: alarmSummaryIduSwGrpInfoEntry.setStatus('current')
alarmSummaryIduSwGrpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: alarmSummaryIduSwGrpInfoIndex.setStatus('current')
alarmSummaryIduSwGrpInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: alarmSummaryIduSwGrpInfoNEAddress.setStatus('current')
alarmIduSwGrpSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 2, 2, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmIduSwGrpSummary.setStatus('current')
alarmSummaryOduInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 3), )
if mibBuilder.loadTexts: alarmSummaryOduInfoTable.setStatus('current')
alarmSummaryOduInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 3, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "alarmSummaryOduInfoIndex"))
if mibBuilder.loadTexts: alarmSummaryOduInfoEntry.setStatus('current')
alarmSummaryOduInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: alarmSummaryOduInfoIndex.setStatus('current')
alarmSummaryOduInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: alarmSummaryOduInfoNEAddress.setStatus('current')
alarmOduEachSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 3, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOduEachSummary.setStatus('current')
alarmSummaryPmonTcnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 4), )
if mibBuilder.loadTexts: alarmSummaryPmonTcnInfoTable.setStatus('current')
alarmSummaryPmonTcnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 4, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "alarmSummaryPmonTcnInfoIndex"))
if mibBuilder.loadTexts: alarmSummaryPmonTcnInfoEntry.setStatus('current')
alarmSummaryPmonTcnInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: alarmSummaryPmonTcnInfoIndex.setStatus('current')
alarmSummaryPmonTcnInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: alarmSummaryPmonTcnInfoNEAddress.setStatus('current')
alarmPmonTcnSlotSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 4, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPmonTcnSlotSummary.setStatus('current')
alarmSummaryCtrlInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 5), )
if mibBuilder.loadTexts: alarmSummaryCtrlInfoTable.setStatus('current')
alarmSummaryCtrlInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 5, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "alarmSummaryEoamInfoIndex"))
if mibBuilder.loadTexts: alarmSummaryCtrlInfoEntry.setStatus('current')
alarmSummaryEoamInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: alarmSummaryEoamInfoIndex.setStatus('current')
alarmSummaryEoamInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: alarmSummaryEoamInfoNEAddress.setStatus('current')
alarmEoamSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 5, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEoamSummary.setStatus('current')
alarmRmonEoamSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 5, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRmonEoamSummary.setStatus('current')
alarmSummaryRmonTcnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 6), )
if mibBuilder.loadTexts: alarmSummaryRmonTcnInfoTable.setStatus('current')
alarmSummaryRmonTcnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 6, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "alarmSummaryRmonTcnInfoIndex"))
if mibBuilder.loadTexts: alarmSummaryRmonTcnInfoEntry.setStatus('current')
alarmSummaryRmonTcnInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: alarmSummaryRmonTcnInfoIndex.setStatus('current')
alarmSummaryRmonTcnInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: alarmSummaryRmonTcnInfoNEAddress.setStatus('current')
alarmRmonTcnSlotSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 1, 6, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmRmonTcnSlotSummary.setStatus('current')
maintSummaryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 2))
maintSummaryCommonInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 2, 1), )
if mibBuilder.loadTexts: maintSummaryCommonInfoTable.setStatus('current')
maintSummaryCommonInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "maintSummaryCommonInfoIndex"))
if mibBuilder.loadTexts: maintSummaryCommonInfoEntry.setStatus('current')
maintSummaryCommonInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: maintSummaryCommonInfoIndex.setStatus('current')
maintSummaryCommonInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: maintSummaryCommonInfoNEAddress.setStatus('current')
maintTotalSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 1, 2, 1, 1, 3), OffOnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintTotalSummary.setStatus('current')
ipeTrapCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1))
ipeTrapCommonVars = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 1))
eventTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTotalCount.setStatus('current')
eventCount = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCount.setStatus('current')
eventTime = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTime.setStatus('current')
eventType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarmStateChage", 1), ("statusChange", 2), ("controlEvent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventType.setStatus('current')
eventResourceID = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventResourceID.setStatus('current')
ipeTrapCommonAdditionalVars = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 2))
eventAdditionalText1 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAdditionalText1.setStatus('current')
eventAdditionalText2 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAdditionalText2.setStatus('current')
eventAdditionalText3 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAdditionalText3.setStatus('current')
eventAdditionalText4 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAdditionalText4.setStatus('current')
eventAdditionalText5 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAdditionalText5.setStatus('current')
ipeTrapAlarmVars = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 3))
eventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 3, 1), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSeverity.setStatus('current')
eventAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 3, 2), AlarmTypeValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventAlarmType.setStatus('current')
eventProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 3, 3), ProbableCauseValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventProbableCause.setStatus('current')
ipeTrapStatusValueVars = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 4))
eventStatusValue = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventStatusValue.setStatus('current')
eventStatusValueDspStr = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventStatusValueDspStr.setStatus('current')
eventStatusValueOctStr = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 4, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventStatusValueOctStr.setStatus('current')
eventStatusValueUnsigned32 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 4, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventStatusValueUnsigned32.setStatus('current')
ipeTrapControlValueVars = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 5))
eventControlValue = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventControlValue.setStatus('current')
eventControlValueDspStr = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventControlValueDspStr.setStatus('current')
eventControlValueOctStr = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventControlValueOctStr.setStatus('current')
eventControlValueUnsigned32 = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 5, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventControlValueUnsigned32.setStatus('current')
ipeTrapControlVars = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 6))
eventRecordUserName = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventRecordUserName.setStatus('current')
eventRecordAccessType = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("nms", 1), ("webLct", 2), ("cli", 3), ("internal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventRecordAccessType.setStatus('current')
eventRecordAccessFrom = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventRecordAccessFrom.setStatus('current')
ipeTrapFileDownloadValueVars = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 7))
eventDownloadModule = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventDownloadModule.setStatus('current')
eventDownloadStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventDownloadStatus.setStatus('current')
eventUpdateDetail = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventUpdateDetail.setStatus('current')
eventUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventUpdateStatus.setStatus('current')
ipeTrapItemVar = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3))
ipeAlarmTrapItemVar = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 1))
alarmStateChange = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 1, 1)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventSeverity"), ("IPE-COMMON-MIB", "eventAlarmType"), ("IPE-COMMON-MIB", "eventProbableCause"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: alarmStateChange.setStatus('current')
ipeStatusTrapItemVar = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 2))
statusChange = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 2, 1)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventStatusValue"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: statusChange.setStatus('current')
statusChangeDspStr = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 2, 2)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventStatusValueDspStr"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: statusChangeDspStr.setStatus('current')
statusChangeOctStr = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 2, 3)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventStatusValueOctStr"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: statusChangeOctStr.setStatus('current')
statusChangeUnsigned32 = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 2, 4)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventStatusValueUnsigned32"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: statusChangeUnsigned32.setStatus('current')
ipeControlTrapItemVar = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 3))
controlEvent = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 3, 1)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventControlValue"), ("IPE-COMMON-MIB", "eventRecordUserName"), ("IPE-COMMON-MIB", "eventRecordAccessType"), ("IPE-COMMON-MIB", "eventRecordAccessFrom"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: controlEvent.setStatus('current')
controlEventDspStr = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 3, 2)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventControlValueDspStr"), ("IPE-COMMON-MIB", "eventRecordUserName"), ("IPE-COMMON-MIB", "eventRecordAccessType"), ("IPE-COMMON-MIB", "eventRecordAccessFrom"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: controlEventDspStr.setStatus('current')
controlEventOctStr = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 3, 3)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventControlValueOctStr"), ("IPE-COMMON-MIB", "eventRecordUserName"), ("IPE-COMMON-MIB", "eventRecordAccessType"), ("IPE-COMMON-MIB", "eventRecordAccessFrom"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: controlEventOctStr.setStatus('current')
controlEventUnsigned32 = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 3, 4)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventControlValueUnsigned32"), ("IPE-COMMON-MIB", "eventRecordUserName"), ("IPE-COMMON-MIB", "eventRecordAccessType"), ("IPE-COMMON-MIB", "eventRecordAccessFrom"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: controlEventUnsigned32.setStatus('current')
ipeFileDownloadTrapItemVar = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 4))
fileDownloadEvent = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 4, 1)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventDownloadModule"), ("IPE-COMMON-MIB", "eventDownloadStatus"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: fileDownloadEvent.setStatus('current')
fileUpdateEvent = NotificationType((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 3, 4, 2)).setObjects(("IPE-COMMON-MIB", "eventTotalCount"), ("IPE-COMMON-MIB", "eventCount"), ("IPE-COMMON-MIB", "eventTime"), ("IPE-COMMON-MIB", "eventType"), ("IPE-COMMON-MIB", "eventResourceID"), ("IPE-COMMON-MIB", "eventUpdateDetail"), ("IPE-COMMON-MIB", "eventUpdateStatus"), ("IPE-COMMON-MIB", "eventAdditionalText1"), ("IPE-COMMON-MIB", "eventAdditionalText2"), ("IPE-COMMON-MIB", "eventAdditionalText3"), ("IPE-COMMON-MIB", "eventAdditionalText4"), ("IPE-COMMON-MIB", "eventAdditionalText5"))
if mibBuilder.loadTexts: fileUpdateEvent.setStatus('current')
ipeEventGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4))
eventTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 1), )
if mibBuilder.loadTexts: eventTable.setStatus('current')
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "eventIndex"))
if mibBuilder.loadTexts: eventEntry.setStatus('current')
eventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alarmStateChage", 1), ("statusChange", 2), ("controlEvent", 3))))
if mibBuilder.loadTexts: eventIndex.setStatus('current')
eventNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: eventNEAddress.setStatus('current')
eventDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventDescription.setStatus('current')
eventCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventCounter.setStatus('current')
eventLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 1, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventLastTime.setStatus('current')
eventTypeTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 2), )
if mibBuilder.loadTexts: eventTypeTable.setStatus('current')
eventTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "eventTypeIndex"), (0, "IPE-COMMON-MIB", "eventTypeSourceCategory"), (0, "IPE-COMMON-MIB", "eventTypeElemId"))
if mibBuilder.loadTexts: eventTypeEntry.setStatus('current')
eventTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: eventTypeIndex.setStatus('current')
eventTypeSourceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: eventTypeSourceCategory.setStatus('current')
eventTypeElemId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: eventTypeElemId.setStatus('current')
eventTypeNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 2, 1, 4), IpAddress())
if mibBuilder.loadTexts: eventTypeNEAddress.setStatus('current')
eventTypeTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTypeTrapId.setStatus('current')
eventTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTypeDescription.setStatus('current')
eventTypeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 4, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: eventTypeRowStatus.setStatus('current')
ipeTrapStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 5))
ipeTrapCounterTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 5, 1), )
if mibBuilder.loadTexts: ipeTrapCounterTable.setStatus('current')
ipeTrapCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 5, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "ipeTrapCounterIndex"))
if mibBuilder.loadTexts: ipeTrapCounterEntry.setStatus('current')
ipeTrapCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ipeTrapCounterIndex.setStatus('current')
ipeTrapTotalCounterNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 5, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipeTrapTotalCounterNEAddress.setStatus('current')
ipeTrapTotalCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 2, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipeTrapTotalCounter.setStatus('current')
asOduGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1))
oduGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1), )
if mibBuilder.loadTexts: oduGroupTable.setStatus('current')
oduGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "oduGroupIfIndex"))
if mibBuilder.loadTexts: oduGroupEntry.setStatus('current')
oduGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: oduGroupIfIndex.setStatus('current')
oduGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: oduGroupNEAddress.setStatus('current')
oduAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduAlarm.setStatus('current')
txPowerAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txPowerAlarm.setStatus('current')
txInputAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txInputAlarm.setStatus('current')
rxLevelAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxLevelAlarm.setStatus('current')
cpuCableOpenAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCableOpenAlarm.setStatus('current')
loRefAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loRefAlarm.setStatus('current')
muteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 9), OffOnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: muteStatus.setStatus('current')
oduPsAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 10), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduPsAlarm.setStatus('current')
oduPsSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 11), OffOnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduPsSetStatus.setStatus('current')
oduTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 12), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduTypeMismatch.setStatus('current')
oduTotalAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 1, 1, 13), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oduTotalAlarm.setStatus('current')
oduSwGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 2), )
if mibBuilder.loadTexts: oduSwGroupTable.setStatus('current')
oduSwGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "oduSwGroupIfIndex"))
if mibBuilder.loadTexts: oduSwGroupEntry.setStatus('current')
oduSwGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: oduSwGroupIfIndex.setStatus('current')
oduSwGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: oduSwGroupNEAddress.setStatus('current')
txSWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no1", 1), ("no2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSWStatus.setStatus('current')
rxSWStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no1", 1), ("no2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxSWStatus.setStatus('current')
txSWLockInStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("lockin", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSWLockInStatus.setStatus('current')
txSwReverseReqRecvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("received", 2), ("execute", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txSwReverseReqRecvStatus.setStatus('current')
asModemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2))
modemGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1), )
if mibBuilder.loadTexts: modemGroupTable.setStatus('current')
modemGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "modemGroupIfIndex"))
if mibBuilder.loadTexts: modemGroupEntry.setStatus('current')
modemGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: modemGroupIfIndex.setStatus('current')
modemGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: modemGroupNEAddress.setStatus('current')
lof = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lof.setStatus('current')
frameID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frameID.setStatus('current')
highBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: highBERAlarm.setStatus('current')
lowBERAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowBERAlarm.setStatus('current')
earlyWarningAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: earlyWarningAlarm.setStatus('current')
modAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modAlarm.setStatus('current')
ifCableShortAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 9), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifCableShortAlarm.setStatus('current')
atpcPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atpcPowerMode.setStatus('current')
inPhaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inphase", 1), ("outphase", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inPhaseStatus.setStatus('current')
amrRangeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 12), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: amrRangeMismatch.setStatus('obsolete')
txModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("invalid", 0), ("qpsk", 1), ("qam16", 2), ("qam32", 3), ("qam64", 4), ("qam128", 5), ("qam256", 6), ("qam512", 7), ("qam1024", 8), ("qam2048", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: txModulation.setStatus('current')
rxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("invalid", 0), ("qpsk", 1), ("qam16", 2), ("qam32", 3), ("qam64", 4), ("qam128", 5), ("qam256", 6), ("qam512", 7), ("qam1024", 8), ("qam2048", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxModulation.setStatus('current')
l2SyncLossAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 15), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2SyncLossAlarm.setStatus('current')
rdiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 16), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdiAlarm.setStatus('current')
uaeAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 17), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uaeAlarm.setStatus('current')
unlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 18), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unlocked.setStatus('current')
tempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 19), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempAlarm.setStatus('deprecated')
tdmRangeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 20), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmRangeMismatch.setStatus('current')
modemPsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 1, 1, 21), OffOnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemPsOff.setStatus('current')
modemXpicTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 2), )
if mibBuilder.loadTexts: modemXpicTable.setStatus('current')
modemXpicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "modemXpicIfIndex"))
if mibBuilder.loadTexts: modemXpicEntry.setStatus('current')
modemXpicIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: modemXpicIfIndex.setStatus('current')
modemXpicNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: modemXpicNEAddress.setStatus('current')
xIFLevelAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 2, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xIFLevelAlarm.setStatus('current')
xpicTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 2, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpicTypeMismatch.setStatus('current')
modemCardTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3), )
if mibBuilder.loadTexts: modemCardTable.setStatus('current')
modemCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "modemCardIndex"))
if mibBuilder.loadTexts: modemCardEntry.setStatus('current')
modemCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: modemCardIndex.setStatus('current')
modemCardNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: modemCardNEAddress.setStatus('current')
modemComFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemComFailAlarm.setStatus('current')
modemUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemUnequipped.setStatus('current')
modemAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemAlarm.setStatus('current')
modemBusErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemBusErrorTx.setStatus('current')
modemBusErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemBusErrorRx.setStatus('current')
modemTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemTypeMismatch.setStatus('current')
modemCardOnlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("offline", 1), ("online", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCardOnlineStatus.setStatus('current')
modemCardPsAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 3, 1, 10), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modemCardPsAlarm.setStatus('current')
asModemHeaderCompressTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 4), )
if mibBuilder.loadTexts: asModemHeaderCompressTable.setStatus('current')
asModemHeaderCompressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 4, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asModemHeaderCompressIfIndex"))
if mibBuilder.loadTexts: asModemHeaderCompressEntry.setStatus('current')
asModemHeaderCompressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asModemHeaderCompressIfIndex.setStatus('current')
asModemHeaderCompressNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: asModemHeaderCompressNEAddress.setStatus('current')
asModemHeaderCompressMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 4, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemHeaderCompressMismatch.setStatus('current')
asModemHeaderCompressCurrentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("invalid", 0), ("disable", 1), ("mac", 2), ("macWithIpv4", 3), ("macWithIpv6", 4), ("macWithMpls", 5), ("enhancedMacWithIpv4", 6), ("enhancedMacWithIpv6", 7), ("enhancedMacWithMpls", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemHeaderCompressCurrentMode.setStatus('current')
asModemHeaderCompressVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemHeaderCompressVersion.setStatus('current')
asModemHeaderCompressRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 5), )
if mibBuilder.loadTexts: asModemHeaderCompressRemoteTable.setStatus('current')
asModemHeaderCompressRemoteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 5, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asModemHeaderCompressRemoteIfIndex"))
if mibBuilder.loadTexts: asModemHeaderCompressRemoteEntry.setStatus('current')
asModemHeaderCompressRemoteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asModemHeaderCompressRemoteIfIndex.setStatus('current')
asModemHeaderCompressRemoteNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: asModemHeaderCompressRemoteNEAddress.setStatus('current')
asModemHeaderCompressRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 99))).clone(namedValues=NamedValues(("invalid", 0), ("disable", 1), ("mac", 2), ("macWithIpv4", 3), ("macWithIpv6", 4), ("macWithMpls", 5), ("enhancedMacWithIpv4", 6), ("enhancedMacWithIpv6", 7), ("enhancedMacWithMpls", 8), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemHeaderCompressRemoteMode.setStatus('current')
asModemHeaderCompressRemoteVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 99))).clone(namedValues=NamedValues(("invalid", 0), ("dot1q", 1), ("dot1ad", 2), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemHeaderCompressRemoteVlanMode.setStatus('current')
asModemHeaderCompressRemoteVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemHeaderCompressRemoteVersion.setStatus('current')
asModemTrafficAggrTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 6), )
if mibBuilder.loadTexts: asModemTrafficAggrTable.setStatus('current')
asModemTrafficAggrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 6, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asModemTrafficAggrIfIndex"))
if mibBuilder.loadTexts: asModemTrafficAggrEntry.setStatus('current')
asModemTrafficAggrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asModemTrafficAggrIfIndex.setStatus('current')
asModemTrafficAggrNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: asModemTrafficAggrNEAddress.setStatus('current')
asModemTrafficAggrModeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 6, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemTrafficAggrModeMismatch.setStatus('current')
asModemTrafficAggrVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemTrafficAggrVersion.setStatus('current')
asModemTrafficAggrEncapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("normal", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemTrafficAggrEncapStatus.setStatus('current')
asModemTransmissionModeTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 7), )
if mibBuilder.loadTexts: asModemTransmissionModeTable.setStatus('current')
asModemTransmissionModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 7, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asModemTransmissionModeCardIndex"))
if mibBuilder.loadTexts: asModemTransmissionModeEntry.setStatus('current')
asModemTransmissionModeCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: asModemTransmissionModeCardIndex.setStatus('current')
asModemTransmissionModeNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 7, 1, 2), IpAddress())
if mibBuilder.loadTexts: asModemTransmissionModeNEAddress.setStatus('current')
asModemTransmissionModeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 7, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemTransmissionModeMismatch.setStatus('current')
asModemTransparentClockModeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 2, 7, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asModemTransparentClockModeMismatch.setStatus('current')
asCtrlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3))
ctrlGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1), )
if mibBuilder.loadTexts: ctrlGroupTable.setStatus('current')
ctrlGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "ctrlGroupIndex"))
if mibBuilder.loadTexts: ctrlGroupEntry.setStatus('current')
ctrlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ctrlGroupIndex.setStatus('current')
ctrlGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: ctrlGroupNEAddress.setStatus('current')
ctrlAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlAlarm.setStatus('current')
usbFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbFailure.setStatus('current')
svLineAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: svLineAlarm.setStatus('current')
iduCpuAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iduCpuAlarm.setStatus('current')
iduTotalAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iduTotalAlarm.setStatus('current')
maintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 8), OffOnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maintenance.setStatus('current')
busError = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 9), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: busError.setStatus('current')
memoryFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 10), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFailure.setStatus('current')
clk2mMount = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unmount", 1), ("mount", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk2mMount.setStatus('current')
ctrlTempAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 12), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlTempAlarm.setStatus('current')
ctrlTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-999, -999), ValueRangeConstraint(-200, 900), ))).setUnits('0.1 degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlTemperature.setStatus('current')
sncpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 2), )
if mibBuilder.loadTexts: sncpGroupTable.setStatus('current')
sncpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "sncpGroupIndex"))
if mibBuilder.loadTexts: sncpGroupEntry.setStatus('current')
sncpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2352)))
if mibBuilder.loadTexts: sncpGroupIndex.setStatus('current')
sncpGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: sncpGroupNEAddress.setStatus('current')
ppsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 2, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppsFail.setStatus('current')
sncpProtectionStatusCh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fs", 1), ("sf", 2), ("sd", 3), ("ms", 4), ("nr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncpProtectionStatusCh1.setStatus('current')
sncpProtectionStatusCh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fs", 1), ("sf", 2), ("sd", 3), ("ms", 4), ("nr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncpProtectionStatusCh2.setStatus('current')
sncpOnlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("work", 1), ("protection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncpOnlineStatus.setStatus('current')
sncpSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no1", 1), ("no2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sncpSwStatus.setStatus('current')
asAuxGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4))
auxGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1), )
if mibBuilder.loadTexts: auxGroupTable.setStatus('current')
auxGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "auxGroupIndex"))
if mibBuilder.loadTexts: auxGroupEntry.setStatus('current')
auxGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: auxGroupIndex.setStatus('current')
auxGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: auxGroupNEAddress.setStatus('current')
auxUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxUnequipped.setStatus('current')
auxTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxTypeMismatch.setStatus('current')
auxAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxAlarm.setStatus('current')
auxComFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxComFailAlarm.setStatus('current')
auxBusErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxBusErrorTx.setStatus('current')
auxBusErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 4, 1, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auxBusErrorRx.setStatus('current')
asClkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5))
clkCommonTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1), )
if mibBuilder.loadTexts: clkCommonTable.setStatus('current')
clkCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "clkCommonIndex"))
if mibBuilder.loadTexts: clkCommonEntry.setStatus('current')
clkCommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clk", 1))))
if mibBuilder.loadTexts: clkCommonIndex.setStatus('current')
clkCommonNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: clkCommonNEAddress.setStatus('current')
ltiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltiAlarm.setStatus('current')
refClkChange = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("lockedRef1", 1), ("lockedRef2", 2), ("lockedRef3", 3), ("holdover", 4), ("freerun", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: refClkChange.setStatus('current')
extClkLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extClkLoop.setStatus('current')
currentTimingSource = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selectRef1", 1), ("selectRef2", 2), ("selectRef3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentTimingSource.setStatus('current')
timingSourceCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("locked", 1), ("holdover", 2), ("freerun", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timingSourceCondition.setStatus('current')
timingSourceControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("manualSelect", 2), ("forcedSelect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: timingSourceControlStatus.setStatus('current')
clkRefTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 2), )
if mibBuilder.loadTexts: clkRefTable.setStatus('current')
clkRefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "clkRefIndex"))
if mibBuilder.loadTexts: clkRefEntry.setStatus('current')
clkRefIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("refclk1", 1), ("refclk2", 2), ("refclk3", 3))))
if mibBuilder.loadTexts: clkRefIndex.setStatus('current')
clkRefNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: clkRefNEAddress.setStatus('current')
clkFailedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 2, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clkFailedAlarm.setStatus('current')
clkDriftAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 2, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clkDriftAlarm.setStatus('current')
clkRefFailedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 2, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clkRefFailedAlarm.setStatus('current')
refLockoutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lockout", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: refLockoutStatus.setStatus('current')
refQL = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("qlPrc", 1), ("qlSsuA", 2), ("qlSsuB", 3), ("qlOriginal", 4), ("qlSec", 5), ("qlDnu", 6), ("qlInvx", 7), ("qlFailed", 8), ("notAvail", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: refQL.setStatus('current')
asExtClkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6))
extClkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1), )
if mibBuilder.loadTexts: extClkGroupTable.setStatus('current')
extClkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "extClkGroupIndex"))
if mibBuilder.loadTexts: extClkGroupEntry.setStatus('current')
extClkGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("extclk", 1))))
if mibBuilder.loadTexts: extClkGroupIndex.setStatus('current')
extClkGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: extClkGroupNEAddress.setStatus('current')
clk2mLosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk2mLosAlarm.setStatus('current')
aisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisAlarm.setStatus('current')
lofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lofAlarm.setStatus('current')
clk2mUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk2mUnequipped.setStatus('current')
extClkOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("ais", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extClkOutputStatus.setStatus('current')
extClkOutputQlValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("qlPrc", 1), ("qlSsuA", 2), ("qlSsuB", 3), ("qlOriginal", 4), ("qlSec", 5), ("qlDnu", 6), ("qlInvx", 7), ("qlFailed", 8), ("notAvail", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extClkOutputQlValue.setStatus('current')
squelch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("squelch", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: squelch.setStatus('current')
clk2mTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 6, 1, 1, 10), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk2mTypeMismatch.setStatus('current')
asFanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 7))
fanGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 7, 1), )
if mibBuilder.loadTexts: fanGroupTable.setStatus('current')
fanGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 7, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "fanGroupIndex"))
if mibBuilder.loadTexts: fanGroupEntry.setStatus('current')
fanGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fanGroupIndex.setStatus('current')
fanGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 7, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: fanGroupNEAddress.setStatus('current')
fanAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 7, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanAlarm.setStatus('current')
fanUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 7, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fanUnequipped.setStatus('current')
asPsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 8))
psGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 8, 1), )
if mibBuilder.loadTexts: psGroupTable.setStatus('current')
psGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 8, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "psGroupIndex"))
if mibBuilder.loadTexts: psGroupEntry.setStatus('current')
psGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: psGroupIndex.setStatus('current')
psGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 8, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: psGroupNEAddress.setStatus('current')
psPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 8, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPowerSupply.setStatus('current')
psUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 8, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUnequipped.setStatus('current')
asTCNGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9))
tcn15minDataRadioGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1))
tcn15minDataRadioTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 1), )
if mibBuilder.loadTexts: tcn15minDataRadioTable.setStatus('current')
tcn15minDataRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn15minDataModemIfIndex"), (0, "IPE-COMMON-MIB", "tcn15minDataModemMonitorName"))
if mibBuilder.loadTexts: tcn15minDataRadioEntry.setStatus('current')
tcn15minDataModemIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn15minDataModemIfIndex.setStatus('current')
tcn15minDataModemMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5), ("ofs", 6))))
if mibBuilder.loadTexts: tcn15minDataModemMonitorName.setStatus('current')
tcn15minDataRadioNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn15minDataRadioNEAddress.setStatus('current')
tcn15minDataRf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minDataRf.setStatus('current')
tcn15minRxLevTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 2), )
if mibBuilder.loadTexts: tcn15minRxLevTable.setStatus('current')
tcn15minRxLevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn15minRxLevIfIndex"))
if mibBuilder.loadTexts: tcn15minRxLevEntry.setStatus('current')
tcn15minRxLevIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn15minRxLevIfIndex.setStatus('current')
tcn15minRxLevNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: tcn15minRxLevNEAddress.setStatus('current')
tcn15minRxLev = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 1, 2, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minRxLev.setStatus('current')
tcn15minDataCableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2))
tcn15minDataThroughModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1))
tcn15minDataTmRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 1), )
if mibBuilder.loadTexts: tcn15minDataTmRsTable.setStatus('current')
tcn15minDataTmRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn15minDataTmRsIfIndex"), (0, "IPE-COMMON-MIB", "tcn15minDataTmRsMonitorName"))
if mibBuilder.loadTexts: tcn15minDataTmRsEntry.setStatus('current')
tcn15minDataTmRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn15minDataTmRsIfIndex.setStatus('current')
tcn15minDataTmRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5), ("ofs", 6))))
if mibBuilder.loadTexts: tcn15minDataTmRsMonitorName.setStatus('current')
tcn15minDataTmRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn15minDataTmRsNEAddress.setStatus('current')
tcn15minDataTmRs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minDataTmRs.setStatus('current')
tcn15minDataTmDMRRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 2), )
if mibBuilder.loadTexts: tcn15minDataTmDMRRsTable.setStatus('current')
tcn15minDataTmDMRRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn15minDataTmDMRRsIfIndex"), (0, "IPE-COMMON-MIB", "tcn15minDataTmDMRRsMonitorName"))
if mibBuilder.loadTexts: tcn15minDataTmDMRRsEntry.setStatus('current')
tcn15minDataTmDMRRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn15minDataTmDMRRsIfIndex.setStatus('current')
tcn15minDataTmDMRRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5), ("ofs", 6))))
if mibBuilder.loadTexts: tcn15minDataTmDMRRsMonitorName.setStatus('current')
tcn15minDataTmDMRRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn15minDataTmDMRRsNEAddress.setStatus('current')
tcn15minDataTmDMRRs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 1, 2, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minDataTmDMRRs.setStatus('current')
tcn15minDataChannelizedModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2))
tcn15minDataChRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 1), )
if mibBuilder.loadTexts: tcn15minDataChRsTable.setStatus('current')
tcn15minDataChRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn15minDataChRsIfIndex"), (0, "IPE-COMMON-MIB", "tcn15minDataChRsMonitorName"))
if mibBuilder.loadTexts: tcn15minDataChRsEntry.setStatus('current')
tcn15minDataChRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn15minDataChRsIfIndex.setStatus('current')
tcn15minDataChRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5), ("ofs", 6))))
if mibBuilder.loadTexts: tcn15minDataChRsMonitorName.setStatus('current')
tcn15minDataChRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn15minDataChRsNEAddress.setStatus('current')
tcn15minDataChRs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minDataChRs.setStatus('current')
tcn15minDataChMsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 2), )
if mibBuilder.loadTexts: tcn15minDataChMsTable.setStatus('current')
tcn15minDataChMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn15minDataChMsIfIndex"), (0, "IPE-COMMON-MIB", "tcn15minDataChMsMonitorName"))
if mibBuilder.loadTexts: tcn15minDataChMsEntry.setStatus('current')
tcn15minDataChMsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn15minDataChMsIfIndex.setStatus('current')
tcn15minDataChMsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5))))
if mibBuilder.loadTexts: tcn15minDataChMsMonitorName.setStatus('current')
tcn15minDataChMsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn15minDataChMsNEAddress.setStatus('current')
tcn15minDataChMs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 2, 2, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minDataChMs.setStatus('current')
tcn15minData16E1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 3))
tcn15minData16E1PdhTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 3, 1), )
if mibBuilder.loadTexts: tcn15minData16E1PdhTable.setStatus('current')
tcn15minData16E1PdhEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 3, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn15minData16E1PdhIfIndex"), (0, "IPE-COMMON-MIB", "tcn15minData16E1PdhMonitorName"))
if mibBuilder.loadTexts: tcn15minData16E1PdhEntry.setStatus('current')
tcn15minData16E1PdhIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn15minData16E1PdhIfIndex.setStatus('current')
tcn15minData16E1PdhMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cv", 1))))
if mibBuilder.loadTexts: tcn15minData16E1PdhMonitorName.setStatus('current')
tcn15minData16E1PdhNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 3, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn15minData16E1PdhNEAddress.setStatus('current')
tcn15minData16E1Pdh = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 2, 3, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minData16E1Pdh.setStatus('current')
tcn1dayDataRadioGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3))
tcn1dayDataRadioTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 1), )
if mibBuilder.loadTexts: tcn1dayDataRadioTable.setStatus('current')
tcn1dayDataRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn1dayDataModemIfIndex"), (0, "IPE-COMMON-MIB", "tcn1dayDataModemMonitorName"))
if mibBuilder.loadTexts: tcn1dayDataRadioEntry.setStatus('current')
tcn1dayDataModemIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn1dayDataModemIfIndex.setStatus('current')
tcn1dayDataModemMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5), ("ofs", 6))))
if mibBuilder.loadTexts: tcn1dayDataModemMonitorName.setStatus('current')
tcn1dayDataRadioNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn1dayDataRadioNEAddress.setStatus('current')
tcn1dayDataRf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayDataRf.setStatus('current')
tcn1dayRxLevTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 2), )
if mibBuilder.loadTexts: tcn1dayRxLevTable.setStatus('current')
tcn1dayRxLevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn1dayRxLevIfIndex"))
if mibBuilder.loadTexts: tcn1dayRxLevEntry.setStatus('current')
tcn1dayRxLevIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn1dayRxLevIfIndex.setStatus('current')
tcn1dayRxLevNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: tcn1dayRxLevNEAddress.setStatus('current')
tcn1dayRxLev = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 3, 2, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayRxLev.setStatus('current')
tcn1dayDataCableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4))
tcn1dayDataThroughModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1))
tcn1dayDataTmRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 1), )
if mibBuilder.loadTexts: tcn1dayDataTmRsTable.setStatus('current')
tcn1dayDataTmRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn1dayDataTmRsIfIndex"), (0, "IPE-COMMON-MIB", "tcn1dayDataTmRsMonitorName"))
if mibBuilder.loadTexts: tcn1dayDataTmRsEntry.setStatus('current')
tcn1dayDataTmRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn1dayDataTmRsIfIndex.setStatus('current')
tcn1dayDataTmRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5), ("ofs", 6))))
if mibBuilder.loadTexts: tcn1dayDataTmRsMonitorName.setStatus('current')
tcn1dayDataTmRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn1dayDataTmRsNEAddress.setStatus('current')
tcn1dayDataTmRs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayDataTmRs.setStatus('current')
tcn1dayDataTmDMRRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 2), )
if mibBuilder.loadTexts: tcn1dayDataTmDMRRsTable.setStatus('current')
tcn1dayDataTmDMRRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn1dayDataTmDMRRsIfIndex"), (0, "IPE-COMMON-MIB", "tcn1dayDataTmDMRRsMonitorName"))
if mibBuilder.loadTexts: tcn1dayDataTmDMRRsEntry.setStatus('current')
tcn1dayDataTmDMRRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn1dayDataTmDMRRsIfIndex.setStatus('current')
tcn1dayDataTmDMRRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5), ("ofs", 6))))
if mibBuilder.loadTexts: tcn1dayDataTmDMRRsMonitorName.setStatus('current')
tcn1dayDataTmDMRRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn1dayDataTmDMRRsNEAddress.setStatus('current')
tcn1dayDataTmDMRRs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 1, 2, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayDataTmDMRRs.setStatus('current')
tcn1dayDataChannelizedModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2))
tcn1dayDataChRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 1), )
if mibBuilder.loadTexts: tcn1dayDataChRsTable.setStatus('current')
tcn1dayDataChRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn1dayDataChRsIfIndex"), (0, "IPE-COMMON-MIB", "tcn1dayDataChRsMonitorName"))
if mibBuilder.loadTexts: tcn1dayDataChRsEntry.setStatus('current')
tcn1dayDataChRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn1dayDataChRsIfIndex.setStatus('current')
tcn1dayDataChRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5), ("ofs", 6))))
if mibBuilder.loadTexts: tcn1dayDataChRsMonitorName.setStatus('current')
tcn1dayDataChRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn1dayDataChRsNEAddress.setStatus('current')
tcn1dayDataChRs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayDataChRs.setStatus('current')
tcn1dayDataChMsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 2), )
if mibBuilder.loadTexts: tcn1dayDataChMsTable.setStatus('current')
tcn1dayDataChMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn1dayDataChMsIfIndex"), (0, "IPE-COMMON-MIB", "tcn1dayDataChMsMonitorName"))
if mibBuilder.loadTexts: tcn1dayDataChMsEntry.setStatus('current')
tcn1dayDataChMsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn1dayDataChMsIfIndex.setStatus('current')
tcn1dayDataChMsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("bbe", 1), ("es", 2), ("ses", 3), ("sep", 4), ("uas", 5))))
if mibBuilder.loadTexts: tcn1dayDataChMsMonitorName.setStatus('current')
tcn1dayDataChMsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn1dayDataChMsNEAddress.setStatus('current')
tcn1dayDataChMs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 2, 2, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayDataChMs.setStatus('current')
tcn1dayData16E1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 3))
tcn1dayData16E1PdhTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 3, 1), )
if mibBuilder.loadTexts: tcn1dayData16E1PdhTable.setStatus('current')
tcn1dayData16E1PdhEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 3, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn1dayData16E1PdhIfIndex"), (0, "IPE-COMMON-MIB", "tcn1dayData16E1PdhMonitorName"))
if mibBuilder.loadTexts: tcn1dayData16E1PdhEntry.setStatus('current')
tcn1dayData16E1PdhIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn1dayData16E1PdhIfIndex.setStatus('current')
tcn1dayData16E1PdhMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("cv", 1))))
if mibBuilder.loadTexts: tcn1dayData16E1PdhMonitorName.setStatus('current')
tcn1dayData16E1PdhNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 3, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: tcn1dayData16E1PdhNEAddress.setStatus('current')
tcn1dayData16E1Pdh = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 4, 3, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayData16E1Pdh.setStatus('current')
tcn15minDataRmonGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5))
tcn15minDataRmonTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1), )
if mibBuilder.loadTexts: tcn15minDataRmonTable.setStatus('current')
tcn15minDataRmonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn15minRmonIfIndex"))
if mibBuilder.loadTexts: tcn15minDataRmonEntry.setStatus('current')
tcn15minRmonIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn15minRmonIfIndex.setStatus('current')
tcn15minRmonNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: tcn15minRmonNEAddress.setStatus('current')
tcn15minHCRxEthStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minHCRxEthStatsDropEvents.setStatus('current')
tcn15minHCRxEthStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minHCRxEthStatsUndersizePkts.setStatus('current')
tcn15minHCRxEthStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minHCRxEthStatsFragments.setStatus('current')
tcn15minHCRxEthStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minHCRxEthStatsCRCAlignErrors.setStatus('current')
tcn15minHCRxEthStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minHCRxEthStatsOversizePkts.setStatus('current')
tcn15minHCTxEthStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 5, 1, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn15minHCTxEthStatsCollisions.setStatus('current')
tcn1dayDataRmonGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6))
tcn1dayDataRmonTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1), )
if mibBuilder.loadTexts: tcn1dayDataRmonTable.setStatus('current')
tcn1dayDataRmonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "tcn1dayRmonIfIndex"))
if mibBuilder.loadTexts: tcn1dayDataRmonEntry.setStatus('current')
tcn1dayRmonIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: tcn1dayRmonIfIndex.setStatus('current')
tcn1dayRmonNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: tcn1dayRmonNEAddress.setStatus('current')
tcn1dayHCRxEthStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayHCRxEthStatsDropEvents.setStatus('current')
tcn1dayHCRxEthStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayHCRxEthStatsUndersizePkts.setStatus('current')
tcn1dayHCRxEthStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayHCRxEthStatsFragments.setStatus('current')
tcn1dayHCRxEthStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayHCRxEthStatsCRCAlignErrors.setStatus('current')
tcn1dayHCRxEthStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayHCRxEthStatsOversizePkts.setStatus('current')
tcn1dayHCTxEthStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 9, 6, 1, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcn1dayHCTxEthStatsCollisions.setStatus('current')
asHkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10))
hkInputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 1), )
if mibBuilder.loadTexts: hkInputStatusTable.setStatus('current')
hkInputStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "hkInputStatusIndex"))
if mibBuilder.loadTexts: hkInputStatusEntry.setStatus('current')
hkInputStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("hkInput1", 1), ("hkInput2", 2), ("hkInput3", 3), ("hkInput4", 4), ("hkInput5", 5), ("hkInput6", 6))))
if mibBuilder.loadTexts: hkInputStatusIndex.setStatus('current')
hkInputStatusNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: hkInputStatusNEAddress.setStatus('current')
hkInputAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hkInputAlarm.setStatus('current')
hkInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eventOff", 1), ("eventOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hkInputStatus.setStatus('current')
hkOutputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 2), )
if mibBuilder.loadTexts: hkOutputStatusTable.setStatus('current')
hkOutputStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "hkOutputStatusIndex"))
if mibBuilder.loadTexts: hkOutputStatusEntry.setStatus('current')
hkOutputStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("hkOutput1", 1), ("hkOutput2", 2), ("hkOutput3", 3), ("hkOutput4", 4))))
if mibBuilder.loadTexts: hkOutputStatusIndex.setStatus('current')
hkOutputStatusNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: hkOutputStatusNEAddress.setStatus('current')
hkOutputStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 2, 1, 3), OffOnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hkOutputStatusValue.setStatus('current')
clusterAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3))
clusterAlarmInTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 1), )
if mibBuilder.loadTexts: clusterAlarmInTable.setStatus('current')
clusterAlarmInEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "clusterAlarmInIfIndex"))
if mibBuilder.loadTexts: clusterAlarmInEntry.setStatus('current')
clusterAlarmInIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: clusterAlarmInIfIndex.setStatus('current')
clusterAlarmInNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: clusterAlarmInNEAddress.setStatus('current')
clusterAlarmInStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterAlarmInStatus.setStatus('current')
clusterAlarmOutTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 2), )
if mibBuilder.loadTexts: clusterAlarmOutTable.setStatus('current')
clusterAlarmOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "clusterAlarmOutIndex"))
if mibBuilder.loadTexts: clusterAlarmOutEntry.setStatus('current')
clusterAlarmOutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: clusterAlarmOutIndex.setStatus('current')
clusterAlarmOutNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: clusterAlarmOutNEAddress.setStatus('current')
clusterAlarmOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 10, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alarm", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterAlarmOutStatus.setStatus('current')
asStm1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11))
asStm1ChPortTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1), )
if mibBuilder.loadTexts: asStm1ChPortTable.setStatus('current')
asStm1ChPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asStm1ChPortIfIndex"))
if mibBuilder.loadTexts: asStm1ChPortEntry.setStatus('current')
asStm1ChPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asStm1ChPortIfIndex.setStatus('current')
asStm1ChPortNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asStm1ChPortNEAddress.setStatus('current')
msAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msAisAlarm.setStatus('current')
msRdiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: msRdiAlarm.setStatus('current')
pjeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDetected", 1), ("detected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pjeStatus.setStatus('current')
auAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auAisAlarm.setStatus('current')
auLopAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: auLopAlarm.setStatus('current')
hpUnequipedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpUnequipedAlarm.setStatus('current')
hpTimAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 9), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpTimAlarm.setStatus('current')
hpPlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 10), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPlmAlarm.setStatus('current')
hpRdiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 11), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpRdiAlarm.setStatus('current')
lomAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 12), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lomAlarm.setStatus('current')
higherOrderPathTraceReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: higherOrderPathTraceReceivedValue.setStatus('current')
lowerOrderPathTraceReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lowerOrderPathTraceReceivedValue.setStatus('current')
asStm1PortTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2), )
if mibBuilder.loadTexts: asStm1PortTable.setStatus('current')
asStm1PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asStm1PortIfIndex"))
if mibBuilder.loadTexts: asStm1PortEntry.setStatus('current')
asStm1PortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asStm1PortIfIndex.setStatus('current')
asStm1PortNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: asStm1PortNEAddress.setStatus('current')
portTypeMismatchAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTypeMismatchAlarm.setStatus('current')
portRemovedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portRemovedAlarm.setStatus('current')
stm1LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1LosAlarm.setStatus('current')
tfAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tfAlarm.setStatus('current')
rsLofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsLofAlarm.setStatus('current')
rsTimAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsTimAlarm.setStatus('current')
rsExcAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 9), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsExcAlarm.setStatus('current')
rsDegAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 10), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDegAlarm.setStatus('current')
rsUasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("uas", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsUasStatus.setStatus('current')
sectionTraceReceivedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sectionTraceReceivedValue.setStatus('current')
alsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 13), OffOnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alsStatus.setStatus('current')
sdhAisGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("normal", 1), ("generated", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdhAisGenStatus.setStatus('current')
stm1LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ne", 1), ("fe", 2), ("normal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1LoopbackStatus.setStatus('current')
stm1LaserShutdownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 2, 1, 16), OffOnValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1LaserShutdownStatus.setStatus('current')
asStm1ChTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3), )
if mibBuilder.loadTexts: asStm1ChTable.setStatus('current')
asStm1ChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asStm1ChIfIndex"))
if mibBuilder.loadTexts: asStm1ChEntry.setStatus('current')
asStm1ChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asStm1ChIfIndex.setStatus('current')
asStm1ChNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: asStm1ChNEAddress.setStatus('current')
tuAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tuAisAlarm.setStatus('current')
tuLopAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tuLopAlarm.setStatus('current')
lpUnequipedAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpUnequipedAlarm.setStatus('current')
lpRdiAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpRdiAlarm.setStatus('current')
lpPlmAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lpPlmAlarm.setStatus('current')
slpAisGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("generated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slpAisGenStatus.setStatus('current')
asStm1CardTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4), )
if mibBuilder.loadTexts: asStm1CardTable.setStatus('current')
asStm1CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asStm1CardIndex"))
if mibBuilder.loadTexts: asStm1CardEntry.setStatus('current')
asStm1CardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: asStm1CardIndex.setStatus('current')
asStm1CardNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: asStm1CardNEAddress.setStatus('current')
stm1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1Alarm.setStatus('current')
stm1ComFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1ComFailAlarm.setStatus('current')
stm1Unequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1Unequipped.setStatus('current')
stm1TypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1TypeMismatch.setStatus('current')
stm1BusErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1BusErrorTx.setStatus('current')
stm1BusErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 11, 4, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1BusErrorRx.setStatus('current')
asE1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12))
asE1CardTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1), )
if mibBuilder.loadTexts: asE1CardTable.setStatus('current')
asE1CardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asE1CardIndex"))
if mibBuilder.loadTexts: asE1CardEntry.setStatus('current')
asE1CardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: asE1CardIndex.setStatus('current')
asE1CardNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asE1CardNEAddress.setStatus('current')
e1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1Alarm.setStatus('current')
e1ComFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1ComFailAlarm.setStatus('current')
e1Unequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1Unequipped.setStatus('current')
e1TypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1TypeMismatch.setStatus('current')
e1BusErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1BusErrorTx.setStatus('current')
e1BusErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 1, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1BusErrorRx.setStatus('current')
asE1ChTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2), )
if mibBuilder.loadTexts: asE1ChTable.setStatus('current')
asE1ChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asE1ChIfIndex"))
if mibBuilder.loadTexts: asE1ChEntry.setStatus('current')
asE1ChIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asE1ChIfIndex.setStatus('current')
asE1ChNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: asE1ChNEAddress.setStatus('current')
chUsageAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chUsageAlarm.setStatus('current')
e1LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LosAlarm.setStatus('current')
ppiAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppiAisAlarm.setStatus('current')
e1AisGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("generated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1AisGenStatus.setStatus('current')
e1LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ne", 1), ("fe", 2), ("normal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1LoopbackStatus.setStatus('current')
ppiAisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("ais", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ppiAisStatus.setStatus('current')
asETHGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13))
asRstpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2))
asRstpBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 1), )
if mibBuilder.loadTexts: asRstpBridgeTable.setStatus('current')
asRstpBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asRstpBridgeIndex"))
if mibBuilder.loadTexts: asRstpBridgeEntry.setStatus('current')
asRstpBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: asRstpBridgeIndex.setStatus('current')
asRstpBridgeNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asRstpBridgeNEAddress.setStatus('current')
asRstpBridgeDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 1, 1, 3), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpBridgeDesignatedRoot.setStatus('current')
asRstpBridgeTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpBridgeTopChanges.setStatus('current')
asRstpPortTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2), )
if mibBuilder.loadTexts: asRstpPortTable.setStatus('current')
asRstpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asRstpIfIndex"))
if mibBuilder.loadTexts: asRstpPortEntry.setStatus('current')
asRstpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asRstpIfIndex.setStatus('current')
asRstpPortNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: asRstpPortNEAddress.setStatus('current')
asRstpPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabledPort", 1), ("alternatePort", 2), ("backupPort", 3), ("rootPort", 4), ("designatedPort", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortRole.setStatus('current')
asRstpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6), ("discarding", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortState.setStatus('current')
asRstpPortNewRootBridgeDetectedBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortNewRootBridgeDetectedBridgePriority.setStatus('current')
asRstpPortProtocolMigrationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortProtocolMigrationVersion.setStatus('current')
asRstpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortPathCost.setStatus('current')
asRstpPortInvalidBpduCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("restore", 0), ("protocolID", 1), ("bpduType", 2), ("tcnLength", 3), ("rstpLength", 4), ("configLength", 5), ("maxAge", 6), ("fwdDelay", 7), ("helloTime", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortInvalidBpduCause.setStatus('current')
asRstpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortDesignatedCost.setStatus('current')
asRstpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 10), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortDesignatedBridge.setStatus('current')
asRstpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortDesignatedPort.setStatus('current')
asRstpPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortForwardTransitions.setStatus('current')
asRstpPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarmOff", 0), ("alarmOn", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortOperEdgePort.setStatus('current')
asRstpPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 2, 2, 1, 14), EnableDisableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asRstpPortOperPointToPoint.setStatus('current')
asEthOamGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3))
asEthOamCcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1))
asEthOamMepCcmFaultTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 1), )
if mibBuilder.loadTexts: asEthOamMepCcmFaultTable.setStatus('current')
asEthOamMepCcmFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asEthOamMepCcmIndex"))
if mibBuilder.loadTexts: asEthOamMepCcmFaultEntry.setStatus('current')
asEthOamMepCcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 1, 1, 1), IpeMepId())
if mibBuilder.loadTexts: asEthOamMepCcmIndex.setStatus('current')
asEthOamMepCcmFaultNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asEthOamMepCcmFaultNEAddress.setStatus('current')
asEthOamMepCcmLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMepCcmLOC.setStatus('current')
asEthOamMepCcmRdiReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMepCcmRdiReceived.setStatus('current')
asEthOamMepCcmMismergeCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMepCcmMismergeCondition.setStatus('obsolete')
asEthOamMepCcmUnexpectedMepCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMepCcmUnexpectedMepCondition.setStatus('obsolete')
asEthOamMepCcmDbTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 2), )
if mibBuilder.loadTexts: asEthOamMepCcmDbTable.setStatus('current')
asEthOamMepCcmDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asEthOamMepCcmDbPeerMepIndex"))
if mibBuilder.loadTexts: asEthOamMepCcmDbEntry.setStatus('current')
asEthOamMepCcmDbPeerMepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 2, 1, 1), IpeMepId())
if mibBuilder.loadTexts: asEthOamMepCcmDbPeerMepIndex.setStatus('current')
asEthOamMepCcmDbNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: asEthOamMepCcmDbNEAddress.setStatus('current')
asEthOamMepCcmDbMepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 2, 1, 3), IpeMepId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMepCcmDbMepIndex.setStatus('current')
asEthOamMepCcmDbPeerMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMepCcmDbPeerMepId.setStatus('current')
asEthOamMepCcmDbMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMepCcmDbMepId.setStatus('current')
asEthOamMepCcmDbCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMepCcmDbCondition.setStatus('current')
asEthOamMepCcmDbRdiReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMepCcmDbRdiReceived.setStatus('current')
asEthOamMegCcmFaultTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 3), )
if mibBuilder.loadTexts: asEthOamMegCcmFaultTable.setStatus('current')
asEthOamMegCcmFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 3, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asEthOamMegCcmIndex"))
if mibBuilder.loadTexts: asEthOamMegCcmFaultEntry.setStatus('current')
asEthOamMegCcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: asEthOamMegCcmIndex.setStatus('current')
asEthOamMegCcmFaultNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: asEthOamMegCcmFaultNEAddress.setStatus('current')
asEthOamMegCcmMismergeCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 3, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMegCcmMismergeCondition.setStatus('current')
asEthOamMegCcmUnexpectedMepCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 1, 3, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamMegCcmUnexpectedMepCondition.setStatus('current')
asEthOamAisGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 2))
asEthOamAisTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 2, 1), )
if mibBuilder.loadTexts: asEthOamAisTable.setStatus('obsolete')
asEthOamAisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asEthOamAisMepIndex"))
if mibBuilder.loadTexts: asEthOamAisEntry.setStatus('obsolete')
asEthOamAisMepIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 2, 1, 1, 1), IpeMepId())
if mibBuilder.loadTexts: asEthOamAisMepIndex.setStatus('obsolete')
asEthOamAisNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asEthOamAisNEAddress.setStatus('obsolete')
asEthOamAisCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 2, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamAisCondition.setStatus('obsolete')
asEthOamAisPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 6))).clone(namedValues=NamedValues(("invalid", 0), ("period-1s", 4), ("period-1min", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asEthOamAisPeriod.setStatus('obsolete')
asFdbGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6))
asFdbEquipmentTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 1), )
if mibBuilder.loadTexts: asFdbEquipmentTable.setStatus('current')
asFdbEquipmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asFdbEquipmentIndex"))
if mibBuilder.loadTexts: asFdbEquipmentEntry.setStatus('current')
asFdbEquipmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: asFdbEquipmentIndex.setStatus('current')
asFdbEquipmentNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asFdbEquipmentNEAddress.setStatus('current')
asFdbEquipmentLearningCount = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asFdbEquipmentLearningCount.setStatus('current')
asFdbEquipmentLearningLimitOver = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notReached", 1), ("reached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asFdbEquipmentLearningLimitOver.setStatus('current')
asFdbPortTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 2), )
if mibBuilder.loadTexts: asFdbPortTable.setStatus('current')
asFdbPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asFdbPortIfIndex"))
if mibBuilder.loadTexts: asFdbPortEntry.setStatus('current')
asFdbPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asFdbPortIfIndex.setStatus('current')
asFdbPortNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: asFdbPortNEAddress.setStatus('current')
asFdbPortLearningCount = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asFdbPortLearningCount.setStatus('current')
asFdbPortLearningLimitOver = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notReached", 1), ("reached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asFdbPortLearningLimitOver.setStatus('current')
asFdbVlanTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 3), )
if mibBuilder.loadTexts: asFdbVlanTable.setStatus('current')
asFdbVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 3, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asFdbVlanIndex"))
if mibBuilder.loadTexts: asFdbVlanEntry.setStatus('current')
asFdbVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: asFdbVlanIndex.setStatus('current')
asFdbVlanNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: asFdbVlanNEAddress.setStatus('current')
asFdbVlanLearningCount = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asFdbVlanLearningCount.setStatus('current')
asFdbVlanLearningLimitOver = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notReached", 1), ("reached", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asFdbVlanLearningLimitOver.setStatus('current')
asLlfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7))
asLlfGroupTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 1), )
if mibBuilder.loadTexts: asLlfGroupTable.setStatus('current')
asLlfGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asLlfGroupIndex"))
if mibBuilder.loadTexts: asLlfGroupEntry.setStatus('current')
asLlfGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: asLlfGroupIndex.setStatus('current')
asLlfGroupNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asLlfGroupNEAddress.setStatus('current')
asLlfGroupForceClose = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-forceclose", 1), ("forceclose", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asLlfGroupForceClose.setStatus('current')
asLlfGroupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("received", 1), ("timeout", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asLlfGroupTimeout.setStatus('current')
asLlfReceiveInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 2), )
if mibBuilder.loadTexts: asLlfReceiveInfoTable.setStatus('obsolete')
asLlfReceiveInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asLlfReceiveInfoIfIndex"), (0, "IPE-COMMON-MIB", "asLlfReceiveInfoGroupIndex"))
if mibBuilder.loadTexts: asLlfReceiveInfoEntry.setStatus('obsolete')
asLlfReceiveInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asLlfReceiveInfoIfIndex.setStatus('obsolete')
asLlfReceiveInfoGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: asLlfReceiveInfoGroupIndex.setStatus('obsolete')
asLlfReceiveInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: asLlfReceiveInfoNEAddress.setStatus('obsolete')
asLlfReceiveInfoLinkSts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asLlfReceiveInfoLinkSts.setStatus('obsolete')
asETHPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8))
asETHPortTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1), )
if mibBuilder.loadTexts: asETHPortTable.setStatus('current')
asETHPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asETHPortIfIndex"))
if mibBuilder.loadTexts: asETHPortEntry.setStatus('current')
asETHPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asETHPortIfIndex.setStatus('current')
asETHPortNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asETHPortNEAddress.setStatus('current')
asETHPortInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("fiber", 1), ("copper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortInterfaceType.setStatus('current')
asETHPortSpeedDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 0), ("s10M-HALF", 1), ("s10M-FULL", 2), ("s100M-HALF", 3), ("s100M-FULL", 4), ("s1000M-FULL", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortSpeedDuplex.setStatus('current')
asETHPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortFlowControl.setStatus('current')
asETHPortMDIMDIX = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("mdi", 1), ("mdi-x", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortMDIMDIX.setStatus('current')
asETHPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortLinkStatus.setStatus('current')
asETHPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("force", 2), ("oamSend", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortAdminStatus.setStatus('current')
asETHPortSFPEquip = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 9), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortSFPEquip.setStatus('current')
asETHPortSFPLos = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 10), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortSFPLos.setStatus('current')
asETHPortSFPTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 11), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortSFPTxError.setStatus('current')
asETHPortSFPTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 12), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortSFPTypeMismatch.setStatus('current')
asETHPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("linkDown", 1), ("linkUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortOperStatus.setStatus('current')
asETHPortLlfOamReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("normal", 1), ("receive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asETHPortLlfOamReceived.setStatus('current')
asSyncETHGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 9))
asSyncETHTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 9, 2), )
if mibBuilder.loadTexts: asSyncETHTable.setStatus('current')
asSyncETHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 9, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asSyncETHIfIndex"))
if mibBuilder.loadTexts: asSyncETHEntry.setStatus('current')
asSyncETHIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 9, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asSyncETHIfIndex.setStatus('current')
asSyncETHNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 9, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asSyncETHNEAddress.setStatus('current')
asSyncETHPortCLKSts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asSyncETHPortCLKSts.setStatus('current')
asQosGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 10))
asQosTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 10, 1), )
if mibBuilder.loadTexts: asQosTable.setStatus('obsolete')
asQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 10, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asQosPortindex"))
if mibBuilder.loadTexts: asQosEntry.setStatus('obsolete')
asQosPortindex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 10, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asQosPortindex.setStatus('obsolete')
asQosNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 10, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asQosNEAddress.setStatus('obsolete')
asQosAmrBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asQosAmrBandWidth.setStatus('obsolete')
asETHCardGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32))
asETHCardTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1), )
if mibBuilder.loadTexts: asETHCardTable.setStatus('current')
asETHCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asETHCardIndex"))
if mibBuilder.loadTexts: asETHCardEntry.setStatus('current')
asETHCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: asETHCardIndex.setStatus('current')
asETHCardNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asETHCardNEAddress.setStatus('current')
ethAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethAlarm.setStatus('current')
ethComFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1, 1, 4), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethComFailAlarm.setStatus('current')
ethUnequipped = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1, 1, 5), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethUnequipped.setStatus('current')
ethTypeMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1, 1, 6), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethTypeMismatch.setStatus('current')
ethBusErrorTx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1, 1, 7), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusErrorTx.setStatus('current')
ethBusErrorRx = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 13, 32, 1, 1, 8), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethBusErrorRx.setStatus('current')
asCommonGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14))
iduCommonTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 1), )
if mibBuilder.loadTexts: iduCommonTable.setStatus('current')
iduCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "iduCommonIndex"))
if mibBuilder.loadTexts: iduCommonEntry.setStatus('current')
iduCommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("iduCommon", 1))))
if mibBuilder.loadTexts: iduCommonIndex.setStatus('current')
iduCommonNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: iduCommonNEAddress.setStatus('current')
equipConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: equipConfigStatus.setStatus('current')
asCommonTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 2), )
if mibBuilder.loadTexts: asCommonTable.setStatus('current')
asCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asCommonIndex"))
if mibBuilder.loadTexts: asCommonEntry.setStatus('current')
asCommonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: asCommonIndex.setStatus('current')
asCommonNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: asCommonNEAddress.setStatus('current')
asUserInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6, 9, 11, 12, 13, 14, 15, 17, 18, 19, 99))).clone(namedValues=NamedValues(("invalid", 0), ("notUsed", 1), ("modem", 2), ("e1", 3), ("gbex4p", 6), ("mse", 9), ("aux", 11), ("stm1x2p", 12), ("clk2m", 13), ("ps", 14), ("fan", 15), ("main", 17), ("ptp", 18), ("modemE", 19), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asUserInterface.setStatus('current')
asConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("unequipped", 1), ("configured", 2), ("unconfigured", 3), ("mismatch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asConfigStatus.setStatus('current')
asClk2mType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 99))).clone(namedValues=NamedValues(("invalid", 0), ("notUsed", 1), ("clk2m", 2), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asClk2mType.setStatus('current')
asClk2mConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("unequipped", 1), ("configured", 2), ("unconfigured", 3), ("mismatch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: asClk2mConfigStatus.setStatus('current')
asProtectionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33))
asStm1ApsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33, 1), )
if mibBuilder.loadTexts: asStm1ApsTable.setStatus('current')
asStm1ApsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asStm1ApsIfIndex"))
if mibBuilder.loadTexts: asStm1ApsEntry.setStatus('current')
asStm1ApsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: asStm1ApsIfIndex.setStatus('current')
asStm1ApsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asStm1ApsNEAddress.setStatus('current')
apsProtectionStatusCh1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fs", 1), ("sf", 2), ("sd", 3), ("ms", 4), ("nr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtectionStatusCh1.setStatus('current')
apsProtectionStatusCh2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("fs", 1), ("sf", 2), ("sd", 3), ("ms", 4), ("nr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsProtectionStatusCh2.setStatus('current')
apsOnlineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("work", 1), ("protection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsOnlineStatus.setStatus('current')
apsLockinStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("lockin", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsLockinStatus.setStatus('current')
apsSwStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 33, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("work", 1), ("protection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apsSwStatus.setStatus('current')
asLicenseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 45))
asLicenseAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 45, 1), )
if mibBuilder.loadTexts: asLicenseAlarmTable.setStatus('current')
asLicenseAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 45, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "asLicenseAlarmIndex"))
if mibBuilder.loadTexts: asLicenseAlarmEntry.setStatus('current')
asLicenseAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 45, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: asLicenseAlarmIndex.setStatus('current')
asLicenseAlarmNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 45, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: asLicenseAlarmNEAddress.setStatus('current')
asLicenseAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 3, 45, 1, 1, 3), SeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asLicenseAlarm.setStatus('current')
provVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20))
provVlanEquipmentTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 1), )
if mibBuilder.loadTexts: provVlanEquipmentTable.setStatus('current')
provVlanEquipmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "provVlanEquipmentIndex"))
if mibBuilder.loadTexts: provVlanEquipmentEntry.setStatus('current')
provVlanEquipmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: provVlanEquipmentIndex.setStatus('current')
provVlanEquipmentNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: provVlanEquipmentNEAddress.setStatus('current')
provVlanEquipmentMode = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot1q", 1), ("dot1ad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provVlanEquipmentMode.setStatus('current')
provVlanEquipmentDefaultVid = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provVlanEquipmentDefaultVid.setStatus('current')
provVlanEquipmentDefaultTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provVlanEquipmentDefaultTpid.setStatus('current')
provVlanCustomerTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 2), )
if mibBuilder.loadTexts: provVlanCustomerTable.setStatus('current')
provVlanCustomerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "provVlanCustomerIfIndex"), (0, "IPE-COMMON-MIB", "provVlanCustomerVlanIndex"))
if mibBuilder.loadTexts: provVlanCustomerEntry.setStatus('current')
provVlanCustomerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: provVlanCustomerIfIndex.setStatus('current')
provVlanCustomerVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: provVlanCustomerVlanIndex.setStatus('current')
provVlanCustomerNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: provVlanCustomerNEAddress.setStatus('current')
provVlanCustomerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("access", 1), ("tunnel", 2), ("trunk", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: provVlanCustomerPort.setStatus('current')
provVlanCustomerRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 2, 1, 5), RowStatus().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: provVlanCustomerRowstatus.setStatus('current')
provVlanServiceTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 3), )
if mibBuilder.loadTexts: provVlanServiceTable.setStatus('current')
provVlanServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 3, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "provVlanServiceIfIndex"), (0, "IPE-COMMON-MIB", "provVlanServiceVlanIndex"))
if mibBuilder.loadTexts: provVlanServiceEntry.setStatus('current')
provVlanServiceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: provVlanServiceIfIndex.setStatus('current')
provVlanServiceVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: provVlanServiceVlanIndex.setStatus('current')
provVlanServiceNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 3, 1, 3), IpAddress())
if mibBuilder.loadTexts: provVlanServiceNEAddress.setStatus('current')
provVlanServicePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("cAccess", 1), ("sTrunk", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: provVlanServicePortType.setStatus('current')
provVlanServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: provVlanServiceRowStatus.setStatus('current')
provVlanCBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 4), )
if mibBuilder.loadTexts: provVlanCBridgeTable.setStatus('current')
provVlanCBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 4, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "provVlanCBridgeIfIndex"), (0, "IPE-COMMON-MIB", "provVlanCBridgeSVlanIndex"), (0, "IPE-COMMON-MIB", "provVlanCBridgeCVlanIndex"))
if mibBuilder.loadTexts: provVlanCBridgeEntry.setStatus('current')
provVlanCBridgeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: provVlanCBridgeIfIndex.setStatus('current')
provVlanCBridgeSVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: provVlanCBridgeSVlanIndex.setStatus('current')
provVlanCBridgeCVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: provVlanCBridgeCVlanIndex.setStatus('current')
provVlanCBridgeNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 4, 1, 4), IpAddress())
if mibBuilder.loadTexts: provVlanCBridgeNEAddress.setStatus('current')
provVlanCBridgePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("cBridge", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: provVlanCBridgePortType.setStatus('current')
provVlanCBridgeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: provVlanCBridgeRowStatus.setStatus('current')
provVlanNameTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 5), )
if mibBuilder.loadTexts: provVlanNameTable.setStatus('current')
provVlanNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 5, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "provVlanNameVlanIndex"))
if mibBuilder.loadTexts: provVlanNameEntry.setStatus('current')
provVlanNameVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: provVlanNameVlanIndex.setStatus('current')
provVlanNameNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: provVlanNameNEAddress.setStatus('current')
provVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: provVlanName.setStatus('current')
provVlanNameRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 5, 1, 4), RowStatus().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: provVlanNameRowstatus.setStatus('current')
provDot1qPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 10), )
if mibBuilder.loadTexts: provDot1qPortVlanTable.setStatus('current')
provDot1qPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 10, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "provDot1qPortVlanIfIndex"))
if mibBuilder.loadTexts: provDot1qPortVlanEntry.setStatus('current')
provDot1qPortVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: provDot1qPortVlanIfIndex.setStatus('current')
provDot1qPortVlanNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: provDot1qPortVlanNEAddress.setStatus('current')
provDot1qPortVlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("tunnel", 1), ("trunk", 2), ("trunkWithAccess", 3), ("accessOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provDot1qPortVlanPortType.setStatus('current')
provDot1qPortVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 10, 1, 4), IpeVlanListOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provDot1qPortVlanList.setStatus('current')
provDot1qPortAccessVid = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 10, 1, 5), IpeVlanIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provDot1qPortAccessVid.setStatus('current')
provDot1adPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 11), )
if mibBuilder.loadTexts: provDot1adPortVlanTable.setStatus('current')
provDot1adPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 11, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "provDot1adPortVlanIfIndex"))
if mibBuilder.loadTexts: provDot1adPortVlanEntry.setStatus('current')
provDot1adPortVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: provDot1adPortVlanIfIndex.setStatus('current')
provDot1adPortVlanNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: provDot1adPortVlanNEAddress.setStatus('current')
provDot1adPortVlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("bridge", 1), ("trunk", 2), ("trunkWithAccess", 3), ("accessOnly", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provDot1adPortVlanPortType.setStatus('current')
provDot1adPortVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 11, 1, 4), IpeVlanListOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provDot1adPortVlanList.setStatus('current')
provDot1adPortCAccessVid = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 5, 20, 11, 1, 5), IpeVlanIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: provDot1adPortCAccessVid.setStatus('current')
invCardInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1))
invMainInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1), )
if mibBuilder.loadTexts: invMainInfoTable.setStatus('current')
invMainInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invMainInfoIndex"))
if mibBuilder.loadTexts: invMainInfoEntry.setStatus('current')
invMainInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: invMainInfoIndex.setStatus('current')
invMainInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: invMainInfoNEAddress.setStatus('current')
invMainName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invMainName.setStatus('current')
invMainCodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invMainCodeNo.setStatus('current')
invMainSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invMainSerialNo.setStatus('current')
invMainManufacturedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invMainManufacturedDate.setStatus('current')
invMainFirmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invMainFirmVersion.setStatus('current')
invMainFirmVersionUncurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invMainFirmVersionUncurrent.setStatus('current')
invMainCardHardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invMainCardHardVersion.setStatus('current')
invCardInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2), )
if mibBuilder.loadTexts: invCardInfoTable.setStatus('current')
invCardInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invCardInfoIndex"))
if mibBuilder.loadTexts: invCardInfoEntry.setStatus('current')
invCardInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: invCardInfoIndex.setStatus('current')
invCardInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: invCardInfoNEAddress.setStatus('current')
invCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCardName.setStatus('current')
invCardCodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCardCodeNo.setStatus('current')
invCardSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCardSerialNo.setStatus('current')
invCardManufacturedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCardManufacturedDate.setStatus('current')
invCardFirmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCardFirmVersion.setStatus('current')
invCardHardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCardHardVersion.setStatus('current')
invCardFirmVersionUncurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCardFirmVersionUncurrent.setStatus('current')
invFPGAInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 2), )
if mibBuilder.loadTexts: invFPGAInfoTable.setStatus('current')
invFPGAInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invFPGAInfoIndex"))
if mibBuilder.loadTexts: invFPGAInfoEntry.setStatus('current')
invFPGAInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: invFPGAInfoIndex.setStatus('current')
invFPGAInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: invFPGAInfoNEAddress.setStatus('current')
invFPGAName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invFPGAName.setStatus('current')
invFPGACodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invFPGACodeNo.setStatus('current')
invFPGAHardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invFPGAHardVersion.setStatus('current')
invModuleInfoOduTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3), )
if mibBuilder.loadTexts: invModuleInfoOduTable.setStatus('current')
invModuleInfoOduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invModuleInfoOduIfIndex"))
if mibBuilder.loadTexts: invModuleInfoOduEntry.setStatus('current')
invModuleInfoOduIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: invModuleInfoOduIfIndex.setStatus('current')
invModuleInfoOduNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: invModuleInfoOduNEAddress.setStatus('current')
invOduCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduCardName.setStatus('current')
invOduCardCodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduCardCodeNo.setStatus('current')
invOduCardHardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduCardHardVersion.setStatus('current')
invOduCardSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduCardSerialNo.setStatus('current')
invOduCardManufacturedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduCardManufacturedDate.setStatus('current')
invOduCardFirmCurrentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduCardFirmCurrentVersion.setStatus('current')
invOduCardFirmUncurrentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduCardFirmUncurrentVersion.setStatus('current')
invOduProvRangeATPCMax = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduProvRangeATPCMax.setStatus('current')
invOduProvRangeATPCMin = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduProvRangeATPCMin.setStatus('current')
invOduProvRangeMTPCMax = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduProvRangeMTPCMax.setStatus('current')
invOduProvRangeMTPCMin = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduProvRangeMTPCMin.setStatus('current')
invOduProvRangeRxThresholdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduProvRangeRxThresholdMax.setStatus('current')
invOduProvRangeRxThresholdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduProvRangeRxThresholdMin.setStatus('current')
invOduProvRangeHysteresisPermit = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 255))).clone(namedValues=NamedValues(("deny", 0), ("permit", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduProvRangeHysteresisPermit.setStatus('current')
invOduProvRangeHysteresisMax = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduProvRangeHysteresisMax.setStatus('current')
invOduProvRangeHysteresisMin = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduProvRangeHysteresisMin.setStatus('current')
invOduFreqInfoTxStartFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoTxStartFrequency.setStatus('current')
invOduFreqInfoTxStopFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoTxStopFrequency.setStatus('current')
invOduFreqInfoRxStartFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoRxStartFrequency.setStatus('current')
invOduFreqInfoRxStopFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoRxStopFrequency.setStatus('current')
invOduFreqInfoFrequencyStep = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoFrequencyStep.setStatus('current')
invOduFreqInfoShiftFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoShiftFrequency.setStatus('current')
invOduFreqInfoUpperLower = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoUpperLower.setStatus('current')
invOduFreqInfoTxPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("reverse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoTxPhase.setStatus('current')
invOduFreqInfoRxPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("reverse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoRxPhase.setStatus('current')
invOduFreqInfoSubBand = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand.setStatus('current')
invOduFreqInfoTxRxIndependence = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notIndependence", 1), ("independence", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoTxRxIndependence.setStatus('current')
invOduFreqInfoSupportedIpe = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notSupported", 1), ("supported", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSupportedIpe.setStatus('current')
invOduFreqInfoSubBand1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand1.setStatus('current')
invOduFreqInfoSubBand2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand2.setStatus('current')
invOduFreqInfoSubBand3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand3.setStatus('current')
invOduFreqInfoSubBand4 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand4.setStatus('current')
invOduFreqInfoSubBand5 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand5.setStatus('current')
invOduFreqInfoSubBand6 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand6.setStatus('current')
invOduFreqInfoSubBand7 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand7.setStatus('current')
invOduFreqInfoSubBand8 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand8.setStatus('current')
invOduFreqInfoSubBand9 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand9.setStatus('current')
invOduFreqInfoSubBand10 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 3, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invOduFreqInfoSubBand10.setStatus('current')
invUpdateInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 4), )
if mibBuilder.loadTexts: invUpdateInfoTable.setStatus('current')
invUpdateInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 4, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invUpdateInfoIndex"))
if mibBuilder.loadTexts: invUpdateInfoEntry.setStatus('current')
invUpdateInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: invUpdateInfoIndex.setStatus('current')
invUpdateInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: invUpdateInfoNEAddress.setStatus('current')
invUpdateInfoSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 4, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(12, 12), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invUpdateInfoSummary.setStatus('current')
invSfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5), )
if mibBuilder.loadTexts: invSfpInfoTable.setStatus('current')
invSfpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invSfpInfoIfIndex"))
if mibBuilder.loadTexts: invSfpInfoEntry.setStatus('current')
invSfpInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: invSfpInfoIfIndex.setStatus('current')
invSfpInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: invSfpInfoNEAddress.setStatus('current')
invSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSfpVendorName.setStatus('current')
invSfpVendorPn = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSfpVendorPn.setStatus('current')
invSfpVendorVer = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSfpVendorVer.setStatus('current')
invSfpVendorSn = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSfpVendorSn.setStatus('current')
invSfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSfpType.setStatus('current')
invSfpManufacturedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSfpManufacturedDate.setStatus('current')
invSfpSupportedWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 9), DisplayString()).setUnits('nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: invSfpSupportedWavelength.setStatus('current')
invSfpSupportedLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 5, 1, 10), DisplayString()).setUnits('km').setMaxAccess("readonly")
if mibBuilder.loadTexts: invSfpSupportedLinkLength.setStatus('current')
invSoftkeyInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6), )
if mibBuilder.loadTexts: invSoftkeyInfoTable.setStatus('current')
invSoftkeyInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invSoftkeyInfoIndex"))
if mibBuilder.loadTexts: invSoftkeyInfoEntry.setStatus('current')
invSoftkeyInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: invSoftkeyInfoIndex.setStatus('current')
invSoftkeyInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: invSoftkeyInfoNEAddress.setStatus('current')
invSoftkeySerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSoftkeySerialNo.setStatus('current')
invSupportabilityInfoFw = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(32, 32), ValueSizeConstraint(40, 40), ValueSizeConstraint(68, 68), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSupportabilityInfoFw.setStatus('current')
invSupportabilityInfoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 5), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(32, 32), ValueSizeConstraint(40, 40), ValueSizeConstraint(68, 68), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSupportabilityInfoKey.setStatus('current')
invSupportabilityInfoValid = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(32, 32), ValueSizeConstraint(40, 40), ValueSizeConstraint(68, 68), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invSupportabilityInfoValid.setStatus('current')
invCapa10MaxE1Rst = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 7), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(160, 160), ValueSizeConstraint(192, 192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCapa10MaxE1Rst.setStatus('current')
invCapa20MaxE1Rst = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 8), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(160, 160), ValueSizeConstraint(192, 192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCapa20MaxE1Rst.setStatus('current')
invCapa50MaxE1Rst = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 9), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(160, 160), ValueSizeConstraint(192, 192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCapa50MaxE1Rst.setStatus('current')
invCapa100MaxE1Rst = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 10), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(160, 160), ValueSizeConstraint(192, 192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCapa100MaxE1Rst.setStatus('current')
invCapa150MaxE1Rst = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 11), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(160, 160), ValueSizeConstraint(192, 192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCapa150MaxE1Rst.setStatus('current')
invCapa200MaxE1Rst = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 12), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(160, 160), ValueSizeConstraint(192, 192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCapa200MaxE1Rst.setStatus('current')
invCapa300MaxE1Rst = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 13), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(160, 160), ValueSizeConstraint(192, 192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCapa300MaxE1Rst.setStatus('current')
invCapa400MaxE1Rst = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 6, 1, 14), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(160, 160), ValueSizeConstraint(192, 192), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invCapa400MaxE1Rst.setStatus('current')
invClk2mInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7), )
if mibBuilder.loadTexts: invClk2mInfoTable.setStatus('current')
invClk2mInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invClk2mInfoIndex"))
if mibBuilder.loadTexts: invClk2mInfoEntry.setStatus('current')
invClk2mInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("extclk", 1))))
if mibBuilder.loadTexts: invClk2mInfoIndex.setStatus('current')
invClk2mInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 2), IpAddress())
if mibBuilder.loadTexts: invClk2mInfoNEAddress.setStatus('current')
invClk2mCardName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invClk2mCardName.setStatus('current')
invClk2mCardCodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invClk2mCardCodeNo.setStatus('current')
invClk2mCardSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invClk2mCardSerialNo.setStatus('current')
invClk2mCardManufacturedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invClk2mCardManufacturedDate.setStatus('current')
invClk2mFPGAName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invClk2mFPGAName.setStatus('current')
invClk2mFPGACodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invClk2mFPGACodeNo.setStatus('current')
invClk2mFPGAHardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invClk2mFPGAHardVersion.setStatus('current')
invClk2mCardHardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invClk2mCardHardVersion.setStatus('current')
invMacAddressInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 8), )
if mibBuilder.loadTexts: invMacAddressInfoTable.setStatus('current')
invMacAddressInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 8, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invMacAddressInfoIfIndex"))
if mibBuilder.loadTexts: invMacAddressInfoEntry.setStatus('current')
invMacAddressInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: invMacAddressInfoIfIndex.setStatus('current')
invMacAddressInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: invMacAddressInfoNEAddress.setStatus('current')
invMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 8, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invMacAddress.setStatus('current')
invModemParamInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 9), )
if mibBuilder.loadTexts: invModemParamInfoTable.setStatus('current')
invModemParamInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 9, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invModemParamInfoIfIndex"))
if mibBuilder.loadTexts: invModemParamInfoEntry.setStatus('current')
invModemParamInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: invModemParamInfoIfIndex.setStatus('current')
invModemParamInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 9, 1, 2), IpAddress())
if mibBuilder.loadTexts: invModemParamInfoNEAddress.setStatus('current')
invModemParamVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invModemParamVersion.setStatus('current')
invChassisInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10), )
if mibBuilder.loadTexts: invChassisInfoTable.setStatus('current')
invChassisInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "invChassisInfoIndex"))
if mibBuilder.loadTexts: invChassisInfoEntry.setStatus('current')
invChassisInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: invChassisInfoIndex.setStatus('current')
invChassisInfoNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: invChassisInfoNEAddress.setStatus('current')
invChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invChassisName.setStatus('current')
invChassisCodeNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invChassisCodeNo.setStatus('current')
invChassisSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invChassisSerialNo.setStatus('current')
invChassisManufacturedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invChassisManufacturedDate.setStatus('current')
invChassisFirmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invChassisFirmVersion.setStatus('current')
invChassisHardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 7, 10, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invChassisHardVersion.setStatus('current')
meteringTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1), )
if mibBuilder.loadTexts: meteringTable.setStatus('current')
meteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "meteringIfIndex"))
if mibBuilder.loadTexts: meteringEntry.setStatus('current')
meteringIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: meteringIfIndex.setStatus('current')
meteringNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: meteringNEAddress.setStatus('current')
metSysTxPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 3), ValidInvalidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysTxPowerStatus.setStatus('current')
metSysTxPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysTxPowerValue.setStatus('current')
metSysRxLevelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 5), ValidInvalidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysRxLevelStatus.setStatus('current')
metSysRxLevelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysRxLevelValue.setStatus('current')
metSysPSVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 7), ValidInvalidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysPSVoltageStatus.setStatus('current')
metSysPSVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysPSVoltageValue.setStatus('current')
metSysTempODUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 9), ValidInvalidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysTempODUStatus.setStatus('current')
metSysTempODUValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysTempODUValue.setStatus('current')
metSysTempIDUStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 11), ValidInvalidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysTempIDUStatus.setStatus('current')
metSysTempIDUValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysTempIDUValue.setStatus('current')
metSysBitErrorRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysBitErrorRateStatus.setStatus('current')
metSysBitErrorRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: metSysBitErrorRateValue.setStatus('current')
meteringFanTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3), )
if mibBuilder.loadTexts: meteringFanTable.setStatus('current')
meteringFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "meteringFanSlotIndex"))
if mibBuilder.loadTexts: meteringFanEntry.setStatus('current')
meteringFanSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: meteringFanSlotIndex.setStatus('current')
meteringFanNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: meteringFanNEAddress.setStatus('current')
meteringFanSpeed1 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringFanSpeed1.setStatus('current')
meteringFanSpeed1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3, 1, 4), ValidInvalidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringFanSpeed1Status.setStatus('current')
meteringFanSpeed2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringFanSpeed2.setStatus('current')
meteringFanSpeed2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3, 1, 6), ValidInvalidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringFanSpeed2Status.setStatus('current')
meteringFanSpeed3 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringFanSpeed3.setStatus('current')
meteringFanSpeed3Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 8, 3, 1, 8), ValidInvalidValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: meteringFanSpeed3Status.setStatus('current')
pmon15minDataRadioGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 1))
pmon15minDataRadioTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 1, 1), )
if mibBuilder.loadTexts: pmon15minDataRadioTable.setStatus('current')
pmon15minDataRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon15minDataModemIfIndex"), (0, "IPE-COMMON-MIB", "pmon15minDataModemMonitorName"))
if mibBuilder.loadTexts: pmon15minDataRadioEntry.setStatus('current')
pmon15minDataModemIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon15minDataModemIfIndex.setStatus('current')
pmon15minDataModemMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEF", 4), ("pmonUAS", 5), ("pmonOFS", 6))))
if mibBuilder.loadTexts: pmon15minDataModemMonitorName.setStatus('current')
pmon15minDataRadioNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 1, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon15minDataRadioNEAddress.setStatus('current')
pmon15minDataModemStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 1, 1, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataModemStatusInfo.setStatus('current')
pmon15minDataRfValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataRfValue.setStatus('current')
pmon15minDataCableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2))
pmon15minDataThroughModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1))
pmon15minDataTmRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 1), )
if mibBuilder.loadTexts: pmon15minDataTmRsTable.setStatus('current')
pmon15minDataTmRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon15minDataTmRsIfIndex"), (0, "IPE-COMMON-MIB", "pmon15minDataTmRsMonitorName"))
if mibBuilder.loadTexts: pmon15minDataTmRsEntry.setStatus('current')
pmon15minDataTmRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon15minDataTmRsIfIndex.setStatus('current')
pmon15minDataTmRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEF", 4), ("pmonUAS", 5), ("pmonOFS", 6))))
if mibBuilder.loadTexts: pmon15minDataTmRsMonitorName.setStatus('current')
pmon15minDataTmRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon15minDataTmRsNEAddress.setStatus('current')
pmon15minDataTmRsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 1, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataTmRsStatusInfo.setStatus('current')
pmon15minDataTmRsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataTmRsValue.setStatus('current')
pmon15minDataTmDMRRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 2), )
if mibBuilder.loadTexts: pmon15minDataTmDMRRsTable.setStatus('current')
pmon15minDataTmDMRRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon15minDataTmDMRRsIfIndex"), (0, "IPE-COMMON-MIB", "pmon15minDataTmDMRRsMonitorName"))
if mibBuilder.loadTexts: pmon15minDataTmDMRRsEntry.setStatus('current')
pmon15minDataTmDMRRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon15minDataTmDMRRsIfIndex.setStatus('current')
pmon15minDataTmDMRRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEF", 4), ("pmonUAS", 5), ("pmonOFS", 6))))
if mibBuilder.loadTexts: pmon15minDataTmDMRRsMonitorName.setStatus('current')
pmon15minDataTmDMRRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon15minDataTmDMRRsNEAddress.setStatus('current')
pmon15minDataTmDMRRsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 2, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataTmDMRRsStatusInfo.setStatus('current')
pmon15minDataTmDMRRsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataTmDMRRsValue.setStatus('current')
pmon15minDataChannelizedModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2))
pmon15minDataChRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 1), )
if mibBuilder.loadTexts: pmon15minDataChRsTable.setStatus('current')
pmon15minDataChRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon15minDataChRsIfIndex"), (0, "IPE-COMMON-MIB", "pmon15minDataChRsMonitorName"))
if mibBuilder.loadTexts: pmon15minDataChRsEntry.setStatus('current')
pmon15minDataChRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon15minDataChRsIfIndex.setStatus('current')
pmon15minDataChRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEF", 4), ("pmonUAS", 5), ("pmonOFS", 6))))
if mibBuilder.loadTexts: pmon15minDataChRsMonitorName.setStatus('current')
pmon15minDataChRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon15minDataChRsNEAddress.setStatus('current')
pmon15minDataChRsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 1, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataChRsStatusInfo.setStatus('current')
pmon15minDataChRsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataChRsValue.setStatus('current')
pmon15minDataChMsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 2), )
if mibBuilder.loadTexts: pmon15minDataChMsTable.setStatus('current')
pmon15minDataChMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon15minDataChMsIfIndex"), (0, "IPE-COMMON-MIB", "pmon15minDataChMsMonitorName"))
if mibBuilder.loadTexts: pmon15minDataChMsEntry.setStatus('current')
pmon15minDataChMsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon15minDataChMsIfIndex.setStatus('current')
pmon15minDataChMsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEP", 4), ("pmonUAS", 5))))
if mibBuilder.loadTexts: pmon15minDataChMsMonitorName.setStatus('current')
pmon15minDataChMsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon15minDataChMsNEAddress.setStatus('current')
pmon15minDataChMsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 2, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataChMsStatusInfo.setStatus('current')
pmon15minDataChMsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minDataChMsValue.setStatus('current')
pmon15minData16E1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 3))
pmon15minData16E1PdhTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 3, 1), )
if mibBuilder.loadTexts: pmon15minData16E1PdhTable.setStatus('current')
pmon15minData16E1PdhEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 3, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon15minData16E1PdhIfIndex"), (0, "IPE-COMMON-MIB", "pmon15minData16E1PdhMonitorName"))
if mibBuilder.loadTexts: pmon15minData16E1PdhEntry.setStatus('current')
pmon15minData16E1PdhIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon15minData16E1PdhIfIndex.setStatus('current')
pmon15minData16E1PdhMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("pmonCV", 1))))
if mibBuilder.loadTexts: pmon15minData16E1PdhMonitorName.setStatus('current')
pmon15minData16E1PdhNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 3, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon15minData16E1PdhNEAddress.setStatus('current')
pmon15minData16E1PdhStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 3, 1, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minData16E1PdhStatusInfo.setStatus('current')
pmon15minData16E1PdhValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon15minData16E1PdhValue.setStatus('current')
pmon1dayDataRadioGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 3))
pmon1dayDataRadioTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 3, 1), )
if mibBuilder.loadTexts: pmon1dayDataRadioTable.setStatus('current')
pmon1dayDataRadioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 3, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon1dayDataModemIfIndex"), (0, "IPE-COMMON-MIB", "pmon1dayDataModemMonitorName"))
if mibBuilder.loadTexts: pmon1dayDataRadioEntry.setStatus('current')
pmon1dayDataModemIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon1dayDataModemIfIndex.setStatus('current')
pmon1dayDataModemMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEF", 4), ("pmonUAS", 5), ("pmonOFS", 6))))
if mibBuilder.loadTexts: pmon1dayDataModemMonitorName.setStatus('current')
pmon1dayDataRadioNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 3, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon1dayDataRadioNEAddress.setStatus('current')
pmon1dayDataModemStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 3, 1, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataModemStatusInfo.setStatus('current')
pmon1dayDataRfValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataRfValue.setStatus('current')
pmon1dayDataCableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4))
pmon1dayDataThroughModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1))
pmon1dayDataTmRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 1), )
if mibBuilder.loadTexts: pmon1dayDataTmRsTable.setStatus('current')
pmon1dayDataTmRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon1dayDataTmRsIfIndex"), (0, "IPE-COMMON-MIB", "pmon1dayDataTmRsMonitorName"))
if mibBuilder.loadTexts: pmon1dayDataTmRsEntry.setStatus('current')
pmon1dayDataTmRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon1dayDataTmRsIfIndex.setStatus('current')
pmon1dayDataTmRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEF", 4), ("pmonUAS", 5), ("pmonOFS", 6))))
if mibBuilder.loadTexts: pmon1dayDataTmRsMonitorName.setStatus('current')
pmon1dayDataTmRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon1dayDataTmRsNEAddress.setStatus('current')
pmon1dayDataTmRsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 1, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataTmRsStatusInfo.setStatus('current')
pmon1dayDataTmRsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataTmRsValue.setStatus('current')
pmon1dayDataTmDMRRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 2), )
if mibBuilder.loadTexts: pmon1dayDataTmDMRRsTable.setStatus('current')
pmon1dayDataTmDMRRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon1dayDataTmDMRRsIfIndex"), (0, "IPE-COMMON-MIB", "pmon1dayDataTmDMRRsMonitorName"))
if mibBuilder.loadTexts: pmon1dayDataTmDMRRsEntry.setStatus('current')
pmon1dayDataTmDMRRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon1dayDataTmDMRRsIfIndex.setStatus('current')
pmon1dayDataTmDMRRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEF", 4), ("pmonUAS", 5), ("pmonOFS", 6))))
if mibBuilder.loadTexts: pmon1dayDataTmDMRRsMonitorName.setStatus('current')
pmon1dayDataTmDMRRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon1dayDataTmDMRRsNEAddress.setStatus('current')
pmon1dayDataTmDMRRsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 2, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataTmDMRRsStatusInfo.setStatus('current')
pmon1dayDataTmDMRRsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataTmDMRRsValue.setStatus('current')
pmon1dayDataChannelizedModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2))
pmon1dayDataChRsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 1), )
if mibBuilder.loadTexts: pmon1dayDataChRsTable.setStatus('current')
pmon1dayDataChRsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon1dayDataChRsIfIndex"), (0, "IPE-COMMON-MIB", "pmon1dayDataChRsMonitorName"))
if mibBuilder.loadTexts: pmon1dayDataChRsEntry.setStatus('current')
pmon1dayDataChRsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon1dayDataChRsIfIndex.setStatus('current')
pmon1dayDataChRsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEF", 4), ("pmonUAS", 5), ("pmonOFS", 6))))
if mibBuilder.loadTexts: pmon1dayDataChRsMonitorName.setStatus('current')
pmon1dayDataChRsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon1dayDataChRsNEAddress.setStatus('current')
pmon1dayDataChRsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 1, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataChRsStatusInfo.setStatus('current')
pmon1dayDataChRsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataChRsValue.setStatus('current')
pmon1dayDataChMsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 2), )
if mibBuilder.loadTexts: pmon1dayDataChMsTable.setStatus('current')
pmon1dayDataChMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon1dayDataChMsIfIndex"), (0, "IPE-COMMON-MIB", "pmon1dayDataChMsMonitorName"))
if mibBuilder.loadTexts: pmon1dayDataChMsEntry.setStatus('current')
pmon1dayDataChMsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon1dayDataChMsIfIndex.setStatus('current')
pmon1dayDataChMsMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pmonBBE", 1), ("pmonES", 2), ("pmonSES", 3), ("pmonSEP", 4), ("pmonUAS", 5))))
if mibBuilder.loadTexts: pmon1dayDataChMsMonitorName.setStatus('current')
pmon1dayDataChMsNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon1dayDataChMsNEAddress.setStatus('current')
pmon1dayDataChMsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 2, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataChMsStatusInfo.setStatus('current')
pmon1dayDataChMsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayDataChMsValue.setStatus('current')
pmon1dayData16E1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 3))
pmon1dayData16E1PdhTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 3, 1), )
if mibBuilder.loadTexts: pmon1dayData16E1PdhTable.setStatus('current')
pmon1dayData16E1PdhEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 3, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmon1dayData16E1PdhIfIndex"), (0, "IPE-COMMON-MIB", "pmon1dayData16E1PdhMonitorName"))
if mibBuilder.loadTexts: pmon1dayData16E1PdhEntry.setStatus('current')
pmon1dayData16E1PdhIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmon1dayData16E1PdhIfIndex.setStatus('current')
pmon1dayData16E1PdhMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("pmonCV", 1))))
if mibBuilder.loadTexts: pmon1dayData16E1PdhMonitorName.setStatus('current')
pmon1dayData16E1PdhNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 3, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: pmon1dayData16E1PdhNEAddress.setStatus('current')
pmon1dayData16E1PdhStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 3, 1, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayData16E1PdhStatusInfo.setStatus('current')
pmon1dayData16E1PdhValue = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 9, 4, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmon1dayData16E1PdhValue.setStatus('current')
pmonTxRxLev15minCurrentDataTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 1), )
if mibBuilder.loadTexts: pmonTxRxLev15minCurrentDataTable.setStatus('current')
pmonTxRxLev15minCurrentDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmonTxRxLev15minCurrentDataIfIndex"))
if mibBuilder.loadTexts: pmonTxRxLev15minCurrentDataEntry.setStatus('current')
pmonTxRxLev15minCurrentDataIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmonTxRxLev15minCurrentDataIfIndex.setStatus('current')
pmonTxRxLev15minCurrentDataNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: pmonTxRxLev15minCurrentDataNEAddress.setStatus('current')
pmonTxRxLev15minCurrentDataStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 1, 1, 3), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonTxRxLev15minCurrentDataStatusInfo.setStatus('current')
pmonTxRxLev15minRxLevelMaxCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonTxRxLev15minRxLevelMaxCurrentData.setStatus('current')
pmonTxRxLev15minRxLevelMinCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonTxRxLev15minRxLevelMinCurrentData.setStatus('current')
pmonTxRxLev1dayCurrentDataTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 2), )
if mibBuilder.loadTexts: pmonTxRxLev1dayCurrentDataTable.setStatus('current')
pmonTxRxLev1dayCurrentDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "pmonTxRxLev1dayCurrentDataIfIndex"))
if mibBuilder.loadTexts: pmonTxRxLev1dayCurrentDataEntry.setStatus('current')
pmonTxRxLev1dayCurrentDataIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pmonTxRxLev1dayCurrentDataIfIndex.setStatus('current')
pmonTxRxLev1dayCurrentDataNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: pmonTxRxLev1dayCurrentDataNEAddress.setStatus('current')
pmonTxRxLev1dayCurrentDataStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 2, 1, 3), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonTxRxLev1dayCurrentDataStatusInfo.setStatus('current')
pmonTxRxLev1dayRxLevelMaxCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonTxRxLev1dayRxLevelMaxCurrentData.setStatus('current')
pmonTxRxLev1dayRxLevelMinCurrentData = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 10, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmonTxRxLev1dayRxLevelMinCurrentData.setStatus('current')
rmonEthGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1))
rmon15minPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1))
rmon15minPortTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1), )
if mibBuilder.loadTexts: rmon15minPortTable.setStatus('current')
rmon15minPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "rmon15minIfIndex"))
if mibBuilder.loadTexts: rmon15minPortEntry.setStatus('current')
rmon15minIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rmon15minIfIndex.setStatus('current')
rmon15minNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: rmon15minNEAddress.setStatus('current')
rmon15minHCRxEthStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsOctets.setStatus('current')
rmon15minHCRxEthStatsOctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsOctetsStatusInfo.setStatus('current')
rmon15minHCTxEthStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsOctets.setStatus('current')
rmon15minHCTxEthStatsOctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsOctetsStatusInfo.setStatus('current')
rmon15minRxEthStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts.setStatus('current')
rmon15minRxEthStatsPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPktsStatusInfo.setStatus('current')
rmon15minTxEthStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts.setStatus('current')
rmon15minTxEthStatsPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPktsStatusInfo.setStatus('current')
rmon15minRxEthStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsDropEvents.setStatus('current')
rmon15minRxEthStatsDropEventsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsDropEventsStatusInfo.setStatus('current')
rmon15minRxEthStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsUndersizePkts.setStatus('current')
rmon15minRxEthStatsUndersizePktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsUndersizePktsStatusInfo.setStatus('current')
rmon15minRxEthStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsFragments.setStatus('current')
rmon15minRxEthStatsFragmentsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsFragmentsStatusInfo.setStatus('current')
rmon15minRxEthStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts64Octets.setStatus('current')
rmon15minRxEthStatsPkts64OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts64OctetsStatusInfo.setStatus('current')
rmon15minTxEthStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts64Octets.setStatus('current')
rmon15minTxEthStatsPkts64OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts64OctetsStatusInfo.setStatus('current')
rmon15minRxEthStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts65to127Octets.setStatus('current')
rmon15minRxEthStatsPkts65to127OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts65to127OctetsStatusInfo.setStatus('current')
rmon15minTxEthStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts65to127Octets.setStatus('current')
rmon15minTxEthStatsPkts65to127OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts65to127OctetsStatusInfo.setStatus('current')
rmon15minRxEthStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts128to255Octets.setStatus('current')
rmon15minRxEthStatsPkts128to255OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts128to255OctetsStatusInfo.setStatus('current')
rmon15minTxEthStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts128to255Octets.setStatus('current')
rmon15minTxEthStatsPkts128to255OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts128to255OctetsStatusInfo.setStatus('current')
rmon15minRxEthStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts256to511Octets.setStatus('current')
rmon15minRxEthStatsPkts256to511OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts256to511OctetsStatusInfo.setStatus('current')
rmon15minTxEthStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts256to511Octets.setStatus('current')
rmon15minTxEthStatsPkts256to511OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts256to511OctetsStatusInfo.setStatus('current')
rmon15minRxEthStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts512to1023Octets.setStatus('current')
rmon15minRxEthStatsPkts512to1023OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts512to1023OctetsStatusInfo.setStatus('current')
rmon15minTxEthStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts512to1023Octets.setStatus('current')
rmon15minTxEthStatsPkts512to1023OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts512to1023OctetsStatusInfo.setStatus('current')
rmon15minRxEthStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts1024to1518Octets.setStatus('current')
rmon15minRxEthStatsPkts1024to1518OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsPkts1024to1518OctetsStatusInfo.setStatus('current')
rmon15minTxEthStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts1024to1518Octets.setStatus('current')
rmon15minTxEthStatsPkts1024to1518OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsPkts1024to1518OctetsStatusInfo.setStatus('current')
rmon15minRxEthStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsCRCAlignErrors.setStatus('current')
rmon15minRxEthStatsCRCAlignErrorsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsCRCAlignErrorsStatusInfo.setStatus('current')
rmon15minRxEthStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsOversizePkts.setStatus('current')
rmon15minRxEthStatsOversizePktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsOversizePktsStatusInfo.setStatus('current')
rmon15minRxEthStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsJabbers.setStatus('current')
rmon15minRxEthStatsJabbersStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsJabbersStatusInfo.setStatus('current')
rmon15minRxEthStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsMulticastPkts.setStatus('current')
rmon15minRxEthStatsMulticastPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsMulticastPktsStatusInfo.setStatus('current')
rmon15minTxEthStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsMulticastPkts.setStatus('current')
rmon15minTxEthStatsMulticastPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsMulticastPktsStatusInfo.setStatus('current')
rmon15minRxEthStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsBroadcastPkts.setStatus('current')
rmon15minRxEthStatsBroadcastPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsBroadcastPktsStatusInfo.setStatus('current')
rmon15minTxEthStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsBroadcastPkts.setStatus('current')
rmon15minTxEthStatsBroadcastPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsBroadcastPktsStatusInfo.setStatus('current')
rmon15minTxEthStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsCollisions.setStatus('current')
rmon15minTxEthStatsCollisionsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsCollisionsStatusInfo.setStatus('current')
rmon15minHCRxUnknownTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxUnknownTPID.setStatus('current')
rmon15minHCRxUnknownTPIDStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxUnknownTPIDStatusInfo.setStatus('current')
rmon15minHCRxUnknownVID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxUnknownVID.setStatus('current')
rmon15minHCRxUnknownVIDStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxUnknownVIDStatusInfo.setStatus('current')
rmon15minHCRxMAClimit = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxMAClimit.setStatus('current')
rmon15minHCRxMAClimitStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxMAClimitStatusInfo.setStatus('current')
rmon15minHCRxFilterDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxFilterDiscard.setStatus('current')
rmon15minHCRxFilterDiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxFilterDiscardStatusInfo.setStatus('current')
rmon15minHCRxQoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxQoSDiscard.setStatus('current')
rmon15minHCRxQoSDiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxQoSDiscardStatusInfo.setStatus('current')
rmon15minHCTxQueue0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue0Discard.setStatus('current')
rmon15minHCTxQueue0DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue0DiscardStatusInfo.setStatus('current')
rmon15minHCTxQueue1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue1Discard.setStatus('current')
rmon15minHCTxQueue1DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue1DiscardStatusInfo.setStatus('current')
rmon15minHCTxQueue2Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue2Discard.setStatus('current')
rmon15minHCTxQueue2DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue2DiscardStatusInfo.setStatus('current')
rmon15minHCTxQueue3Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue3Discard.setStatus('current')
rmon15minHCTxQueue3DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue3DiscardStatusInfo.setStatus('current')
rmon15minHCTxQueue4Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue4Discard.setStatus('current')
rmon15minHCTxQueue4DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue4DiscardStatusInfo.setStatus('current')
rmon15minHCTxQueue5Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue5Discard.setStatus('current')
rmon15minHCTxQueue5DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue5DiscardStatusInfo.setStatus('current')
rmon15minHCTxQueue6Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue6Discard.setStatus('current')
rmon15minHCTxQueue6DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue6DiscardStatusInfo.setStatus('current')
rmon15minHCTxQueue7Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue7Discard.setStatus('current')
rmon15minHCTxQueue7DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue7DiscardStatusInfo.setStatus('current')
rmon15minTxEthStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsOversizePkts.setStatus('current')
rmon15minTxEthStatsOversizePktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsOversizePktsStatusInfo.setStatus('current')
rmon15minPort2Table = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2), )
if mibBuilder.loadTexts: rmon15minPort2Table.setStatus('current')
rmon15minPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "rmon15minPort2IfIndex"))
if mibBuilder.loadTexts: rmon15minPort2Entry.setStatus('current')
rmon15minPort2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rmon15minPort2IfIndex.setStatus('current')
rmon15minPort2NEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: rmon15minPort2NEAddress.setStatus('current')
rmon15minHCRxEthStatsOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsOctets2.setStatus('current')
rmon15minHCRxEthStatsOctets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsOctets2Status.setStatus('current')
rmon15minHCTxEthStatsOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsOctets2.setStatus('current')
rmon15minHCTxEthStatsOctets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 6), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsOctets2Status.setStatus('current')
rmon15minHCRxEthStatsPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts2.setStatus('current')
rmon15minHCRxEthStatsPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 8), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts2Status.setStatus('current')
rmon15minHCTxEthStatsPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts2.setStatus('current')
rmon15minHCTxEthStatsPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 10), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts2Status.setStatus('current')
rmon15minRxEthStatsDropEvents2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsDropEvents2.setStatus('current')
rmon15minRxEthStatsDropEvents2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 12), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsDropEvents2Status.setStatus('current')
rmon15minRxEthStatsUndersizePkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsUndersizePkts2.setStatus('current')
rmon15minRxEthStatsUndersizePkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 14), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsUndersizePkts2Status.setStatus('current')
rmon15minRxEthStatsFragments2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsFragments2.setStatus('current')
rmon15minRxEthStatsFragments2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 16), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsFragments2Status.setStatus('current')
rmon15minHCRxEthStatsPkts64Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts64Octets2.setStatus('current')
rmon15minHCRxEthStatsPkts64Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 18), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts64Octets2Status.setStatus('current')
rmon15minHCTxEthStatsPkts64Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts64Octets2.setStatus('current')
rmon15minHCTxEthStatsPkts64Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 20), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts64Octets2Status.setStatus('current')
rmon15minHCRxEthStatsPkts65to127Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts65to127Octets2.setStatus('current')
rmon15minHCRxEthStatsPkts65to127Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 22), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts65to127Octets2Status.setStatus('current')
rmon15minHCTxEthStatsPkts65to127Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts65to127Octets2.setStatus('current')
rmon15minHCTxEthStatsPkts65to127Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 24), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts65to127Octets2Status.setStatus('current')
rmon15minHCRxEthStatsPkts128to255Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts128to255Octets2.setStatus('current')
rmon15minHCRxEthStatsPkts128to255Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 26), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts128to255Octets2Status.setStatus('current')
rmon15minHCTxEthStatsPkts128to255Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts128to255Octets2.setStatus('current')
rmon15minHCTxEthStatsPkts128to255Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 28), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts128to255Octets2Status.setStatus('current')
rmon15minHCRxEthStatsPkts256to511Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts256to511Octets2.setStatus('current')
rmon15minHCRxEthStatsPkts256to511Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 30), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts256to511Octets2Status.setStatus('current')
rmon15minHCTxEthStatsPkts256to511Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts256to511Octets2.setStatus('current')
rmon15minHCTxEthStatsPkts256to511Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 32), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts256to511Octets2Status.setStatus('current')
rmon15minHCRxEthStatsPkts512to1023Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts512to1023Octets2.setStatus('current')
rmon15minHCRxEthStatsPkts512to1023Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 34), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts512to1023Octets2Status.setStatus('current')
rmon15minHCTxEthStatsPkts512to1023Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts512to1023Octets2.setStatus('current')
rmon15minHCTxEthStatsPkts512to1023Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 36), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts512to1023Octets2Status.setStatus('current')
rmon15minHCRxEthStatsPkts1024to1518Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts1024to1518Octets2.setStatus('current')
rmon15minHCRxEthStatsPkts1024to1518Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 38), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxEthStatsPkts1024to1518Octets2Status.setStatus('current')
rmon15minHCTxEthStatsPkts1024to1518Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts1024to1518Octets2.setStatus('current')
rmon15minHCTxEthStatsPkts1024to1518Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 40), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxEthStatsPkts1024to1518Octets2Status.setStatus('current')
rmon15minRxEthStatsCRCAlignErrors2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsCRCAlignErrors2.setStatus('current')
rmon15minRxEthStatsCRCAlignErrors2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 42), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsCRCAlignErrors2Status.setStatus('current')
rmon15minRxEthStatsOversizePkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsOversizePkts2.setStatus('current')
rmon15minRxEthStatsOversizePkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 44), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsOversizePkts2Status.setStatus('current')
rmon15minRxEthStatsJabbers2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsJabbers2.setStatus('current')
rmon15minRxEthStatsJabbers2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 46), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsJabbers2Status.setStatus('current')
rmon15minRxEthStatsMulticastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsMulticastPkts2.setStatus('current')
rmon15minRxEthStatsMulticastPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 48), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsMulticastPkts2Status.setStatus('current')
rmon15minTxEthStatsMulticastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsMulticastPkts2.setStatus('current')
rmon15minTxEthStatsMulticastPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 50), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsMulticastPkts2Status.setStatus('current')
rmon15minRxEthStatsBroadcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsBroadcastPkts2.setStatus('current')
rmon15minRxEthStatsBroadcastPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 52), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minRxEthStatsBroadcastPkts2Status.setStatus('current')
rmon15minTxEthStatsBroadcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsBroadcastPkts2.setStatus('current')
rmon15minTxEthStatsBroadcastPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 54), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsBroadcastPkts2Status.setStatus('current')
rmon15minTxEthStatsCollisions2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsCollisions2.setStatus('current')
rmon15minTxEthStatsCollisions2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 56), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsCollisions2Status.setStatus('current')
rmon15minHCRxUnknownTPID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxUnknownTPID2.setStatus('current')
rmon15minHCRxUnknownTPID2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 58), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxUnknownTPID2Status.setStatus('current')
rmon15minHCRxUnknownVID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxUnknownVID2.setStatus('current')
rmon15minHCRxUnknownVID2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 60), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxUnknownVID2Status.setStatus('current')
rmon15minHCRxMAClimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxMAClimit2.setStatus('current')
rmon15minHCRxMAClimit2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 62), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxMAClimit2Status.setStatus('current')
rmon15minHCRxFilterDiscard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxFilterDiscard2.setStatus('current')
rmon15minHCRxFilterDiscard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 64), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxFilterDiscard2Status.setStatus('current')
rmon15minHCRxQoSDiscard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxQoSDiscard2.setStatus('current')
rmon15minHCRxQoSDiscard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 66), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxQoSDiscard2Status.setStatus('current')
rmon15minHCTxQueue0Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue0Discard2.setStatus('current')
rmon15minHCTxQueue0Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 68), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue0Discard2Status.setStatus('current')
rmon15minHCTxQueue1Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue1Discard2.setStatus('current')
rmon15minHCTxQueue1Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 70), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue1Discard2Status.setStatus('current')
rmon15minHCTxQueue2Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue2Discard2.setStatus('current')
rmon15minHCTxQueue2Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 72), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue2Discard2Status.setStatus('current')
rmon15minHCTxQueue3Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue3Discard2.setStatus('current')
rmon15minHCTxQueue3Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 74), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue3Discard2Status.setStatus('current')
rmon15minHCTxQueue4Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue4Discard2.setStatus('current')
rmon15minHCTxQueue4Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 76), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue4Discard2Status.setStatus('current')
rmon15minHCTxQueue5Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue5Discard2.setStatus('current')
rmon15minHCTxQueue5Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 78), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue5Discard2Status.setStatus('current')
rmon15minHCTxQueue6Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue6Discard2.setStatus('current')
rmon15minHCTxQueue6Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 80), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue6Discard2Status.setStatus('current')
rmon15minHCTxQueue7Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue7Discard2.setStatus('current')
rmon15minHCTxQueue7Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 82), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxQueue7Discard2Status.setStatus('current')
rmon15minTxEthStatsOversizePkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsOversizePkts2.setStatus('current')
rmon15minTxEthStatsOversizePkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 1, 2, 1, 84), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minTxEthStatsOversizePkts2Status.setStatus('current')
rmon1dayportGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2))
rmon1dayPortTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1), )
if mibBuilder.loadTexts: rmon1dayPortTable.setStatus('current')
rmon1dayPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "rmon1dayIfIndex"))
if mibBuilder.loadTexts: rmon1dayPortEntry.setStatus('current')
rmon1dayIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rmon1dayIfIndex.setStatus('current')
rmon1dayNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: rmon1dayNEAddress.setStatus('current')
rmon1dayHCRxEthStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsOctets.setStatus('current')
rmon1dayHCRxEthStatsOctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsOctetsStatusInfo.setStatus('current')
rmon1dayHCTxEthStatsOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsOctets.setStatus('current')
rmon1dayHCTxEthStatsOctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsOctetsStatusInfo.setStatus('current')
rmon1dayRxEthStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts.setStatus('current')
rmon1dayRxEthStatsPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPktsStatusInfo.setStatus('current')
rmon1dayTxEthStatsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts.setStatus('current')
rmon1dayTxEthStatsPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPktsStatusInfo.setStatus('current')
rmon1dayRxEthStatsDropEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsDropEvents.setStatus('current')
rmon1dayRxEthStatsDropEventsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsDropEventsStatusInfo.setStatus('current')
rmon1dayRxEthStatsUndersizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsUndersizePkts.setStatus('current')
rmon1dayRxEthStatsUndersizePktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsUndersizePktsStatusInfo.setStatus('current')
rmon1dayRxEthStatsFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsFragments.setStatus('current')
rmon1dayRxEthStatsFragmentsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsFragmentsStatusInfo.setStatus('current')
rmon1dayRxEthStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts64Octets.setStatus('current')
rmon1dayRxEthStatsPkts64OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts64OctetsStatusInfo.setStatus('current')
rmon1dayTxEthStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts64Octets.setStatus('current')
rmon1dayTxEthStatsPkts64OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts64OctetsStatusInfo.setStatus('current')
rmon1dayRxEthStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts65to127Octets.setStatus('current')
rmon1dayRxEthStatsPkts65to127OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts65to127OctetsStatusInfo.setStatus('current')
rmon1dayTxEthStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts65to127Octets.setStatus('current')
rmon1dayTxEthStatsPkts65to127OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts65to127OctetsStatusInfo.setStatus('current')
rmon1dayRxEthStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts128to255Octets.setStatus('current')
rmon1dayRxEthStatsPkts128to255OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts128to255OctetsStatusInfo.setStatus('current')
rmon1dayTxEthStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts128to255Octets.setStatus('current')
rmon1dayTxEthStatsPkts128to255OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts128to255OctetsStatusInfo.setStatus('current')
rmon1dayRxEthStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts256to511Octets.setStatus('current')
rmon1dayRxEthStatsPkts256to511OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts256to511OctetsStatusInfo.setStatus('current')
rmon1dayTxEthStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts256to511Octets.setStatus('current')
rmon1dayTxEthStatsPkts256to511OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts256to511OctetsStatusInfo.setStatus('current')
rmon1dayRxEthStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts512to1023Octets.setStatus('current')
rmon1dayRxEthStatsPkts512to1023OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts512to1023OctetsStatusInfo.setStatus('current')
rmon1dayTxEthStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts512to1023Octets.setStatus('current')
rmon1dayTxEthStatsPkts512to1023OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts512to1023OctetsStatusInfo.setStatus('current')
rmon1dayRxEthStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts1024to1518Octets.setStatus('current')
rmon1dayRxEthStatsPkts1024to1518OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsPkts1024to1518OctetsStatusInfo.setStatus('current')
rmon1dayTxEthStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts1024to1518Octets.setStatus('current')
rmon1dayTxEthStatsPkts1024to1518OctetsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsPkts1024to1518OctetsStatusInfo.setStatus('current')
rmon1dayRxEthStatsCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsCRCAlignErrors.setStatus('current')
rmon1dayRxEthStatsCRCAlignErrorsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsCRCAlignErrorsStatusInfo.setStatus('current')
rmon1dayRxEthStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsOversizePkts.setStatus('current')
rmon1dayRxEthStatsOversizePktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsOversizePktsStatusInfo.setStatus('current')
rmon1dayRxEthStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsJabbers.setStatus('current')
rmon1dayRxEthStatsJabbersStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsJabbersStatusInfo.setStatus('current')
rmon1dayRxEthStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsMulticastPkts.setStatus('current')
rmon1dayRxEthStatsMulticastPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsMulticastPktsStatusInfo.setStatus('current')
rmon1dayTxEthStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsMulticastPkts.setStatus('current')
rmon1dayTxEthStatsMulticastPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsMulticastPktsStatusInfo.setStatus('current')
rmon1dayRxEthStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsBroadcastPkts.setStatus('current')
rmon1dayRxEthStatsBroadcastPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsBroadcastPktsStatusInfo.setStatus('current')
rmon1dayTxEthStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsBroadcastPkts.setStatus('current')
rmon1dayTxEthStatsBroadcastPktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsBroadcastPktsStatusInfo.setStatus('current')
rmon1dayTxEthStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsCollisions.setStatus('current')
rmon1dayTxEthStatsCollisionsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsCollisionsStatusInfo.setStatus('current')
rmon1dayHCRxUnknownTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxUnknownTPID.setStatus('current')
rmon1dayHCRxUnknownTPIDStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxUnknownTPIDStatusInfo.setStatus('current')
rmon1dayHCRxUnknownVID = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxUnknownVID.setStatus('current')
rmon1dayHCRxUnknownVIDStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxUnknownVIDStatusInfo.setStatus('current')
rmon1dayHCRxMAClimit = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxMAClimit.setStatus('current')
rmon1dayHCRxMAClimitStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxMAClimitStatusInfo.setStatus('current')
rmon1dayHCRxFilterDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxFilterDiscard.setStatus('current')
rmon1dayHCRxFilterDiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxFilterDiscardStatusInfo.setStatus('current')
rmon1dayHCRxQoSDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxQoSDiscard.setStatus('current')
rmon1dayHCRxQoSDiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxQoSDiscardStatusInfo.setStatus('current')
rmon1dayHCTxQueue0Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue0Discard.setStatus('current')
rmon1dayHCTxQueue0DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue0DiscardStatusInfo.setStatus('current')
rmon1dayHCTxQueue1Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue1Discard.setStatus('current')
rmon1dayHCTxQueue1DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue1DiscardStatusInfo.setStatus('current')
rmon1dayHCTxQueue2Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue2Discard.setStatus('current')
rmon1dayHCTxQueue2DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue2DiscardStatusInfo.setStatus('current')
rmon1dayHCTxQueue3Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue3Discard.setStatus('current')
rmon1dayHCTxQueue3DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue3DiscardStatusInfo.setStatus('current')
rmon1dayHCTxQueue4Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue4Discard.setStatus('current')
rmon1dayHCTxQueue4DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue4DiscardStatusInfo.setStatus('current')
rmon1dayHCTxQueue5Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue5Discard.setStatus('current')
rmon1dayHCTxQueue5DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue5DiscardStatusInfo.setStatus('current')
rmon1dayHCTxQueue6Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue6Discard.setStatus('current')
rmon1dayHCTxQueue6DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue6DiscardStatusInfo.setStatus('current')
rmon1dayHCTxQueue7Discard = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue7Discard.setStatus('current')
rmon1dayHCTxQueue7DiscardStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue7DiscardStatusInfo.setStatus('current')
rmon1dayTxEthStatsOversizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsOversizePkts.setStatus('current')
rmon1dayTxEthStatsOversizePktsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 1, 1, 84), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsOversizePktsStatusInfo.setStatus('current')
rmon1dayPort2Table = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2), )
if mibBuilder.loadTexts: rmon1dayPort2Table.setStatus('current')
rmon1dayPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "rmon1dayPort2IfIndex"))
if mibBuilder.loadTexts: rmon1dayPort2Entry.setStatus('current')
rmon1dayPort2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rmon1dayPort2IfIndex.setStatus('current')
rmon1dayPort2NEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: rmon1dayPort2NEAddress.setStatus('current')
rmon1dayHCRxEthStatsOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsOctets2.setStatus('current')
rmon1dayHCRxEthStatsOctets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 4), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsOctets2Status.setStatus('current')
rmon1dayHCTxEthStatsOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsOctets2.setStatus('current')
rmon1dayHCTxEthStatsOctets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 6), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsOctets2Status.setStatus('current')
rmon1dayHCRxEthStatsPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts2.setStatus('current')
rmon1dayHCRxEthStatsPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 8), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts2Status.setStatus('current')
rmon1dayHCTxEthStatsPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts2.setStatus('current')
rmon1dayHCTxEthStatsPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 10), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts2Status.setStatus('current')
rmon1dayRxEthStatsDropEvents2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsDropEvents2.setStatus('current')
rmon1dayRxEthStatsDropEvents2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 12), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsDropEvents2Status.setStatus('current')
rmon1dayRxEthStatsUndersizePkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsUndersizePkts2.setStatus('current')
rmon1dayRxEthStatsUndersizePkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 14), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsUndersizePkts2Status.setStatus('current')
rmon1dayRxEthStatsFragments2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsFragments2.setStatus('current')
rmon1dayRxEthStatsFragments2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 16), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsFragments2Status.setStatus('current')
rmon1dayHCRxEthStatsPkts64Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts64Octets2.setStatus('current')
rmon1dayHCRxEthStatsPkts64Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 18), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts64Octets2Status.setStatus('current')
rmon1dayHCTxEthStatsPkts64Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts64Octets2.setStatus('current')
rmon1dayHCTxEthStatsPkts64Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 20), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts64Octets2Status.setStatus('current')
rmon1dayHCRxEthStatsPkts65to127Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts65to127Octets2.setStatus('current')
rmon1dayHCRxEthStatsPkts65to127Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 22), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts65to127Octets2Status.setStatus('current')
rmon1dayHCTxEthStatsPkts65to127Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts65to127Octets2.setStatus('current')
rmon1dayHCTxEthStatsPkts65to127Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 24), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts65to127Octets2Status.setStatus('current')
rmon1dayHCRxEthStatsPkts128to255Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts128to255Octets2.setStatus('current')
rmon1dayHCRxEthStatsPkts128to255Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 26), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts128to255Octets2Status.setStatus('current')
rmon1dayHCTxEthStatsPkts128to255Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts128to255Octets2.setStatus('current')
rmon1dayHCTxEthStatsPkts128to255Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 28), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts128to255Octets2Status.setStatus('current')
rmon1dayHCRxEthStatsPkts256to511Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts256to511Octets2.setStatus('current')
rmon1dayHCRxEthStatsPkts256to511Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 30), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts256to511Octets2Status.setStatus('current')
rmon1dayHCTxEthStatsPkts256to511Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts256to511Octets2.setStatus('current')
rmon1dayHCTxEthStatsPkts256to511Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 32), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts256to511Octets2Status.setStatus('current')
rmon1dayHCRxEthStatsPkts512to1023Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts512to1023Octets2.setStatus('current')
rmon1dayHCRxEthStatsPkts512to1023Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 34), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts512to1023Octets2Status.setStatus('current')
rmon1dayHCTxEthStatsPkts512to1023Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts512to1023Octets2.setStatus('current')
rmon1dayHCTxEthStatsPkts512to1023Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 36), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts512to1023Octets2Status.setStatus('current')
rmon1dayHCRxEthStatsPkts1024to1518Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts1024to1518Octets2.setStatus('current')
rmon1dayHCRxEthStatsPkts1024to1518Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 38), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxEthStatsPkts1024to1518Octets2Status.setStatus('current')
rmon1dayHCTxEthStatsPkts1024to1518Octets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts1024to1518Octets2.setStatus('current')
rmon1dayHCTxEthStatsPkts1024to1518Octets2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 40), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxEthStatsPkts1024to1518Octets2Status.setStatus('current')
rmon1dayRxEthStatsCRCAlignErrors2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsCRCAlignErrors2.setStatus('current')
rmon1dayRxEthStatsCRCAlignErrors2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 42), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsCRCAlignErrors2Status.setStatus('current')
rmon1dayRxEthStatsOversizePkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsOversizePkts2.setStatus('current')
rmon1dayRxEthStatsOversizePkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 44), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsOversizePkts2Status.setStatus('current')
rmon1dayRxEthStatsJabbers2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsJabbers2.setStatus('current')
rmon1dayRxEthStatsJabbers2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 46), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsJabbers2Status.setStatus('current')
rmon1dayRxEthStatsMulticastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsMulticastPkts2.setStatus('current')
rmon1dayRxEthStatsMulticastPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 48), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsMulticastPkts2Status.setStatus('current')
rmon1dayTxEthStatsMulticastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsMulticastPkts2.setStatus('current')
rmon1dayTxEthStatsMulticastPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 50), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsMulticastPkts2Status.setStatus('current')
rmon1dayRxEthStatsBroadcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsBroadcastPkts2.setStatus('current')
rmon1dayRxEthStatsBroadcastPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 52), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayRxEthStatsBroadcastPkts2Status.setStatus('current')
rmon1dayTxEthStatsBroadcastPkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsBroadcastPkts2.setStatus('current')
rmon1dayTxEthStatsBroadcastPkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 54), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsBroadcastPkts2Status.setStatus('current')
rmon1dayTxEthStatsCollisions2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsCollisions2.setStatus('current')
rmon1dayTxEthStatsCollisions2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 56), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsCollisions2Status.setStatus('current')
rmon1dayHCRxUnknownTPID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxUnknownTPID2.setStatus('current')
rmon1dayHCRxUnknownTPID2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 58), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxUnknownTPID2Status.setStatus('current')
rmon1dayHCRxUnknownVID2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxUnknownVID2.setStatus('current')
rmon1dayHCRxUnknownVID2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 60), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxUnknownVID2Status.setStatus('current')
rmon1dayHCRxMAClimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxMAClimit2.setStatus('current')
rmon1dayHCRxMAClimit2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 62), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxMAClimit2Status.setStatus('current')
rmon1dayHCRxFilterDiscard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxFilterDiscard2.setStatus('current')
rmon1dayHCRxFilterDiscard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 64), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxFilterDiscard2Status.setStatus('current')
rmon1dayHCRxQoSDiscard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxQoSDiscard2.setStatus('current')
rmon1dayHCRxQoSDiscard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 66), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxQoSDiscard2Status.setStatus('current')
rmon1dayHCTxQueue0Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue0Discard2.setStatus('current')
rmon1dayHCTxQueue0Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 68), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue0Discard2Status.setStatus('current')
rmon1dayHCTxQueue1Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue1Discard2.setStatus('current')
rmon1dayHCTxQueue1Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 70), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue1Discard2Status.setStatus('current')
rmon1dayHCTxQueue2Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue2Discard2.setStatus('current')
rmon1dayHCTxQueue2Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 72), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue2Discard2Status.setStatus('current')
rmon1dayHCTxQueue3Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue3Discard2.setStatus('current')
rmon1dayHCTxQueue3Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 74), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue3Discard2Status.setStatus('current')
rmon1dayHCTxQueue4Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue4Discard2.setStatus('current')
rmon1dayHCTxQueue4Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 76), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue4Discard2Status.setStatus('current')
rmon1dayHCTxQueue5Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue5Discard2.setStatus('current')
rmon1dayHCTxQueue5Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 78), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue5Discard2Status.setStatus('current')
rmon1dayHCTxQueue6Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue6Discard2.setStatus('current')
rmon1dayHCTxQueue6Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 80), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue6Discard2Status.setStatus('current')
rmon1dayHCTxQueue7Discard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue7Discard2.setStatus('current')
rmon1dayHCTxQueue7Discard2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 82), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxQueue7Discard2Status.setStatus('current')
rmon1dayTxEthStatsOversizePkts2 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsOversizePkts2.setStatus('current')
rmon1dayTxEthStatsOversizePkts2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 2, 2, 1, 84), IpeStatsInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayTxEthStatsOversizePkts2Status.setStatus('current')
rmon15minVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3))
rmon15minVlanTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1), )
if mibBuilder.loadTexts: rmon15minVlanTable.setStatus('current')
rmon15minVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "rmon15minVlanCounterIndex"))
if mibBuilder.loadTexts: rmon15minVlanEntry.setStatus('current')
rmon15minVlanCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rmon15minVlanCounterIndex.setStatus('current')
rmon15minVlanCounterNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: rmon15minVlanCounterNEAddress.setStatus('current')
rmon15minHCRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxFrame.setStatus('current')
rmon15minHCRxFrameStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxFrameStatusInfo.setStatus('current')
rmon15minHCTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxFrame.setStatus('current')
rmon15minHCTxFrameStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCTxFrameStatusInfo.setStatus('current')
rmon15minHCRxQoSDiscardFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxQoSDiscardFrame.setStatus('current')
rmon15minHCRxQoSDiscardFrameStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minHCRxQoSDiscardFrameStatusInfo.setStatus('current')
rmon15minVlanPortMappingTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 2), )
if mibBuilder.loadTexts: rmon15minVlanPortMappingTable.setStatus('current')
rmon15minVlanPortMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "rmon15minVlanPortMappingIfIndex"), (0, "IPE-COMMON-MIB", "rmon15minVlanMappingVlanIndex"))
if mibBuilder.loadTexts: rmon15minVlanPortMappingEntry.setStatus('current')
rmon15minVlanPortMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rmon15minVlanPortMappingIfIndex.setStatus('current')
rmon15minVlanMappingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: rmon15minVlanMappingVlanIndex.setStatus('current')
rmon15minVlanMappingNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: rmon15minVlanMappingNEAddress.setStatus('current')
rmon15minVlanCounterId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon15minVlanCounterId.setStatus('current')
rmon1dayVlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4))
rmon1dayVlanTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1), )
if mibBuilder.loadTexts: rmon1dayVlanTable.setStatus('current')
rmon1dayVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "rmon1dayVlanCounterIndex"))
if mibBuilder.loadTexts: rmon1dayVlanEntry.setStatus('current')
rmon1dayVlanCounterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rmon1dayVlanCounterIndex.setStatus('current')
rmon1dayVlanCounterNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: rmon1dayVlanCounterNEAddress.setStatus('current')
rmon1dayHCRxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxFrame.setStatus('current')
rmon1dayHCRxFrameStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxFrameStatusInfo.setStatus('current')
rmon1dayHCTxFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxFrame.setStatus('current')
rmon1dayHCTxFrameStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCTxFrameStatusInfo.setStatus('current')
rmon1dayHCRxQoSDiscardFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxQoSDiscardFrame.setStatus('current')
rmon1dayHCRxQoSDiscardFrameStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("valid-no-maintenance", 1), ("valid-maintenance", 2), ("invalid-no-maintenance", 3), ("invalid-maintenance", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayHCRxQoSDiscardFrameStatusInfo.setStatus('current')
rmon1dayVlanPortMappingTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 2), )
if mibBuilder.loadTexts: rmon1dayVlanPortMappingTable.setStatus('current')
rmon1dayVlanPortMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 2, 1), ).setIndexNames((0, "IPE-COMMON-MIB", "rmon1dayVlanPortMappingIfIndex"), (0, "IPE-COMMON-MIB", "rmon1dayVlanMappingVlanIndex"))
if mibBuilder.loadTexts: rmon1dayVlanPortMappingEntry.setStatus('current')
rmon1dayVlanPortMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rmon1dayVlanPortMappingIfIndex.setStatus('current')
rmon1dayVlanMappingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: rmon1dayVlanMappingVlanIndex.setStatus('current')
rmon1dayVlanMappingNEAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: rmon1dayVlanMappingNEAddress.setStatus('current')
rmon1dayVlanCounterId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 69, 501, 11, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmon1dayVlanCounterId.setStatus('current')
mibBuilder.exportSymbols("IPE-COMMON-MIB", rmon1dayRxEthStatsOversizePktsStatusInfo=rmon1dayRxEthStatsOversizePktsStatusInfo, lomAlarm=lomAlarm, invOduFreqInfoUpperLower=invOduFreqInfoUpperLower, invSfpInfoIfIndex=invSfpInfoIfIndex, eventEntry=eventEntry, rmon1dayTxEthStatsPkts512to1023OctetsStatusInfo=rmon1dayTxEthStatsPkts512to1023OctetsStatusInfo, rmon1dayHCTxQueue1DiscardStatusInfo=rmon1dayHCTxQueue1DiscardStatusInfo, invOduFreqInfoSubBand10=invOduFreqInfoSubBand10, eventTypeIndex=eventTypeIndex, tcn1dayRxLevTable=tcn1dayRxLevTable, invOduFreqInfoRxPhase=invOduFreqInfoRxPhase, pmon1dayDataTmDMRRsIfIndex=pmon1dayDataTmDMRRsIfIndex, hkOutputStatusTable=hkOutputStatusTable, asEthOamMegCcmFaultTable=asEthOamMegCcmFaultTable, asETHPortSFPTxError=asETHPortSFPTxError, rmon15minHCRxMAClimitStatusInfo=rmon15minHCRxMAClimitStatusInfo, eventTypeTrapId=eventTypeTrapId, metSysBitErrorRateStatus=metSysBitErrorRateStatus, rmon15minRxEthStatsFragments2=rmon15minRxEthStatsFragments2, tcn15minData16E1PdhMonitorName=tcn15minData16E1PdhMonitorName, asEthOamMegCcmUnexpectedMepCondition=asEthOamMegCcmUnexpectedMepCondition, rmon15minVlanEntry=rmon15minVlanEntry, pmon1dayDataChannelizedModeGroup=pmon1dayDataChannelizedModeGroup, alarmSummaryPmonTcnInfoNEAddress=alarmSummaryPmonTcnInfoNEAddress, eventStatusValue=eventStatusValue, auLopAlarm=auLopAlarm, rxLevelAlarm=rxLevelAlarm, rmon15minRxEthStatsMulticastPkts2Status=rmon15minRxEthStatsMulticastPkts2Status, tcn1dayHCRxEthStatsOversizePkts=tcn1dayHCRxEthStatsOversizePkts, alarmSummaryIduGroup=alarmSummaryIduGroup, asModemHeaderCompressCurrentMode=asModemHeaderCompressCurrentMode, tcn15minDataRadioNEAddress=tcn15minDataRadioNEAddress, rmon1dayHCTxQueue3Discard2=rmon1dayHCTxQueue3Discard2, tcn15minData16E1PdhIfIndex=tcn15minData16E1PdhIfIndex, asSyncETHTable=asSyncETHTable, iduTotalAlarm=iduTotalAlarm, rmon1dayVlanGroup=rmon1dayVlanGroup, asFdbVlanNEAddress=asFdbVlanNEAddress, fanGroupTable=fanGroupTable, asLlfReceiveInfoEntry=asLlfReceiveInfoEntry, rmon15minRxEthStatsPkts256to511Octets=rmon15minRxEthStatsPkts256to511Octets, rmon1dayRxEthStatsCRCAlignErrors2Status=rmon1dayRxEthStatsCRCAlignErrors2Status, ctrlGroupNEAddress=ctrlGroupNEAddress, IpeMepId=IpeMepId, rmon1dayTxEthStatsBroadcastPkts=rmon1dayTxEthStatsBroadcastPkts, rsTimAlarm=rsTimAlarm, metSysTempODUStatus=metSysTempODUStatus, rmon15minRxEthStatsPkts64OctetsStatusInfo=rmon15minRxEthStatsPkts64OctetsStatusInfo, asETHPortNEAddress=asETHPortNEAddress, invMainManufacturedDate=invMainManufacturedDate, asEthOamMegCcmFaultNEAddress=asEthOamMegCcmFaultNEAddress, rmon15minHCTxEthStatsPkts64Octets2=rmon15minHCTxEthStatsPkts64Octets2, tcn1dayDataChMsMonitorName=tcn1dayDataChMsMonitorName, rmon15minHCRxEthStatsPkts512to1023Octets2Status=rmon15minHCRxEthStatsPkts512to1023Octets2Status, rmon15minRxEthStatsBroadcastPkts=rmon15minRxEthStatsBroadcastPkts, tcn15minDataChRsEntry=tcn15minDataChRsEntry, provDot1adPortVlanList=provDot1adPortVlanList, rmon1dayPortEntry=rmon1dayPortEntry, alarmStatusGroup=alarmStatusGroup, apsSwStatus=apsSwStatus, modemXpicNEAddress=modemXpicNEAddress, pmon1dayDataTmDMRRsMonitorName=pmon1dayDataTmDMRRsMonitorName, asRstpPortOperPointToPoint=asRstpPortOperPointToPoint, asE1ChNEAddress=asE1ChNEAddress, metSysTempODUValue=metSysTempODUValue, rmon1dayHCTxEthStatsPkts64Octets2Status=rmon1dayHCTxEthStatsPkts64Octets2Status, earlyWarningAlarm=earlyWarningAlarm, pmon15minDataModemStatusInfo=pmon15minDataModemStatusInfo, tcn15minHCRxEthStatsCRCAlignErrors=tcn15minHCRxEthStatsCRCAlignErrors, rmon15minPortEntry=rmon15minPortEntry, nec_mib=nec_mib, alarmSummaryRmonTcnInfoIndex=alarmSummaryRmonTcnInfoIndex, rmon1dayHCRxQoSDiscard2=rmon1dayHCRxQoSDiscard2, ipeAlarmTrapItemVar=ipeAlarmTrapItemVar, asFdbPortIfIndex=asFdbPortIfIndex, pmon1dayDataChRsNEAddress=pmon1dayDataChRsNEAddress, pmon1dayDataRadioGroup=pmon1dayDataRadioGroup, provVlanNameEntry=provVlanNameEntry, invClk2mCardSerialNo=invClk2mCardSerialNo, asLlfReceiveInfoNEAddress=asLlfReceiveInfoNEAddress, rmon15minTxEthStatsOversizePktsStatusInfo=rmon15minTxEthStatsOversizePktsStatusInfo, rmon15minVlanMappingVlanIndex=rmon15minVlanMappingVlanIndex, tcn15minDataTmDMRRsEntry=tcn15minDataTmDMRRsEntry, oduSwGroupNEAddress=oduSwGroupNEAddress, tcn1dayDataRmonEntry=tcn1dayDataRmonEntry, uaeAlarm=uaeAlarm, tcn15minDataRmonEntry=tcn15minDataRmonEntry, rmon1dayTxEthStatsPkts1024to1518OctetsStatusInfo=rmon1dayTxEthStatsPkts1024to1518OctetsStatusInfo, ethUnequipped=ethUnequipped, pmon15minData16E1Group=pmon15minData16E1Group, modemBusErrorRx=modemBusErrorRx, rmon15minHCRxEthStatsPkts2Status=rmon15minHCRxEthStatsPkts2Status, clusterAlarmInIfIndex=clusterAlarmInIfIndex, rmon1dayVlanTable=rmon1dayVlanTable, asEthOamMepCcmDbNEAddress=asEthOamMepCcmDbNEAddress, tcn15minData16E1PdhEntry=tcn15minData16E1PdhEntry, asLicenseAlarmEntry=asLicenseAlarmEntry, tcn1dayDataChannelizedModeGroup=tcn1dayDataChannelizedModeGroup, psUnequipped=psUnequipped, invMainCardHardVersion=invMainCardHardVersion, ipeTrapCommon=ipeTrapCommon, asFdbEquipmentLearningLimitOver=asFdbEquipmentLearningLimitOver, pmonTxRxLev15minRxLevelMinCurrentData=pmonTxRxLev15minRxLevelMinCurrentData, rmon15minHCRxUnknownVID=rmon15minHCRxUnknownVID, asETHPortTable=asETHPortTable, asLlfGroupNEAddress=asLlfGroupNEAddress, rmon1dayTxEthStatsOversizePkts2=rmon1dayTxEthStatsOversizePkts2, modemCardTable=modemCardTable, ipeTrapStatusValueVars=ipeTrapStatusValueVars, rmon15minTxEthStatsOversizePkts2Status=rmon15minTxEthStatsOversizePkts2Status, tempAlarm=tempAlarm, pmon1dayDataTmRsMonitorName=pmon1dayDataTmRsMonitorName, pmonTxRxLev1dayCurrentDataIfIndex=pmonTxRxLev1dayCurrentDataIfIndex, frameID=frameID, pasoNeoIpe_common=pasoNeoIpe_common, tcn1dayDataRadioEntry=tcn1dayDataRadioEntry, asFanGroup=asFanGroup, tcn15minDataChRs=tcn15minDataChRs, provDot1qPortVlanEntry=provDot1qPortVlanEntry, rmon15minTxEthStatsBroadcastPkts2Status=rmon15minTxEthStatsBroadcastPkts2Status, asModemHeaderCompressNEAddress=asModemHeaderCompressNEAddress, rmon15minHCTxQueue4Discard2=rmon15minHCTxQueue4Discard2, invOduProvRangeMTPCMin=invOduProvRangeMTPCMin, asFdbPortTable=asFdbPortTable, iduCpuAlarm=iduCpuAlarm, tcn1dayHCRxEthStatsDropEvents=tcn1dayHCRxEthStatsDropEvents, invOduFreqInfoSubBand2=invOduFreqInfoSubBand2, rmon1dayTxEthStatsPkts512to1023Octets=rmon1dayTxEthStatsPkts512to1023Octets, hkOutputStatusEntry=hkOutputStatusEntry, asETHGroup=asETHGroup, stm1LaserShutdownStatus=stm1LaserShutdownStatus, rmon15minPort2IfIndex=rmon15minPort2IfIndex, rmon1dayRxEthStatsPkts64Octets=rmon1dayRxEthStatsPkts64Octets, ctrlGroupIndex=ctrlGroupIndex, invFPGAName=invFPGAName, rmon1dayHCTxQueue0Discard2=rmon1dayHCTxQueue0Discard2, asLicenseAlarm=asLicenseAlarm, rmon1dayIfIndex=rmon1dayIfIndex, asRstpPortOperEdgePort=asRstpPortOperEdgePort, pmon1dayDataChMsEntry=pmon1dayDataChMsEntry, pmon15minDataChRsValue=pmon15minDataChRsValue, rmon15minHCTxQueue2Discard=rmon15minHCTxQueue2Discard, rmon1dayPort2Entry=rmon1dayPort2Entry, asQosNEAddress=asQosNEAddress, rmon1dayRxEthStatsPkts=rmon1dayRxEthStatsPkts, sncpOnlineStatus=sncpOnlineStatus, metSysTxPowerStatus=metSysTxPowerStatus, rmon15minHCRxEthStatsOctets2=rmon15minHCRxEthStatsOctets2, auxGroupNEAddress=auxGroupNEAddress, pmon15minDataTmDMRRsMonitorName=pmon15minDataTmDMRRsMonitorName, ipeTrapCounterEntry=ipeTrapCounterEntry, rmon15minHCRxQoSDiscardFrameStatusInfo=rmon15minHCRxQoSDiscardFrameStatusInfo, rmon15minHCRxFrame=rmon15minHCRxFrame, clk2mMount=clk2mMount, eventRecordAccessFrom=eventRecordAccessFrom, asE1ChIfIndex=asE1ChIfIndex, fileDownloadEvent=fileDownloadEvent, refQL=refQL, rmon1dayHCTxEthStatsOctetsStatusInfo=rmon1dayHCTxEthStatsOctetsStatusInfo, rmon15minPort2Table=rmon15minPort2Table, tcn1dayDataChRsEntry=tcn1dayDataChRsEntry, rmon1dayVlanCounterNEAddress=rmon1dayVlanCounterNEAddress, rmon15minVlanPortMappingEntry=rmon15minVlanPortMappingEntry, e1BusErrorRx=e1BusErrorRx, rsExcAlarm=rsExcAlarm, rmon15minRxEthStatsFragments2Status=rmon15minRxEthStatsFragments2Status, invCardCodeNo=invCardCodeNo, statusChangeOctStr=statusChangeOctStr, asRstpIfIndex=asRstpIfIndex, asRstpPortInvalidBpduCause=asRstpPortInvalidBpduCause, rmon15minRxEthStatsPkts64Octets=rmon15minRxEthStatsPkts64Octets, rmon1dayHCTxQueue7DiscardStatusInfo=rmon1dayHCTxQueue7DiscardStatusInfo, rmon1dayHCTxQueue0Discard=rmon1dayHCTxQueue0Discard, eventAdditionalText5=eventAdditionalText5, rmon1dayHCTxQueue0Discard2Status=rmon1dayHCTxQueue0Discard2Status, rmon1dayHCTxQueue7Discard=rmon1dayHCTxQueue7Discard, alarmSummaryCommonInfoIndex=alarmSummaryCommonInfoIndex, provDot1qPortVlanIfIndex=provDot1qPortVlanIfIndex, alarmSummaryCommonInfoNEAddress=alarmSummaryCommonInfoNEAddress, pmon15minDataChRsMonitorName=pmon15minDataChRsMonitorName, invModuleInfoOduIfIndex=invModuleInfoOduIfIndex, rmon1dayHCRxUnknownTPID2=rmon1dayHCRxUnknownTPID2, clkRefIndex=clkRefIndex, asStm1Group=asStm1Group, asETHPortSFPLos=asETHPortSFPLos, asTCNGroup=asTCNGroup, lowBERAlarm=lowBERAlarm, invCardInfoTable=invCardInfoTable, rmon15minHCRxUnknownVIDStatusInfo=rmon15minHCRxUnknownVIDStatusInfo, modemCardNEAddress=modemCardNEAddress, maintSummaryGroup=maintSummaryGroup, rmon15minRxEthStatsBroadcastPkts2=rmon15minRxEthStatsBroadcastPkts2, tcn1dayDataTmRsMonitorName=tcn1dayDataTmRsMonitorName, modemCardEntry=modemCardEntry, l2SyncLossAlarm=l2SyncLossAlarm, alarmRmonEoamSummary=alarmRmonEoamSummary, asStm1CardTable=asStm1CardTable, rmon1dayTxEthStatsOversizePkts=rmon1dayTxEthStatsOversizePkts, tcn15minData16E1Group=tcn15minData16E1Group, controlEventUnsigned32=controlEventUnsigned32, meteringEntry=meteringEntry, provVlanNameNEAddress=provVlanNameNEAddress, tcn15minHCRxEthStatsUndersizePkts=tcn15minHCRxEthStatsUndersizePkts, pmon15minDataTmDMRRsStatusInfo=pmon15minDataTmDMRRsStatusInfo, rmon1dayHCTxEthStatsOctets2=rmon1dayHCTxEthStatsOctets2, rmon1dayHCRxUnknownVIDStatusInfo=rmon1dayHCRxUnknownVIDStatusInfo, invOduProvRangeRxThresholdMin=invOduProvRangeRxThresholdMin, pmon15minDataChMsValue=pmon15minDataChMsValue, rmon1dayHCTxQueue6Discard2=rmon1dayHCTxQueue6Discard2, asStm1ApsTable=asStm1ApsTable, rmon1dayHCTxQueue5DiscardStatusInfo=rmon1dayHCTxQueue5DiscardStatusInfo, invUpdateInfoSummary=invUpdateInfoSummary, asEthOamMepCcmUnexpectedMepCondition=asEthOamMepCcmUnexpectedMepCondition, asETHPortSFPEquip=asETHPortSFPEquip, invSoftkeySerialNo=invSoftkeySerialNo, tcn15minDataChRsNEAddress=tcn15minDataChRsNEAddress, metSysPSVoltageValue=metSysPSVoltageValue, clk2mLosAlarm=clk2mLosAlarm, rmon15minHCTxEthStatsPkts512to1023Octets2=rmon15minHCTxEthStatsPkts512to1023Octets2, rmon1dayTxEthStatsPkts1024to1518Octets=rmon1dayTxEthStatsPkts1024to1518Octets, asFdbPortLearningLimitOver=asFdbPortLearningLimitOver, invCapa100MaxE1Rst=invCapa100MaxE1Rst, aisAlarm=aisAlarm, clusterAlarmInTable=clusterAlarmInTable, provVlanNameTable=provVlanNameTable, rmon15minHCTxQueue7Discard2=rmon15minHCTxQueue7Discard2, rmon15minHCTxQueue2Discard2=rmon15minHCTxQueue2Discard2, invOduFreqInfoTxStopFrequency=invOduFreqInfoTxStopFrequency, apsOnlineStatus=apsOnlineStatus, asFdbEquipmentEntry=asFdbEquipmentEntry, invOduFreqInfoShiftFrequency=invOduFreqInfoShiftFrequency, asRstpPortState=asRstpPortState, rmon15minRxEthStatsPkts128to255OctetsStatusInfo=rmon15minRxEthStatsPkts128to255OctetsStatusInfo, rmon1dayRxEthStatsMulticastPkts2Status=rmon1dayRxEthStatsMulticastPkts2Status, busError=busError, asModemHeaderCompressEntry=asModemHeaderCompressEntry, tcn15minHCRxEthStatsDropEvents=tcn15minHCRxEthStatsDropEvents, asETHPortAdminStatus=asETHPortAdminStatus, tcn1dayDataRf=tcn1dayDataRf, invModemParamInfoIfIndex=invModemParamInfoIfIndex, pmon1dayDataTmRsTable=pmon1dayDataTmRsTable, ctrlGroupEntry=ctrlGroupEntry, rmon1dayHCTxQueue4Discard=rmon1dayHCTxQueue4Discard, asModemHeaderCompressRemoteTable=asModemHeaderCompressRemoteTable, EnableDisableValue=EnableDisableValue, ValidInvalidValue=ValidInvalidValue, asQosPortindex=asQosPortindex, modemCardPsAlarm=modemCardPsAlarm, asEthOamMegCcmFaultEntry=asEthOamMegCcmFaultEntry, modemTypeMismatch=modemTypeMismatch, alarmPmonTcnSummary=alarmPmonTcnSummary, invOduFreqInfoTxPhase=invOduFreqInfoTxPhase, asEthOamMepCcmDbEntry=asEthOamMepCcmDbEntry, pmon1dayDataThroughModeGroup=pmon1dayDataThroughModeGroup)
mibBuilder.exportSymbols("IPE-COMMON-MIB", tcn15minDataTmRsNEAddress=tcn15minDataTmRsNEAddress, lof=lof, msAisAlarm=msAisAlarm, rmon1dayHCRxEthStatsPkts128to255Octets2Status=rmon1dayHCRxEthStatsPkts128to255Octets2Status, asModemTrafficAggrEncapStatus=asModemTrafficAggrEncapStatus, rmon15minHCRxUnknownTPID=rmon15minHCRxUnknownTPID, clkFailedAlarm=clkFailedAlarm, rmon1dayRxEthStatsPkts512to1023Octets=rmon1dayRxEthStatsPkts512to1023Octets, rmon1dayHCRxFilterDiscardStatusInfo=rmon1dayHCRxFilterDiscardStatusInfo, invClk2mCardCodeNo=invClk2mCardCodeNo, alarmSummaryEoamInfoIndex=alarmSummaryEoamInfoIndex, rmon1dayHCRxQoSDiscard=rmon1dayHCRxQoSDiscard, metSysPSVoltageStatus=metSysPSVoltageStatus, tcn1dayDataChRsNEAddress=tcn1dayDataChRsNEAddress, asClkGroup=asClkGroup, rmon1dayHCRxMAClimit2Status=rmon1dayHCRxMAClimit2Status, tcn1dayDataTmDMRRsNEAddress=tcn1dayDataTmDMRRsNEAddress, invCardManufacturedDate=invCardManufacturedDate, invUpdateInfoTable=invUpdateInfoTable, rmon1dayTxEthStatsMulticastPkts=rmon1dayTxEthStatsMulticastPkts, rmon1dayHCTxQueue5Discard=rmon1dayHCTxQueue5Discard, asE1ChEntry=asE1ChEntry, pmon15minData16E1PdhIfIndex=pmon15minData16E1PdhIfIndex, pmon1dayData16E1PdhIfIndex=pmon1dayData16E1PdhIfIndex, rmon1dayTxEthStatsOversizePkts2Status=rmon1dayTxEthStatsOversizePkts2Status, invOduFreqInfoSubBand=invOduFreqInfoSubBand, rmon15minRxEthStatsUndersizePktsStatusInfo=rmon15minRxEthStatsUndersizePktsStatusInfo, tcn1dayData16E1PdhEntry=tcn1dayData16E1PdhEntry, invCapa150MaxE1Rst=invCapa150MaxE1Rst, pmon15minDataChMsIfIndex=pmon15minDataChMsIfIndex, rmon1dayTxEthStatsCollisionsStatusInfo=rmon1dayTxEthStatsCollisionsStatusInfo, hkInputStatusEntry=hkInputStatusEntry, asProtectionGroup=asProtectionGroup, pmon1dayDataChMsValue=pmon1dayDataChMsValue, asEthOamMepCcmMismergeCondition=asEthOamMepCcmMismergeCondition, meteringFanSlotIndex=meteringFanSlotIndex, asModemTrafficAggrVersion=asModemTrafficAggrVersion, rmon1dayPort2NEAddress=rmon1dayPort2NEAddress, provVlanCBridgeEntry=provVlanCBridgeEntry, hpUnequipedAlarm=hpUnequipedAlarm, rmon15minRxEthStatsCRCAlignErrorsStatusInfo=rmon15minRxEthStatsCRCAlignErrorsStatusInfo, maintTotalSummary=maintTotalSummary, rsUasStatus=rsUasStatus, rmon1dayHCRxEthStatsPkts256to511Octets2Status=rmon1dayHCRxEthStatsPkts256to511Octets2Status, tcn1dayHCRxEthStatsUndersizePkts=tcn1dayHCRxEthStatsUndersizePkts, pmon1dayDataChRsStatusInfo=pmon1dayDataChRsStatusInfo, pmon15minDataRadioEntry=pmon15minDataRadioEntry, controlEventOctStr=controlEventOctStr, pmon15minDataChRsIfIndex=pmon15minDataChRsIfIndex, pmonTxRxLev1dayCurrentDataNEAddress=pmonTxRxLev1dayCurrentDataNEAddress, rmon1dayHCRxEthStatsPkts128to255Octets2=rmon1dayHCRxEthStatsPkts128to255Octets2, msRdiAlarm=msRdiAlarm, pmon15minDataTmRsValue=pmon15minDataTmRsValue, alarmSummaryIduSwGrpInfoNEAddress=alarmSummaryIduSwGrpInfoNEAddress, pmonTxRxLev15minCurrentDataEntry=pmonTxRxLev15minCurrentDataEntry, hpPlmAlarm=hpPlmAlarm, oduSwGroupIfIndex=oduSwGroupIfIndex, rmon15minHCRxUnknownVID2=rmon15minHCRxUnknownVID2, rmon1dayHCTxQueue1Discard2=rmon1dayHCTxQueue1Discard2, asConfigStatus=asConfigStatus, rmon1dayRxEthStatsMulticastPkts=rmon1dayRxEthStatsMulticastPkts, rmon1dayHCRxFrame=rmon1dayHCRxFrame, rmon1dayHCTxQueue1Discard2Status=rmon1dayHCTxQueue1Discard2Status, tcn15minDataRmonGroup=tcn15minDataRmonGroup, txPowerAlarm=txPowerAlarm, rmon15minHCTxQueue0Discard2=rmon15minHCTxQueue0Discard2, radioEquipment=radioEquipment, asModemHeaderCompressRemoteIfIndex=asModemHeaderCompressRemoteIfIndex, asModemHeaderCompressRemoteNEAddress=asModemHeaderCompressRemoteNEAddress, ipeTrapStatusGroup=ipeTrapStatusGroup, alarmOduEachSummary=alarmOduEachSummary, rmon15minHCTxEthStatsPkts2Status=rmon15minHCTxEthStatsPkts2Status, invOduProvRangeHysteresisPermit=invOduProvRangeHysteresisPermit, invSoftkeyInfoIndex=invSoftkeyInfoIndex, tcn15minDataRf=tcn15minDataRf, asFdbPortLearningCount=asFdbPortLearningCount, provDot1qPortVlanList=provDot1qPortVlanList, asStm1CardNEAddress=asStm1CardNEAddress, alarmSummaryIduSwGrpInfoIndex=alarmSummaryIduSwGrpInfoIndex, tcn15minDataChMsNEAddress=tcn15minDataChMsNEAddress, invChassisCodeNo=invChassisCodeNo, rmon15minHCRxEthStatsPkts2=rmon15minHCRxEthStatsPkts2, pmon15minDataChMsEntry=pmon15minDataChMsEntry, summaryGroup=summaryGroup, asETHCardGroup=asETHCardGroup, provDot1adPortVlanEntry=provDot1adPortVlanEntry, rmon15minHCRxEthStatsOctetsStatusInfo=rmon15minHCRxEthStatsOctetsStatusInfo, alarmSummaryIduSwGrpInfoEntry=alarmSummaryIduSwGrpInfoEntry, provVlanCBridgeSVlanIndex=provVlanCBridgeSVlanIndex, provVlanCBridgePortType=provVlanCBridgePortType, eventIndex=eventIndex, clusterAlarmInEntry=clusterAlarmInEntry, rmon15minHCTxQueue1DiscardStatusInfo=rmon15minHCTxQueue1DiscardStatusInfo, rmon1dayHCRxEthStatsOctets=rmon1dayHCRxEthStatsOctets, tcn15minHCTxEthStatsCollisions=tcn15minHCTxEthStatsCollisions, invOduFreqInfoRxStartFrequency=invOduFreqInfoRxStartFrequency, ipeTrapFileDownloadValueVars=ipeTrapFileDownloadValueVars, rmon15minHCTxQueue1Discard2=rmon15minHCTxQueue1Discard2, clusterAlarmOutEntry=clusterAlarmOutEntry, invChassisName=invChassisName, pmon1dayDataRfValue=pmon1dayDataRfValue, e1AisGenStatus=e1AisGenStatus, eventNEAddress=eventNEAddress, asEthOamAisMepIndex=asEthOamAisMepIndex, rmon15minIfIndex=rmon15minIfIndex, e1LosAlarm=e1LosAlarm, asModemTrafficAggrIfIndex=asModemTrafficAggrIfIndex, eventStatusValueUnsigned32=eventStatusValueUnsigned32, IpeStatsInfo=IpeStatsInfo, rmon1dayRxEthStatsDropEvents2Status=rmon1dayRxEthStatsDropEvents2Status, invFPGAInfoIndex=invFPGAInfoIndex, asCommonNEAddress=asCommonNEAddress, invOduFreqInfoRxStopFrequency=invOduFreqInfoRxStopFrequency, modemGroupNEAddress=modemGroupNEAddress, tcn1dayDataTmDMRRsMonitorName=tcn1dayDataTmDMRRsMonitorName, rmon1dayHCRxQoSDiscardFrameStatusInfo=rmon1dayHCRxQoSDiscardFrameStatusInfo, xIFLevelAlarm=xIFLevelAlarm, rmon15minHCRxEthStatsPkts512to1023Octets2=rmon15minHCRxEthStatsPkts512to1023Octets2, asModemHeaderCompressIfIndex=asModemHeaderCompressIfIndex, metSysRxLevelValue=metSysRxLevelValue, pmon15minDataTmRsEntry=pmon15minDataTmRsEntry, rmon1dayHCTxQueue3DiscardStatusInfo=rmon1dayHCTxQueue3DiscardStatusInfo, modemCardOnlineStatus=modemCardOnlineStatus, pmon1dayDataModemStatusInfo=pmon1dayDataModemStatusInfo, eventStatusValueOctStr=eventStatusValueOctStr, asETHPortFlowControl=asETHPortFlowControl, rmon15minRxEthStatsOversizePkts2=rmon15minRxEthStatsOversizePkts2, rmon1dayRxEthStatsPkts256to511OctetsStatusInfo=rmon1dayRxEthStatsPkts256to511OctetsStatusInfo, txModulation=txModulation, alarmOduSummary=alarmOduSummary, rmon15minTxEthStatsOversizePkts=rmon15minTxEthStatsOversizePkts, rmon15minPortGroup=rmon15minPortGroup, rmon1dayRxEthStatsPkts512to1023OctetsStatusInfo=rmon1dayRxEthStatsPkts512to1023OctetsStatusInfo, rmon15minHCTxEthStatsPkts256to511Octets2Status=rmon15minHCTxEthStatsPkts256to511Octets2Status, asEthOamMepCcmFaultEntry=asEthOamMepCcmFaultEntry, rmon1dayRxEthStatsFragments=rmon1dayRxEthStatsFragments, asEthOamMepCcmDbPeerMepId=asEthOamMepCcmDbPeerMepId, rmon1dayRxEthStatsDropEvents=rmon1dayRxEthStatsDropEvents, invModuleInfoOduEntry=invModuleInfoOduEntry, tcn1dayDataChRsIfIndex=tcn1dayDataChRsIfIndex, rmon1dayRxEthStatsDropEventsStatusInfo=rmon1dayRxEthStatsDropEventsStatusInfo, rmon1dayHCTxEthStatsPkts64Octets2=rmon1dayHCTxEthStatsPkts64Octets2, rmon1dayHCRxEthStatsPkts256to511Octets2=rmon1dayHCRxEthStatsPkts256to511Octets2, tcn15minDataRmonTable=tcn15minDataRmonTable, sncpGroupIndex=sncpGroupIndex, asModemHeaderCompressTable=asModemHeaderCompressTable, asETHPortInterfaceType=asETHPortInterfaceType, rmon1dayRxEthStatsDropEvents2=rmon1dayRxEthStatsDropEvents2, pmonTxRxLev1dayCurrentDataEntry=pmonTxRxLev1dayCurrentDataEntry, rmon1dayTxEthStatsPkts64Octets=rmon1dayTxEthStatsPkts64Octets, asCommonEntry=asCommonEntry, rmon1dayHCTxQueue6Discard2Status=rmon1dayHCTxQueue6Discard2Status, rmon15minVlanPortMappingTable=rmon15minVlanPortMappingTable, rmon1dayRxEthStatsOversizePkts2=rmon1dayRxEthStatsOversizePkts2, asStm1ChIfIndex=asStm1ChIfIndex, tcn15minData16E1PdhTable=tcn15minData16E1PdhTable, pmon1dayDataChMsIfIndex=pmon1dayDataChMsIfIndex, asRstpPortEntry=asRstpPortEntry, tcn1dayDataRadioNEAddress=tcn1dayDataRadioNEAddress, rmon15minRxEthStatsPkts65to127Octets=rmon15minRxEthStatsPkts65to127Octets, invOduFreqInfoSupportedIpe=invOduFreqInfoSupportedIpe, asFdbPortNEAddress=asFdbPortNEAddress, rmon15minHCRxEthStatsPkts65to127Octets2=rmon15minHCRxEthStatsPkts65to127Octets2, rmon15minTxEthStatsPkts128to255OctetsStatusInfo=rmon15minTxEthStatsPkts128to255OctetsStatusInfo, asStm1ChTable=asStm1ChTable, rmon1dayRxEthStatsMulticastPkts2=rmon1dayRxEthStatsMulticastPkts2, rmon1dayHCTxQueue2Discard=rmon1dayHCTxQueue2Discard, tcn1dayDataTmDMRRsEntry=tcn1dayDataTmDMRRsEntry, meteringFanSpeed1Status=meteringFanSpeed1Status, hkOutputStatusValue=hkOutputStatusValue, e1ComFailAlarm=e1ComFailAlarm, asETHPortGroup=asETHPortGroup, rmon15minHCTxQueue3Discard=rmon15minHCTxQueue3Discard, invChassisHardVersion=invChassisHardVersion, tcn1dayHCTxEthStatsCollisions=tcn1dayHCTxEthStatsCollisions, controlEvent=controlEvent, clkRefTable=clkRefTable, tcn15minRmonIfIndex=tcn15minRmonIfIndex, provVlanCustomerVlanIndex=provVlanCustomerVlanIndex, invSfpSupportedLinkLength=invSfpSupportedLinkLength, loRefAlarm=loRefAlarm, rmon15minHCTxQueue3Discard2=rmon15minHCTxQueue3Discard2, rmon15minHCRxQoSDiscardFrame=rmon15minHCRxQoSDiscardFrame, txSWLockInStatus=txSWLockInStatus, psGroupTable=psGroupTable, asRstpBridgeIndex=asRstpBridgeIndex, extClkGroupTable=extClkGroupTable, rmon15minHCTxEthStatsPkts65to127Octets2=rmon15minHCTxEthStatsPkts65to127Octets2, rmon1dayHCTxQueue4Discard2Status=rmon1dayHCTxQueue4Discard2Status, ipeTrapCommonAdditionalVars=ipeTrapCommonAdditionalVars, eventTypeNEAddress=eventTypeNEAddress, clusterAlarmOutTable=clusterAlarmOutTable, invMainCodeNo=invMainCodeNo, stm1TypeMismatch=stm1TypeMismatch, metSysRxLevelStatus=metSysRxLevelStatus, tcn1dayRxLevIfIndex=tcn1dayRxLevIfIndex, rmon15minHCTxEthStatsPkts2=rmon15minHCTxEthStatsPkts2, currentTimingSource=currentTimingSource, clusterAlarmOutStatus=clusterAlarmOutStatus, invOduFreqInfoSubBand5=invOduFreqInfoSubBand5, rmon1dayTxEthStatsPkts128to255OctetsStatusInfo=rmon1dayTxEthStatsPkts128to255OctetsStatusInfo, asModemTrafficAggrModeMismatch=asModemTrafficAggrModeMismatch, provDot1adPortVlanPortType=provDot1adPortVlanPortType, rmon1dayPortTable=rmon1dayPortTable, asETHPortEntry=asETHPortEntry, invMainInfoTable=invMainInfoTable, rmon1dayHCRxEthStatsPkts2Status=rmon1dayHCRxEthStatsPkts2Status, rmon15minVlanCounterNEAddress=rmon15minVlanCounterNEAddress, provVlanEquipmentIndex=provVlanEquipmentIndex, rmon1dayTxEthStatsMulticastPkts2=rmon1dayTxEthStatsMulticastPkts2, meteringIfIndex=meteringIfIndex, rmon15minHCTxQueue2Discard2Status=rmon15minHCTxQueue2Discard2Status, tcn15minDataThroughModeGroup=tcn15minDataThroughModeGroup, invCardFirmVersionUncurrent=invCardFirmVersionUncurrent, rmon1dayPort2Table=rmon1dayPort2Table, invClk2mCardManufacturedDate=invClk2mCardManufacturedDate, provVlanEquipmentDefaultVid=provVlanEquipmentDefaultVid, pmon15minDataTmDMRRsEntry=pmon15minDataTmDMRRsEntry, maintenance=maintenance, pmon15minDataChMsTable=pmon15minDataChMsTable, eventTypeElemId=eventTypeElemId, asE1CardTable=asE1CardTable, invClk2mInfoIndex=invClk2mInfoIndex, tcn15minDataRadioTable=tcn15minDataRadioTable, necProductDepend=necProductDepend, asLlfGroupEntry=asLlfGroupEntry, provisioningGroup=provisioningGroup, tcn15minDataTmDMRRsIfIndex=tcn15minDataTmDMRRsIfIndex, invCapa300MaxE1Rst=invCapa300MaxE1Rst, fileUpdateEvent=fileUpdateEvent, asSyncETHIfIndex=asSyncETHIfIndex, pmonGroup=pmonGroup, auxUnequipped=auxUnequipped, asStm1ChPortTable=asStm1ChPortTable, tcn15minDataChannelizedModeGroup=tcn15minDataChannelizedModeGroup, invOduProvRangeMTPCMax=invOduProvRangeMTPCMax, asSyncETHNEAddress=asSyncETHNEAddress, rmon15minHCTxQueue6Discard2Status=rmon15minHCTxQueue6Discard2Status, hkInputAlarm=hkInputAlarm, provVlanServiceEntry=provVlanServiceEntry, asQosEntry=asQosEntry, portTypeMismatchAlarm=portTypeMismatchAlarm, iduCommonEntry=iduCommonEntry, usbFailure=usbFailure, modemXpicIfIndex=modemXpicIfIndex, asModemHeaderCompressMismatch=asModemHeaderCompressMismatch, eventUpdateStatus=eventUpdateStatus, ReportNotreportValue=ReportNotreportValue, rmon1dayHCTxEthStatsPkts2=rmon1dayHCTxEthStatsPkts2, rmon1dayHCRxEthStatsPkts64Octets2=rmon1dayHCRxEthStatsPkts64Octets2, rmon15minTxEthStatsMulticastPkts2Status=rmon15minTxEthStatsMulticastPkts2Status, ipeTrapControlValueVars=ipeTrapControlValueVars, asE1CardNEAddress=asE1CardNEAddress, pmonTxRxLev1dayCurrentDataStatusInfo=pmonTxRxLev1dayCurrentDataStatusInfo)
mibBuilder.exportSymbols("IPE-COMMON-MIB", rmon15minHCTxQueue7DiscardStatusInfo=rmon15minHCTxQueue7DiscardStatusInfo, slpAisGenStatus=slpAisGenStatus, invCapa200MaxE1Rst=invCapa200MaxE1Rst, asLlfReceiveInfoGroupIndex=asLlfReceiveInfoGroupIndex, pmon1dayDataTmDMRRsStatusInfo=pmon1dayDataTmDMRRsStatusInfo, pmon1dayDataTmRsEntry=pmon1dayDataTmRsEntry, tcn1dayRxLevNEAddress=tcn1dayRxLevNEAddress, asSyncETHPortCLKSts=asSyncETHPortCLKSts, oduSwGroupEntry=oduSwGroupEntry, rmon1dayRxEthStatsPkts128to255Octets=rmon1dayRxEthStatsPkts128to255Octets, asFdbEquipmentLearningCount=asFdbEquipmentLearningCount, tcn1dayDataChMs=tcn1dayDataChMs, rmon1dayVlanCounterId=rmon1dayVlanCounterId, IpeVlanIndex=IpeVlanIndex, rmon15minHCTxEthStatsPkts512to1023Octets2Status=rmon15minHCTxEthStatsPkts512to1023Octets2Status, rmon15minHCRxEthStatsPkts64Octets2Status=rmon15minHCRxEthStatsPkts64Octets2Status, asPsGroup=asPsGroup, rmon15minHCRxFilterDiscardStatusInfo=rmon15minHCRxFilterDiscardStatusInfo, rmon1dayHCRxQoSDiscard2Status=rmon1dayHCRxQoSDiscard2Status, alarmIduSwGrpSummary=alarmIduSwGrpSummary, asStm1PortNEAddress=asStm1PortNEAddress, pmonTxRxLev15minCurrentDataIfIndex=pmonTxRxLev15minCurrentDataIfIndex, rmon1dayHCRxUnknownTPID=rmon1dayHCRxUnknownTPID, ifCableShortAlarm=ifCableShortAlarm, ipeTrapAlarmVars=ipeTrapAlarmVars, tcn1dayDataModemIfIndex=tcn1dayDataModemIfIndex, invModuleInfoOduTable=invModuleInfoOduTable, iduCommonIndex=iduCommonIndex, rmon1dayHCTxQueue4DiscardStatusInfo=rmon1dayHCTxQueue4DiscardStatusInfo, rmon15minHCRxMAClimit=rmon15minHCRxMAClimit, pmon15minDataRadioNEAddress=pmon15minDataRadioNEAddress, rmon15minRxEthStatsBroadcastPkts2Status=rmon15minRxEthStatsBroadcastPkts2Status, eventCounter=eventCounter, IpeVlanIndexOrZero=IpeVlanIndexOrZero, rmon1dayHCTxQueue2Discard2=rmon1dayHCTxQueue2Discard2, rmon1dayHCTxEthStatsPkts512to1023Octets2Status=rmon1dayHCTxEthStatsPkts512to1023Octets2Status, rmon15minTxEthStatsPkts65to127OctetsStatusInfo=rmon15minTxEthStatsPkts65to127OctetsStatusInfo, pmon15minDataChRsNEAddress=pmon15minDataChRsNEAddress, ipeStatusTrapItemVar=ipeStatusTrapItemVar, rmon1dayRxEthStatsCRCAlignErrorsStatusInfo=rmon1dayRxEthStatsCRCAlignErrorsStatusInfo, rmon15minHCTxEthStatsOctetsStatusInfo=rmon15minHCTxEthStatsOctetsStatusInfo, hpRdiAlarm=hpRdiAlarm, UsedNotusedValue=UsedNotusedValue, eventTypeSourceCategory=eventTypeSourceCategory, asETHCardNEAddress=asETHCardNEAddress, rmon1dayRxEthStatsPkts256to511Octets=rmon1dayRxEthStatsPkts256to511Octets, maintSummaryCommonInfoIndex=maintSummaryCommonInfoIndex, alarmCtrlSummary=alarmCtrlSummary, asStm1ChPortIfIndex=asStm1ChPortIfIndex, eventControlValue=eventControlValue, asClk2mType=asClk2mType, OffOnValue=OffOnValue, unlocked=unlocked, rmon1dayRxEthStatsPkts1024to1518OctetsStatusInfo=rmon1dayRxEthStatsPkts1024to1518OctetsStatusInfo, tcn1dayDataModemMonitorName=tcn1dayDataModemMonitorName, rmon15minHCRxUnknownVID2Status=rmon15minHCRxUnknownVID2Status, rmon15minRxEthStatsDropEvents2Status=rmon15minRxEthStatsDropEvents2Status, eventSeverity=eventSeverity, invOduCardManufacturedDate=invOduCardManufacturedDate, tcn1dayData16E1PdhNEAddress=tcn1dayData16E1PdhNEAddress, txSWStatus=txSWStatus, oduTypeMismatch=oduTypeMismatch, invOduProvRangeATPCMax=invOduProvRangeATPCMax, rmon15minRxEthStatsJabbersStatusInfo=rmon15minRxEthStatsJabbersStatusInfo, rmon1dayRxEthStatsJabbers=rmon1dayRxEthStatsJabbers, tcn1dayDataTmRsNEAddress=tcn1dayDataTmRsNEAddress, rmon15minHCRxEthStatsPkts128to255Octets2=rmon15minHCRxEthStatsPkts128to255Octets2, asEthOamMepCcmDbRdiReceived=asEthOamMepCcmDbRdiReceived, modemBusErrorTx=modemBusErrorTx, pmon1dayDataRadioNEAddress=pmon1dayDataRadioNEAddress, rmon1dayHCTxQueue6DiscardStatusInfo=rmon1dayHCTxQueue6DiscardStatusInfo, rmon15minHCRxFilterDiscard=rmon15minHCRxFilterDiscard, asLlfGroupTimeout=asLlfGroupTimeout, invClk2mInfoTable=invClk2mInfoTable, alarmSummaryIduSlotInfoTable=alarmSummaryIduSlotInfoTable, invMainInfoEntry=invMainInfoEntry, pmon1dayData16E1PdhTable=pmon1dayData16E1PdhTable, rmon15minHCRxQoSDiscard2Status=rmon15minHCRxQoSDiscard2Status, e1BusErrorTx=e1BusErrorTx, pmonTxRxLev1dayCurrentDataTable=pmonTxRxLev1dayCurrentDataTable, asFdbVlanLearningCount=asFdbVlanLearningCount, controlEventDspStr=controlEventDspStr, tcn1dayDataCableGroup=tcn1dayDataCableGroup, tcn1dayDataTmDMRRs=tcn1dayDataTmDMRRs, invUpdateInfoEntry=invUpdateInfoEntry, higherOrderPathTraceReceivedValue=higherOrderPathTraceReceivedValue, pmon15minDataChMsMonitorName=pmon15minDataChMsMonitorName, provVlanCBridgeNEAddress=provVlanCBridgeNEAddress, rmon15minTxEthStatsPkts256to511OctetsStatusInfo=rmon15minTxEthStatsPkts256to511OctetsStatusInfo, asEthOamAisTable=asEthOamAisTable, asEthOamAisPeriod=asEthOamAisPeriod, invCapa50MaxE1Rst=invCapa50MaxE1Rst, rmon15minHCRxEthStatsPkts256to511Octets2Status=rmon15minHCRxEthStatsPkts256to511Octets2Status, rmon15minVlanPortMappingIfIndex=rmon15minVlanPortMappingIfIndex, rmon15minPort2Entry=rmon15minPort2Entry, rmon15minRxEthStatsPkts512to1023OctetsStatusInfo=rmon15minRxEthStatsPkts512to1023OctetsStatusInfo, asEthOamMegCcmMismergeCondition=asEthOamMegCcmMismergeCondition, tcn15minDataCableGroup=tcn15minDataCableGroup, pmon1dayDataTmRsNEAddress=pmon1dayDataTmRsNEAddress, pmon15minDataModemIfIndex=pmon15minDataModemIfIndex, asEthOamAisCondition=asEthOamAisCondition, rmon1dayTxEthStatsCollisions=rmon1dayTxEthStatsCollisions, rmon15minHCTxQueue6Discard2=rmon15minHCTxQueue6Discard2, eventRecordAccessType=eventRecordAccessType, modemAlarm=modemAlarm, tfAlarm=tfAlarm, hkInputStatusNEAddress=hkInputStatusNEAddress, rmon1dayNEAddress=rmon1dayNEAddress, fanGroupEntry=fanGroupEntry, invSfpVendorVer=invSfpVendorVer, invSfpVendorPn=invSfpVendorPn, invMainFirmVersion=invMainFirmVersion, rmon1dayHCRxEthStatsPkts512to1023Octets2=rmon1dayHCRxEthStatsPkts512to1023Octets2, ipeTrapTotalCounterNEAddress=ipeTrapTotalCounterNEAddress, rmon1dayHCRxEthStatsPkts65to127Octets2Status=rmon1dayHCRxEthStatsPkts65to127Octets2Status, alarmSummaryCtrlInfoTable=alarmSummaryCtrlInfoTable, pmon1dayDataModemMonitorName=pmon1dayDataModemMonitorName, rmon15minHCRxUnknownTPID2Status=rmon15minHCRxUnknownTPID2Status, asOduGroup=asOduGroup, rmon15minRxEthStatsCRCAlignErrors2=rmon15minRxEthStatsCRCAlignErrors2, tcn1dayHCRxEthStatsFragments=tcn1dayHCRxEthStatsFragments, rmon15minHCRxEthStatsPkts1024to1518Octets2Status=rmon15minHCRxEthStatsPkts1024to1518Octets2Status, statusChangeDspStr=statusChangeDspStr, asE1Group=asE1Group, tcn15minRmonNEAddress=tcn15minRmonNEAddress, provVlanEquipmentEntry=provVlanEquipmentEntry, tcn15minRxLevNEAddress=tcn15minRxLevNEAddress, auxBusErrorRx=auxBusErrorRx, invCardInfoNEAddress=invCardInfoNEAddress, meteringFanSpeed3Status=meteringFanSpeed3Status, asModemHeaderCompressRemoteEntry=asModemHeaderCompressRemoteEntry, invCardHardVersion=invCardHardVersion, invOduFreqInfoFrequencyStep=invOduFreqInfoFrequencyStep, rmon1dayRxEthStatsFragments2Status=rmon1dayRxEthStatsFragments2Status, tcn1dayRxLev=tcn1dayRxLev, lpPlmAlarm=lpPlmAlarm, asETHPortLinkStatus=asETHPortLinkStatus, rmon1dayTxEthStatsBroadcastPkts2Status=rmon1dayTxEthStatsBroadcastPkts2Status, invMacAddressInfoIfIndex=invMacAddressInfoIfIndex, asEthOamAisGroup=asEthOamAisGroup, clkDriftAlarm=clkDriftAlarm, asRstpPortDesignatedPort=asRstpPortDesignatedPort, asModemTransparentClockModeMismatch=asModemTransparentClockModeMismatch, rmon1dayRxEthStatsPkts65to127Octets=rmon1dayRxEthStatsPkts65to127Octets, pmon15minDataTmRsIfIndex=pmon15minDataTmRsIfIndex, invCardName=invCardName, alarmSummaryRmonTcnInfoTable=alarmSummaryRmonTcnInfoTable, pmon1dayDataRadioEntry=pmon1dayDataRadioEntry, ctrlTempAlarm=ctrlTempAlarm, tcn15minDataTmRsMonitorName=tcn15minDataTmRsMonitorName, asETHPortLlfOamReceived=asETHPortLlfOamReceived, asStm1ApsNEAddress=asStm1ApsNEAddress, provDot1adPortVlanTable=provDot1adPortVlanTable, rmon1dayVlanPortMappingEntry=rmon1dayVlanPortMappingEntry, ethBusErrorRx=ethBusErrorRx, clusterAlarmInNEAddress=clusterAlarmInNEAddress, alarmSummaryIduSwGrpInfoTable=alarmSummaryIduSwGrpInfoTable, asRstpGroup=asRstpGroup, rmon15minVlanMappingNEAddress=rmon15minVlanMappingNEAddress, asCtrlGroup=asCtrlGroup, rmon1dayHCTxFrameStatusInfo=rmon1dayHCTxFrameStatusInfo, pmon1dayDataChRsMonitorName=pmon1dayDataChRsMonitorName, provVlanCBridgeRowStatus=provVlanCBridgeRowStatus, rmon1dayHCTxEthStatsPkts65to127Octets2Status=rmon1dayHCTxEthStatsPkts65to127Octets2Status, rmon1dayRxEthStatsPkts65to127OctetsStatusInfo=rmon1dayRxEthStatsPkts65to127OctetsStatusInfo, asFdbGroup=asFdbGroup, eventResourceID=eventResourceID, asEthOamMepCcmFaultNEAddress=asEthOamMepCcmFaultNEAddress, rmon15minHCTxQueue5DiscardStatusInfo=rmon15minHCTxQueue5DiscardStatusInfo, rmon1dayHCRxMAClimit2=rmon1dayHCRxMAClimit2, pmon1dayData16E1PdhStatusInfo=pmon1dayData16E1PdhStatusInfo, rmon1dayRxEthStatsJabbers2=rmon1dayRxEthStatsJabbers2, modemComFailAlarm=modemComFailAlarm, clusterAlarmOutNEAddress=clusterAlarmOutNEAddress, rmon1dayRxEthStatsPkts64OctetsStatusInfo=rmon1dayRxEthStatsPkts64OctetsStatusInfo, refLockoutStatus=refLockoutStatus, rmon15minHCTxQueue1Discard2Status=rmon15minHCTxQueue1Discard2Status, rmon1dayHCTxQueue5Discard2Status=rmon1dayHCTxQueue5Discard2Status, pmonTxRxLev15minRxLevelMaxCurrentData=pmonTxRxLev15minRxLevelMaxCurrentData, tcn1dayRxLevEntry=tcn1dayRxLevEntry, rmon1dayRxEthStatsMulticastPktsStatusInfo=rmon1dayRxEthStatsMulticastPktsStatusInfo, asEthOamMepCcmRdiReceived=asEthOamMepCcmRdiReceived, alarmRmonTcnSummary=alarmRmonTcnSummary, asEthOamMepCcmFaultTable=asEthOamMepCcmFaultTable, tcn15minDataTmRsTable=tcn15minDataTmRsTable, lowerOrderPathTraceReceivedValue=lowerOrderPathTraceReceivedValue, tcn15minRxLev=tcn15minRxLev, rmon15minRxEthStatsPkts65to127OctetsStatusInfo=rmon15minRxEthStatsPkts65to127OctetsStatusInfo, rmon15minRxEthStatsMulticastPktsStatusInfo=rmon15minRxEthStatsMulticastPktsStatusInfo, rmon1dayHCRxUnknownTPIDStatusInfo=rmon1dayHCRxUnknownTPIDStatusInfo, provDot1qPortAccessVid=provDot1qPortAccessVid, asFdbPortEntry=asFdbPortEntry, sncpProtectionStatusCh1=sncpProtectionStatusCh1, asStm1ApsIfIndex=asStm1ApsIfIndex, rmon15minRxEthStatsOversizePktsStatusInfo=rmon15minRxEthStatsOversizePktsStatusInfo, asRstpBridgeTable=asRstpBridgeTable, rmon15minHCRxEthStatsOctets2Status=rmon15minHCRxEthStatsOctets2Status, invOduFreqInfoTxRxIndependence=invOduFreqInfoTxRxIndependence, tcn15minDataChMsMonitorName=tcn15minDataChMsMonitorName, rmon15minRxEthStatsOversizePkts=rmon15minRxEthStatsOversizePkts, tcn1dayData16E1Group=tcn1dayData16E1Group, rmon15minRxEthStatsMulticastPkts2=rmon15minRxEthStatsMulticastPkts2, pmonTxRxLev15minCurrentDataStatusInfo=pmonTxRxLev15minCurrentDataStatusInfo, alarmSummaryPmonTcnInfoIndex=alarmSummaryPmonTcnInfoIndex, asLicenseGroup=asLicenseGroup, provVlanServiceVlanIndex=provVlanServiceVlanIndex, rmon1dayRxEthStatsPkts128to255OctetsStatusInfo=rmon1dayRxEthStatsPkts128to255OctetsStatusInfo, alarmSummaryGroup=alarmSummaryGroup, asStm1ChNEAddress=asStm1ChNEAddress, pmon15minDataTmDMRRsNEAddress=pmon15minDataTmDMRRsNEAddress, asModemTrafficAggrNEAddress=asModemTrafficAggrNEAddress, pmon15minDataTmRsMonitorName=pmon15minDataTmRsMonitorName, provVlanCustomerRowstatus=provVlanCustomerRowstatus, tcn1dayData16E1Pdh=tcn1dayData16E1Pdh, tcn1dayData16E1PdhTable=tcn1dayData16E1PdhTable, rmon15minHCTxEthStatsPkts128to255Octets2Status=rmon15minHCTxEthStatsPkts128to255Octets2Status, invOduCardFirmCurrentVersion=invOduCardFirmCurrentVersion, timingSourceControlStatus=timingSourceControlStatus, pmon15minDataChRsStatusInfo=pmon15minDataChRsStatusInfo, tcn1dayDataTmRsTable=tcn1dayDataTmRsTable, clusterAlarmInStatus=clusterAlarmInStatus, lpUnequipedAlarm=lpUnequipedAlarm, rmon15minTxEthStatsPktsStatusInfo=rmon15minTxEthStatsPktsStatusInfo, rmon15minHCRxQoSDiscardStatusInfo=rmon15minHCRxQoSDiscardStatusInfo, ipeFileDownloadTrapItemVar=ipeFileDownloadTrapItemVar, provVlanEquipmentDefaultTpid=provVlanEquipmentDefaultTpid, alarmPmonTcnSlotSummary=alarmPmonTcnSlotSummary, auxBusErrorTx=auxBusErrorTx, psGroupIndex=psGroupIndex, ethBusErrorTx=ethBusErrorTx, invChassisInfoNEAddress=invChassisInfoNEAddress, asE1CardEntry=asE1CardEntry, asETHPortIfIndex=asETHPortIfIndex, ipeTrapItemVar=ipeTrapItemVar, sncpGroupEntry=sncpGroupEntry, asQosTable=asQosTable, asEthOamMepCcmDbMepIndex=asEthOamMepCcmDbMepIndex, rmon15minRxEthStatsPkts1024to1518OctetsStatusInfo=rmon15minRxEthStatsPkts1024to1518OctetsStatusInfo, tcn1dayDataTmRsEntry=tcn1dayDataTmRsEntry, e1Alarm=e1Alarm, rmon1dayTxEthStatsBroadcastPktsStatusInfo=rmon1dayTxEthStatsBroadcastPktsStatusInfo, ipeTrapTotalCounter=ipeTrapTotalCounter, invUpdateInfoIndex=invUpdateInfoIndex, auxGroupIndex=auxGroupIndex, rmon1dayRxEthStatsJabbers2Status=rmon1dayRxEthStatsJabbers2Status, asEthOamMepCcmDbTable=asEthOamMepCcmDbTable, auxGroupTable=auxGroupTable, tcn1dayDataRadioGroup=tcn1dayDataRadioGroup, invOduCardFirmUncurrentVersion=invOduCardFirmUncurrentVersion, eventProbableCause=eventProbableCause, extClkOutputStatus=extClkOutputStatus, rmon1dayRxEthStatsUndersizePktsStatusInfo=rmon1dayRxEthStatsUndersizePktsStatusInfo, tcn15minDataChRsTable=tcn15minDataChRsTable, rmon1dayHCRxFrameStatusInfo=rmon1dayHCRxFrameStatusInfo)
mibBuilder.exportSymbols("IPE-COMMON-MIB", invMacAddress=invMacAddress, pmon15minDataChMsNEAddress=pmon15minDataChMsNEAddress, rmon1dayHCRxEthStatsPkts512to1023Octets2Status=rmon1dayHCRxEthStatsPkts512to1023Octets2Status, pmon1dayDataChMsTable=pmon1dayDataChMsTable, rmon1dayHCTxQueue7Discard2Status=rmon1dayHCTxQueue7Discard2Status, clkRefFailedAlarm=clkRefFailedAlarm, rmon1dayHCTxEthStatsPkts128to255Octets2=rmon1dayHCTxEthStatsPkts128to255Octets2, eventUpdateDetail=eventUpdateDetail, invOduFreqInfoSubBand6=invOduFreqInfoSubBand6, portRemovedAlarm=portRemovedAlarm, meteringFanNEAddress=meteringFanNEAddress, invSfpVendorSn=invSfpVendorSn, e1Unequipped=e1Unequipped, pmon1dayData16E1PdhMonitorName=pmon1dayData16E1PdhMonitorName, eventAlarmType=eventAlarmType, rmon15minHCTxEthStatsPkts64Octets2Status=rmon15minHCTxEthStatsPkts64Octets2Status, rmon1dayRxEthStatsBroadcastPkts=rmon1dayRxEthStatsBroadcastPkts, asModemHeaderCompressVersion=asModemHeaderCompressVersion, ctrlTemperature=ctrlTemperature, invOduFreqInfoSubBand9=invOduFreqInfoSubBand9, sdhAisGenStatus=sdhAisGenStatus, rmon1dayHCTxEthStatsPkts128to255Octets2Status=rmon1dayHCTxEthStatsPkts128to255Octets2Status, modemUnequipped=modemUnequipped, rmon1dayRxEthStatsJabbersStatusInfo=rmon1dayRxEthStatsJabbersStatusInfo, rmon15minTxEthStatsBroadcastPkts2=rmon15minTxEthStatsBroadcastPkts2, asLicenseAlarmTable=asLicenseAlarmTable, invCardFirmVersion=invCardFirmVersion, eventTypeRowStatus=eventTypeRowStatus, ethAlarm=ethAlarm, asLlfGroup=asLlfGroup, rdiAlarm=rdiAlarm, invMacAddressInfoTable=invMacAddressInfoTable, rmon1dayHCTxEthStatsOctets=rmon1dayHCTxEthStatsOctets, rmon1dayRxEthStatsUndersizePkts2=rmon1dayRxEthStatsUndersizePkts2, rmon1dayHCRxMAClimit=rmon1dayHCRxMAClimit, asModemHeaderCompressRemoteVlanMode=asModemHeaderCompressRemoteVlanMode, tcn1dayDataTmRsIfIndex=tcn1dayDataTmRsIfIndex, tcn15minDataRadioEntry=tcn15minDataRadioEntry, asSyncETHGroup=asSyncETHGroup, invCardInfoIndex=invCardInfoIndex, rmon1dayHCTxQueue3Discard2Status=rmon1dayHCTxQueue3Discard2Status, rmon15minTxEthStatsBroadcastPktsStatusInfo=rmon15minTxEthStatsBroadcastPktsStatusInfo, ctrlAlarm=ctrlAlarm, tcn15minHCRxEthStatsFragments=tcn15minHCRxEthStatsFragments, alsStatus=alsStatus, psGroupNEAddress=psGroupNEAddress, oduGroupTable=oduGroupTable, invSfpSupportedWavelength=invSfpSupportedWavelength, rmon15minRxEthStatsDropEvents2=rmon15minRxEthStatsDropEvents2, provVlanCustomerNEAddress=provVlanCustomerNEAddress, invCapa10MaxE1Rst=invCapa10MaxE1Rst, chUsageAlarm=chUsageAlarm, asModemGroup=asModemGroup, rmon1dayHCRxMAClimitStatusInfo=rmon1dayHCRxMAClimitStatusInfo, asRstpBridgeTopChanges=asRstpBridgeTopChanges, rmon15minHCRxMAClimit2=rmon15minHCRxMAClimit2, pmon1dayDataTmDMRRsValue=pmon1dayDataTmDMRRsValue, rmon1dayHCRxUnknownTPID2Status=rmon1dayHCRxUnknownTPID2Status, atpcPowerMode=atpcPowerMode, alarmRmonTcnSlotSummary=alarmRmonTcnSlotSummary, alarmStateChange=alarmStateChange, rmon15minRxEthStatsPkts1024to1518Octets=rmon15minRxEthStatsPkts1024to1518Octets, rmon1dayRxEthStatsBroadcastPktsStatusInfo=rmon1dayRxEthStatsBroadcastPktsStatusInfo, clusterAlarmGroup=clusterAlarmGroup, rmon15minRxEthStatsUndersizePkts2=rmon15minRxEthStatsUndersizePkts2, ppsFail=ppsFail, alarmSummaryIduSlotInfoNEAddress=alarmSummaryIduSlotInfoNEAddress, pmon15minData16E1PdhMonitorName=pmon15minData16E1PdhMonitorName, rmon1dayTxEthStatsOversizePktsStatusInfo=rmon1dayTxEthStatsOversizePktsStatusInfo, ctrlGroupTable=ctrlGroupTable, ethComFailAlarm=ethComFailAlarm, auxComFailAlarm=auxComFailAlarm, tcn1dayHCRxEthStatsCRCAlignErrors=tcn1dayHCRxEthStatsCRCAlignErrors, rmon15minHCTxQueue5Discard2Status=rmon15minHCTxQueue5Discard2Status, asFdbVlanEntry=asFdbVlanEntry, asEthOamMepCcmIndex=asEthOamMepCcmIndex, asRstpBridgeEntry=asRstpBridgeEntry, equipConfigStatus=equipConfigStatus, tcn1dayDataRadioTable=tcn1dayDataRadioTable, asLlfReceiveInfoTable=asLlfReceiveInfoTable, meteringTable=meteringTable, invMacAddressInfoEntry=invMacAddressInfoEntry, asEthOamMepCcmDbCondition=asEthOamMepCcmDbCondition, asRstpPortDesignatedCost=asRstpPortDesignatedCost, rxModulation=rxModulation, hkInputStatusIndex=hkInputStatusIndex, invSfpInfoEntry=invSfpInfoEntry, alarmSummaryPmonTcnInfoEntry=alarmSummaryPmonTcnInfoEntry, asFdbVlanIndex=asFdbVlanIndex, modemGroupIfIndex=modemGroupIfIndex, asEthOamMepCcmLOC=asEthOamMepCcmLOC, pmon1dayDataRadioTable=pmon1dayDataRadioTable, sncpGroupNEAddress=sncpGroupNEAddress, rmon1dayPort2IfIndex=rmon1dayPort2IfIndex, pmon15minData16E1PdhStatusInfo=pmon15minData16E1PdhStatusInfo, eventControlValueUnsigned32=eventControlValueUnsigned32, eventAdditionalText3=eventAdditionalText3, pmon15minDataModemMonitorName=pmon15minDataModemMonitorName, asEthOamGroup=asEthOamGroup, rmon1dayHCTxEthStatsPkts1024to1518Octets2Status=rmon1dayHCTxEthStatsPkts1024to1518Octets2Status, asLlfGroupForceClose=asLlfGroupForceClose, IpeVlanListOrZero=IpeVlanListOrZero, oduTotalAlarm=oduTotalAlarm, AlarmTypeValue=AlarmTypeValue, rmon15minHCTxQueue1Discard=rmon15minHCTxQueue1Discard, rmon1dayRxEthStatsCRCAlignErrors=rmon1dayRxEthStatsCRCAlignErrors, provVlanCBridgeTable=provVlanCBridgeTable, tdmRangeMismatch=tdmRangeMismatch, invModuleInfoOduNEAddress=invModuleInfoOduNEAddress, meteringFanTable=meteringFanTable, stm1BusErrorRx=stm1BusErrorRx, rmon15minHCTxEthStatsOctets2Status=rmon15minHCTxEthStatsOctets2Status, pmon15minDataRadioTable=pmon15minDataRadioTable, rmon15minRxEthStatsMulticastPkts=rmon15minRxEthStatsMulticastPkts, rmon15minVlanCounterId=rmon15minVlanCounterId, tcn1dayDataChMsEntry=tcn1dayDataChMsEntry, rmon1dayHCTxEthStatsPkts2Status=rmon1dayHCTxEthStatsPkts2Status, tcn15minDataChMsTable=tcn15minDataChMsTable, modemXpicEntry=modemXpicEntry, tcn15minDataRadioGroup=tcn15minDataRadioGroup, pmon15minDataChannelizedModeGroup=pmon15minDataChannelizedModeGroup, alarmSummaryCtrlInfoEntry=alarmSummaryCtrlInfoEntry, pmon1dayDataChRsTable=pmon1dayDataChRsTable, asEthOamCcGroup=asEthOamCcGroup, rmon1dayTxEthStatsPkts128to255Octets=rmon1dayTxEthStatsPkts128to255Octets, tcn15minRxLevEntry=tcn15minRxLevEntry, rmon1dayVlanMappingNEAddress=rmon1dayVlanMappingNEAddress, provVlanEquipmentMode=provVlanEquipmentMode, rmon1dayHCTxFrame=rmon1dayHCTxFrame, stm1Unequipped=stm1Unequipped, rmon15minHCTxQueue0Discard=rmon15minHCTxQueue0Discard, pmon1dayDataChRsValue=pmon1dayDataChRsValue, tcn15minDataModemMonitorName=tcn15minDataModemMonitorName, invOduCardName=invOduCardName, ppiAisStatus=ppiAisStatus, rmon15minRxEthStatsPkts512to1023Octets=rmon15minRxEthStatsPkts512to1023Octets, hkOutputStatusIndex=hkOutputStatusIndex, provVlanNameVlanIndex=provVlanNameVlanIndex, provVlanServiceRowStatus=provVlanServiceRowStatus, oduSwGroupTable=oduSwGroupTable, asRstpPortNEAddress=asRstpPortNEAddress, rmon15minHCRxUnknownTPID2=rmon15minHCRxUnknownTPID2, oduPsAlarm=oduPsAlarm, meteringFanSpeed1=meteringFanSpeed1, pmon1dayDataChRsEntry=pmon1dayDataChRsEntry, svLineAlarm=svLineAlarm, clk2mTypeMismatch=clk2mTypeMismatch, metSysTempIDUStatus=metSysTempIDUStatus, tcn1dayDataTmDMRRsIfIndex=tcn1dayDataTmDMRRsIfIndex, ethTypeMismatch=ethTypeMismatch, e1LoopbackStatus=e1LoopbackStatus, invMainFirmVersionUncurrent=invMainFirmVersionUncurrent, hkInputStatusTable=hkInputStatusTable, tcn1dayDataTmDMRRsTable=tcn1dayDataTmDMRRsTable, rmon1dayTxEthStatsPkts65to127Octets=rmon1dayTxEthStatsPkts65to127Octets, pmonTxRxLevGroup=pmonTxRxLevGroup, invChassisManufacturedDate=invChassisManufacturedDate, pmon15minData16E1PdhValue=pmon15minData16E1PdhValue, tcn1dayDataRmonGroup=tcn1dayDataRmonGroup, invMainInfoNEAddress=invMainInfoNEAddress, asFdbVlanTable=asFdbVlanTable, alarmIduSummary=alarmIduSummary, lpRdiAlarm=lpRdiAlarm, asE1ChTable=asE1ChTable, SeverityValue=SeverityValue, rmon15minTxEthStatsMulticastPkts2=rmon15minTxEthStatsMulticastPkts2, tcn1dayDataChRs=tcn1dayDataChRs, tcn15minDataModemIfIndex=tcn15minDataModemIfIndex, rmon15minTxEthStatsPkts=rmon15minTxEthStatsPkts, rmon15minHCTxQueue3DiscardStatusInfo=rmon15minHCTxQueue3DiscardStatusInfo, pmon15minDataTmRsStatusInfo=pmon15minDataTmRsStatusInfo, rmon1dayHCTxEthStatsPkts65to127Octets2=rmon1dayHCTxEthStatsPkts65to127Octets2, extClkGroupEntry=extClkGroupEntry, invCardInfoEntry=invCardInfoEntry, invChassisSerialNo=invChassisSerialNo, oduGroupNEAddress=oduGroupNEAddress, pmon1dayData16E1PdhEntry=pmon1dayData16E1PdhEntry, eventTypeEntry=eventTypeEntry, provVlanGroup=provVlanGroup, pmon1dayDataTmDMRRsNEAddress=pmon1dayDataTmDMRRsNEAddress, invClk2mInfoEntry=invClk2mInfoEntry, rmon1dayHCTxEthStatsPkts256to511Octets2=rmon1dayHCTxEthStatsPkts256to511Octets2, tcn1dayDataChMsTable=tcn1dayDataChMsTable, tcn15minRxLevTable=tcn15minRxLevTable, rmon1dayRxEthStatsBroadcastPkts2=rmon1dayRxEthStatsBroadcastPkts2, meteringFanSpeed2=meteringFanSpeed2, rmon1dayTxEthStatsMulticastPkts2Status=rmon1dayTxEthStatsMulticastPkts2Status, stm1LoopbackStatus=stm1LoopbackStatus, tcn1dayDataChRsMonitorName=tcn1dayDataChRsMonitorName, provDot1adPortVlanNEAddress=provDot1adPortVlanNEAddress, rmon1dayHCRxEthStatsOctetsStatusInfo=rmon1dayHCRxEthStatsOctetsStatusInfo, asStm1CardEntry=asStm1CardEntry, rmon15minTxEthStatsPkts64OctetsStatusInfo=rmon15minTxEthStatsPkts64OctetsStatusInfo, alarmSummaryRmonTcnInfoNEAddress=alarmSummaryRmonTcnInfoNEAddress, rmon15minHCTxQueue4Discard=rmon15minHCTxQueue4Discard, highBERAlarm=highBERAlarm, asRstpPortNewRootBridgeDetectedBridgePriority=asRstpPortNewRootBridgeDetectedBridgePriority, rmon1dayRxEthStatsPktsStatusInfo=rmon1dayRxEthStatsPktsStatusInfo, modAlarm=modAlarm, rmon1dayRxEthStatsFragmentsStatusInfo=rmon1dayRxEthStatsFragmentsStatusInfo, asETHCardTable=asETHCardTable, invFPGAHardVersion=invFPGAHardVersion, asRstpPortPathCost=asRstpPortPathCost, tcn15minDataTmDMRRsNEAddress=tcn15minDataTmDMRRsNEAddress, stm1LosAlarm=stm1LosAlarm, rmon15minRxEthStatsFragmentsStatusInfo=rmon15minRxEthStatsFragmentsStatusInfo, rmonEthGroup=rmonEthGroup, squelch=squelch, provDot1qPortVlanNEAddress=provDot1qPortVlanNEAddress, invFPGAInfoNEAddress=invFPGAInfoNEAddress, asExtClkGroup=asExtClkGroup, invOduProvRangeRxThresholdMax=invOduProvRangeRxThresholdMax, invOduCardCodeNo=invOduCardCodeNo, extClkGroupNEAddress=extClkGroupNEAddress, invChassisInfoEntry=invChassisInfoEntry, asRstpPortDesignatedBridge=asRstpPortDesignatedBridge, rmon1dayHCRxUnknownVID2=rmon1dayHCRxUnknownVID2, eventCount=eventCount, sncpProtectionStatusCh2=sncpProtectionStatusCh2, tcn15minDataChRsMonitorName=tcn15minDataChRsMonitorName, asHkGroup=asHkGroup, fanAlarm=fanAlarm, rmon1dayVlanCounterIndex=rmon1dayVlanCounterIndex, rmon15minRxEthStatsPkts256to511OctetsStatusInfo=rmon15minRxEthStatsPkts256to511OctetsStatusInfo, tcn15minDataTmDMRRs=tcn15minDataTmDMRRs, stm1Alarm=stm1Alarm, asStm1PortEntry=asStm1PortEntry, hkInputStatus=hkInputStatus, tcn1dayDataTmRs=tcn1dayDataTmRs, invOduFreqInfoSubBand1=invOduFreqInfoSubBand1, rmon1dayHCRxFilterDiscard=rmon1dayHCRxFilterDiscard, clk2mUnequipped=clk2mUnequipped, meteringNEAddress=meteringNEAddress, rmon15minRxEthStatsPktsStatusInfo=rmon15minRxEthStatsPktsStatusInfo, rmon15minHCTxEthStatsPkts256to511Octets2=rmon15minHCTxEthStatsPkts256to511Octets2, rmon1dayHCTxEthStatsOctets2Status=rmon1dayHCTxEthStatsOctets2Status, rmon1dayHCTxEthStatsPkts1024to1518Octets2=rmon1dayHCTxEthStatsPkts1024to1518Octets2, statusChange=statusChange, asLlfReceiveInfoIfIndex=asLlfReceiveInfoIfIndex, asEthOamAisEntry=asEthOamAisEntry, xpicTypeMismatch=xpicTypeMismatch, rmon15minTxEthStatsCollisions2Status=rmon15minTxEthStatsCollisions2Status, auxTypeMismatch=auxTypeMismatch, rmon1dayRxEthStatsOversizePkts2Status=rmon1dayRxEthStatsOversizePkts2Status, tcn1dayRmonIfIndex=tcn1dayRmonIfIndex, rmon15minTxEthStatsPkts64Octets=rmon15minTxEthStatsPkts64Octets, ipeControlTrapItemVar=ipeControlTrapItemVar, pmon1dayDataTmRsValue=pmon1dayDataTmRsValue, invOduFreqInfoTxStartFrequency=invOduFreqInfoTxStartFrequency, fanUnequipped=fanUnequipped, rmon15minHCRxEthStatsOctets=rmon15minHCRxEthStatsOctets, rmon1dayHCRxEthStatsOctets2=rmon1dayHCRxEthStatsOctets2, asAuxGroup=asAuxGroup, tcn15minDataTmDMRRsTable=tcn15minDataTmDMRRsTable)
mibBuilder.exportSymbols("IPE-COMMON-MIB", rmon15minRxEthStatsJabbers2Status=rmon15minRxEthStatsJabbers2Status, apsProtectionStatusCh1=apsProtectionStatusCh1, invOduFreqInfoSubBand7=invOduFreqInfoSubBand7, clusterAlarmOutIndex=clusterAlarmOutIndex, clkCommonEntry=clkCommonEntry, invFPGAInfoTable=invFPGAInfoTable, pmon15minDataCableGroup=pmon15minDataCableGroup, pmon1dayDataTmDMRRsTable=pmon1dayDataTmDMRRsTable, pmon1dayData16E1PdhNEAddress=pmon1dayData16E1PdhNEAddress, asModemTransmissionModeNEAddress=asModemTransmissionModeNEAddress, rmon15minRxEthStatsDropEventsStatusInfo=rmon15minRxEthStatsDropEventsStatusInfo, pmonTxRxLev15minCurrentDataNEAddress=pmonTxRxLev15minCurrentDataNEAddress, invSfpInfoNEAddress=invSfpInfoNEAddress, eventTypeTable=eventTypeTable, rmon15minRxEthStatsPkts=rmon15minRxEthStatsPkts, tcn1dayDataChMsNEAddress=tcn1dayDataChMsNEAddress, alarmSummaryIduSlotInfoIndex=alarmSummaryIduSlotInfoIndex, nec=nec, invSfpVendorName=invSfpVendorName, pmon15minDataTmDMRRsTable=pmon15minDataTmDMRRsTable, invOduFreqInfoSubBand3=invOduFreqInfoSubBand3, rmon15minRxEthStatsJabbers2=rmon15minRxEthStatsJabbers2, eventLastTime=eventLastTime, rmon15minTxEthStatsPkts128to255Octets=rmon15minTxEthStatsPkts128to255Octets, ipeTrapCounterTable=ipeTrapCounterTable, invChassisInfoTable=invChassisInfoTable, asModemTrafficAggrEntry=asModemTrafficAggrEntry, rmon1dayHCTxQueue1Discard=rmon1dayHCTxQueue1Discard, stm1BusErrorTx=stm1BusErrorTx, pmon1dayDataTmRsIfIndex=pmon1dayDataTmRsIfIndex, invClk2mFPGAName=invClk2mFPGAName, alarmSummaryCommonInfoTable=alarmSummaryCommonInfoTable, asModemTransmissionModeTable=asModemTransmissionModeTable, pmon15minDataChRsTable=pmon15minDataChRsTable, rmon15minTxEthStatsPkts512to1023OctetsStatusInfo=rmon15minTxEthStatsPkts512to1023OctetsStatusInfo, metSysTempIDUValue=metSysTempIDUValue, invFPGACodeNo=invFPGACodeNo, pmon15minDataTmRsTable=pmon15minDataTmRsTable, maintSummaryCommonInfoTable=maintSummaryCommonInfoTable, pmon15minDataTmDMRRsValue=pmon15minDataTmDMRRsValue, rmon15minHCRxFilterDiscard2=rmon15minHCRxFilterDiscard2, alarmSummaryEoamInfoNEAddress=alarmSummaryEoamInfoNEAddress, invChassisInfoIndex=invChassisInfoIndex, rmon15minHCTxEthStatsOctets2=rmon15minHCTxEthStatsOctets2, metSysBitErrorRateValue=metSysBitErrorRateValue, eventDescription=eventDescription, modemGroupEntry=modemGroupEntry, invCardInfoGroup=invCardInfoGroup, invClk2mFPGAHardVersion=invClk2mFPGAHardVersion, modemXpicTable=modemXpicTable, invSupportabilityInfoValid=invSupportabilityInfoValid, rmon15minRxEthStatsCRCAlignErrors2Status=rmon15minRxEthStatsCRCAlignErrors2Status, invCapa20MaxE1Rst=invCapa20MaxE1Rst, modemCardIndex=modemCardIndex, rmon1dayTxEthStatsPkts256to511OctetsStatusInfo=rmon1dayTxEthStatsPkts256to511OctetsStatusInfo, rsDegAlarm=rsDegAlarm, rmon1dayHCTxEthStatsPkts256to511Octets2Status=rmon1dayHCTxEthStatsPkts256to511Octets2Status, rmon1dayHCRxEthStatsPkts1024to1518Octets2Status=rmon1dayHCRxEthStatsPkts1024to1518Octets2Status, alarmRmonTcnCtrlSummary=alarmRmonTcnCtrlSummary, amrRangeMismatch=amrRangeMismatch, modemPsOff=modemPsOff, asRstpPortForwardTransitions=asRstpPortForwardTransitions, extClkGroupIndex=extClkGroupIndex, asQosAmrBandWidth=asQosAmrBandWidth, rmon1dayRxEthStatsBroadcastPkts2Status=rmon1dayRxEthStatsBroadcastPkts2Status, rmon15minVlanCounterIndex=rmon15minVlanCounterIndex, asETHPortOperStatus=asETHPortOperStatus, ipeTrapCommonVars=ipeTrapCommonVars, tcn15minDataChMsIfIndex=tcn15minDataChMsIfIndex, pmon1dayDataTmRsStatusInfo=pmon1dayDataTmRsStatusInfo, rmon15minTxEthStatsPkts512to1023Octets=rmon15minTxEthStatsPkts512to1023Octets, auAisAlarm=auAisAlarm, tcn1dayDataChMsIfIndex=tcn1dayDataChMsIfIndex, iduCommonTable=iduCommonTable, invSoftkeyInfoTable=invSoftkeyInfoTable, cpuCableOpenAlarm=cpuCableOpenAlarm, asFdbEquipmentTable=asFdbEquipmentTable, txInputAlarm=txInputAlarm, invModemParamInfoTable=invModemParamInfoTable, pmon15minDataRadioGroup=pmon15minDataRadioGroup, hkOutputStatusNEAddress=hkOutputStatusNEAddress, alarmSummaryCommonInfoEntry=alarmSummaryCommonInfoEntry, invClk2mCardName=invClk2mCardName, rmon15minHCTxQueue6DiscardStatusInfo=rmon15minHCTxQueue6DiscardStatusInfo, asStm1PortTable=asStm1PortTable, asRstpBridgeNEAddress=asRstpBridgeNEAddress, asQosGroup=asQosGroup, rmon15minVlanGroup=rmon15minVlanGroup, provVlanServiceIfIndex=provVlanServiceIfIndex, provVlanCustomerPort=provVlanCustomerPort, rmon15minHCRxQoSDiscard=rmon15minHCRxQoSDiscard, invUpdateInfoNEAddress=invUpdateInfoNEAddress, rmon15minTxEthStatsOversizePkts2=rmon15minTxEthStatsOversizePkts2, asEthOamAisNEAddress=asEthOamAisNEAddress, rmon1dayHCRxEthStatsOctets2Status=rmon1dayHCRxEthStatsOctets2Status, rmon1dayHCTxQueue3Discard=rmon1dayHCTxQueue3Discard, tcn15minDataTmDMRRsMonitorName=tcn15minDataTmDMRRsMonitorName, pmon1dayDataChRsIfIndex=pmon1dayDataChRsIfIndex, tcn15minData16E1Pdh=tcn15minData16E1Pdh, eventAdditionalText1=eventAdditionalText1, clkCommonIndex=clkCommonIndex, pmon15minData16E1PdhEntry=pmon15minData16E1PdhEntry, rmon15minTxEthStatsCollisions=rmon15minTxEthStatsCollisions, provVlanNameRowstatus=provVlanNameRowstatus, asModemTrafficAggrTable=asModemTrafficAggrTable, asETHPortMDIMDIX=asETHPortMDIMDIX, asEthOamMepCcmDbMepId=asEthOamMepCcmDbMepId, eventControlValueDspStr=eventControlValueDspStr, sncpSwStatus=sncpSwStatus, provVlanEquipmentTable=provVlanEquipmentTable, extClkOutputQlValue=extClkOutputQlValue, rmon15minHCRxFrameStatusInfo=rmon15minHCRxFrameStatusInfo, provVlanCustomerIfIndex=provVlanCustomerIfIndex, ltiAlarm=ltiAlarm, pmon15minDataRfValue=pmon15minDataRfValue, meteringGroup=meteringGroup, invOduCardSerialNo=invOduCardSerialNo, asE1CardIndex=asE1CardIndex, auxGroupEntry=auxGroupEntry, asETHPortSFPTypeMismatch=asETHPortSFPTypeMismatch, asCommonIndex=asCommonIndex, maintSummaryCommonInfoNEAddress=maintSummaryCommonInfoNEAddress, rmon15minHCRxEthStatsPkts65to127Octets2Status=rmon15minHCRxEthStatsPkts65to127Octets2Status, rmon15minTxEthStatsPkts256to511Octets=rmon15minTxEthStatsPkts256to511Octets, rmon1dayHCTxQueue4Discard2=rmon1dayHCTxQueue4Discard2, rmon15minHCRxUnknownTPIDStatusInfo=rmon15minHCRxUnknownTPIDStatusInfo, rmon15minHCTxQueue5Discard=rmon15minHCTxQueue5Discard, meteringFanSpeed3=meteringFanSpeed3, eventDownloadModule=eventDownloadModule, asEthOamMepCcmDbPeerMepIndex=asEthOamMepCcmDbPeerMepIndex, rmon1dayHCRxUnknownVID2Status=rmon1dayHCRxUnknownVID2Status, invMacAddressInfoNEAddress=invMacAddressInfoNEAddress, asRstpPortProtocolMigrationVersion=asRstpPortProtocolMigrationVersion, pmon1dayData16E1Group=pmon1dayData16E1Group, rmon15minRxEthStatsCRCAlignErrors=rmon15minRxEthStatsCRCAlignErrors, rmon1dayTxEthStatsPkts256to511Octets=rmon1dayTxEthStatsPkts256to511Octets, eventTime=eventTime, asClk2mConfigStatus=asClk2mConfigStatus, tcn15minDataChRsIfIndex=tcn15minDataChRsIfIndex, invCapa400MaxE1Rst=invCapa400MaxE1Rst, tcn1dayRmonNEAddress=tcn1dayRmonNEAddress, auxAlarm=auxAlarm, rmon15minHCTxQueue3Discard2Status=rmon15minHCTxQueue3Discard2Status, eventStatusValueDspStr=eventStatusValueDspStr, invClk2mInfoNEAddress=invClk2mInfoNEAddress, asRstpPortRole=asRstpPortRole, pmon1dayDataChMsStatusInfo=pmon1dayDataChMsStatusInfo, rmon15minHCTxQueue7Discard2Status=rmon15minHCTxQueue7Discard2Status, rmon1dayHCRxEthStatsPkts1024to1518Octets2=rmon1dayHCRxEthStatsPkts1024to1518Octets2, alarmSummaryOduInfoTable=alarmSummaryOduInfoTable, tcn15minData16E1PdhNEAddress=tcn15minData16E1PdhNEAddress, tuAisAlarm=tuAisAlarm, rmon15minHCRxQoSDiscard2=rmon15minHCRxQoSDiscard2, eventControlValueOctStr=eventControlValueOctStr, hpTimAlarm=hpTimAlarm, rxSWStatus=rxSWStatus, rmon1dayRxEthStatsFragments2=rmon1dayRxEthStatsFragments2, invFPGAInfoEntry=invFPGAInfoEntry, ProbableCauseValue=ProbableCauseValue, provVlanName=provVlanName, rmon15minHCTxQueue0DiscardStatusInfo=rmon15minHCTxQueue0DiscardStatusInfo, rmon15minRxEthStatsUndersizePkts2Status=rmon15minRxEthStatsUndersizePkts2Status, rmon1dayRxEthStatsPkts1024to1518Octets=rmon1dayRxEthStatsPkts1024to1518Octets, meteringFanSpeed2Status=meteringFanSpeed2Status, asModemHeaderCompressRemoteVersion=asModemHeaderCompressRemoteVersion, rmon15minHCTxFrameStatusInfo=rmon15minHCTxFrameStatusInfo, rmon15minTxEthStatsPkts65to127Octets=rmon15minTxEthStatsPkts65to127Octets, iduCommonNEAddress=iduCommonNEAddress, tcn15minDataTmRs=tcn15minDataTmRs, asCommonGroup=asCommonGroup, trapGroup=trapGroup, invMainSerialNo=invMainSerialNo, rmon15minHCTxEthStatsPkts128to255Octets2=rmon15minHCTxEthStatsPkts128to255Octets2, invSfpType=invSfpType, rmon15minHCRxEthStatsPkts128to255Octets2Status=rmon15minHCRxEthStatsPkts128to255Octets2Status, tcn15minDataTmRsIfIndex=tcn15minDataTmRsIfIndex, rmon15minPort2NEAddress=rmon15minPort2NEAddress, rmon1dayVlanPortMappingTable=rmon1dayVlanPortMappingTable, ipeEventGroup=ipeEventGroup, invCardSerialNo=invCardSerialNo, asUserInterface=asUserInterface, oduGroupIfIndex=oduGroupIfIndex, pmon15minDataTmRsNEAddress=pmon15minDataTmRsNEAddress, ipeTrapCounterIndex=ipeTrapCounterIndex, asStm1ApsEntry=asStm1ApsEntry, rmon15minHCTxFrame=rmon15minHCTxFrame, invOduProvRangeHysteresisMax=invOduProvRangeHysteresisMax, invSupportabilityInfoKey=invSupportabilityInfoKey, tcn15minHCRxEthStatsOversizePkts=tcn15minHCRxEthStatsOversizePkts, rmon15minRxEthStatsDropEvents=rmon15minRxEthStatsDropEvents, invSfpManufacturedDate=invSfpManufacturedDate, alarmSummaryIduSlotInfoEntry=alarmSummaryIduSlotInfoEntry, invMainName=invMainName, provVlanCBridgeIfIndex=provVlanCBridgeIfIndex, eventRecordUserName=eventRecordUserName, asStm1ChPortEntry=asStm1ChPortEntry, pmon1dayDataTmDMRRsEntry=pmon1dayDataTmDMRRsEntry, rmon1dayHCRxQoSDiscardFrame=rmon1dayHCRxQoSDiscardFrame, eventDownloadStatus=eventDownloadStatus, pmon15minDataChMsStatusInfo=pmon15minDataChMsStatusInfo, rmon15minTxEthStatsMulticastPkts=rmon15minTxEthStatsMulticastPkts, rmon15minHCTxQueue2DiscardStatusInfo=rmon15minHCTxQueue2DiscardStatusInfo, rmon15minHCTxQueue4Discard2Status=rmon15minHCTxQueue4Discard2Status, clkRefNEAddress=clkRefNEAddress, invModemParamVersion=invModemParamVersion, tcn1dayData16E1PdhMonitorName=tcn1dayData16E1PdhMonitorName, statusChangeUnsigned32=statusChangeUnsigned32, rmon1dayHCRxFilterDiscard2=rmon1dayHCRxFilterDiscard2, provDot1qPortVlanTable=provDot1qPortVlanTable, tcn1dayDataThroughModeGroup=tcn1dayDataThroughModeGroup, asLlfGroupIndex=asLlfGroupIndex, rmon15minHCTxQueue0Discard2Status=rmon15minHCTxQueue0Discard2Status, eventTable=eventTable, invSfpInfoTable=invSfpInfoTable, rmon15minRxEthStatsUndersizePkts=rmon15minRxEthStatsUndersizePkts, stm1ComFailAlarm=stm1ComFailAlarm, pmon1dayDataModemIfIndex=pmon1dayDataModemIfIndex, rmon15minHCRxEthStatsPkts64Octets2=rmon15minHCRxEthStatsPkts64Octets2, provVlanCustomerEntry=provVlanCustomerEntry, tcn1dayDataRmonTable=tcn1dayDataRmonTable, provVlanCustomerTable=provVlanCustomerTable, rmon1dayHCTxQueue6Discard=rmon1dayHCTxQueue6Discard, rmon15minTxEthStatsPkts1024to1518Octets=rmon15minTxEthStatsPkts1024to1518Octets, pmonTxRxLev15minCurrentDataTable=pmonTxRxLev15minCurrentDataTable, apsProtectionStatusCh2=apsProtectionStatusCh2, rmon1dayRxEthStatsUndersizePkts=rmon1dayRxEthStatsUndersizePkts, provVlanServiceNEAddress=provVlanServiceNEAddress, alarmSummaryOduInfoIndex=alarmSummaryOduInfoIndex, pmon1dayDataCableGroup=pmon1dayDataCableGroup, asETHCardEntry=asETHCardEntry, rmon15minTxEthStatsBroadcastPkts=rmon15minTxEthStatsBroadcastPkts, alarmSummaryRmonTcnInfoEntry=alarmSummaryRmonTcnInfoEntry, rmon1dayTxEthStatsMulticastPktsStatusInfo=rmon1dayTxEthStatsMulticastPktsStatusInfo, apsLockinStatus=apsLockinStatus, asFdbEquipmentIndex=asFdbEquipmentIndex, rmon1dayHCTxQueue2Discard2Status=rmon1dayHCTxQueue2Discard2Status, asModemHeaderCompressRemoteMode=asModemHeaderCompressRemoteMode, alarmSummaryOduInfoNEAddress=alarmSummaryOduInfoNEAddress, alarmSummaryOduInfoEntry=alarmSummaryOduInfoEntry, provVlanEquipmentNEAddress=provVlanEquipmentNEAddress, rmon1dayHCRxEthStatsPkts64Octets2Status=rmon1dayHCRxEthStatsPkts64Octets2Status, pjeStatus=pjeStatus, provDot1qPortVlanPortType=provDot1qPortVlanPortType, invOduCardHardVersion=invOduCardHardVersion, eventTypeDescription=eventTypeDescription, pmon1dayDataChMsNEAddress=pmon1dayDataChMsNEAddress, asRstpBridgeDesignatedRoot=asRstpBridgeDesignatedRoot, asLicenseAlarmNEAddress=asLicenseAlarmNEAddress, pmon15minData16E1PdhTable=pmon15minData16E1PdhTable, clkRefEntry=clkRefEntry, asStm1CardIndex=asStm1CardIndex, rmon1dayRxEthStatsCRCAlignErrors2=rmon1dayRxEthStatsCRCAlignErrors2, alarmAuxInputSummary=alarmAuxInputSummary, psPowerSupply=psPowerSupply)
mibBuilder.exportSymbols("IPE-COMMON-MIB", rmon15minHCTxQueue6Discard=rmon15minHCTxQueue6Discard, rmon1dayHCTxEthStatsPkts512to1023Octets2=rmon1dayHCTxEthStatsPkts512to1023Octets2, clkCommonNEAddress=clkCommonNEAddress, eventTotalCount=eventTotalCount, rmon15minTxEthStatsPkts1024to1518OctetsStatusInfo=rmon15minTxEthStatsPkts1024to1518OctetsStatusInfo, alarmTotalSummary=alarmTotalSummary, asModemTransmissionModeCardIndex=asModemTransmissionModeCardIndex, invModemParamInfoNEAddress=invModemParamInfoNEAddress, asModemTransmissionModeMismatch=asModemTransmissionModeMismatch, asStm1ChPortNEAddress=asStm1ChPortNEAddress, invOduProvRangeATPCMin=invOduProvRangeATPCMin, rmon1dayHCTxQueue0DiscardStatusInfo=rmon1dayHCTxQueue0DiscardStatusInfo, tcn15minRxLevIfIndex=tcn15minRxLevIfIndex, maintSummaryCommonInfoEntry=maintSummaryCommonInfoEntry, pmon1dayDataChMsMonitorName=pmon1dayDataChMsMonitorName, memoryFailure=memoryFailure, provDot1adPortVlanIfIndex=provDot1adPortVlanIfIndex, rmon1dayportGroup=rmon1dayportGroup, asEthOamMegCcmIndex=asEthOamMegCcmIndex, asModemTransmissionModeEntry=asModemTransmissionModeEntry, clkCommonTable=clkCommonTable, lofAlarm=lofAlarm, invOduFreqInfoSubBand4=invOduFreqInfoSubBand4, timingSourceCondition=timingSourceCondition, fanGroupNEAddress=fanGroupNEAddress, tcn1dayData16E1PdhIfIndex=tcn1dayData16E1PdhIfIndex, pmonTxRxLev1dayRxLevelMaxCurrentData=pmonTxRxLev1dayRxLevelMaxCurrentData, rmon1dayHCRxUnknownVID=rmon1dayHCRxUnknownVID, asStm1PortIfIndex=asStm1PortIfIndex, invSoftkeyInfoNEAddress=invSoftkeyInfoNEAddress, rmon15minRxEthStatsJabbers=rmon15minRxEthStatsJabbers, invClk2mCardHardVersion=invClk2mCardHardVersion, rmon15minHCTxEthStatsOctets=rmon15minHCTxEthStatsOctets, rmon15minTxEthStatsCollisionsStatusInfo=rmon15minTxEthStatsCollisionsStatusInfo, rmon15minHCRxFilterDiscard2Status=rmon15minHCRxFilterDiscard2Status, asLlfGroupTable=asLlfGroupTable, rmonGroup=rmonGroup, oduAlarm=oduAlarm, metSysTxPowerValue=metSysTxPowerValue, pmon15minData16E1PdhNEAddress=pmon15minData16E1PdhNEAddress, invSupportabilityInfoFw=invSupportabilityInfoFw, tuLopAlarm=tuLopAlarm, rmon1dayTxEthStatsCollisions2Status=rmon1dayTxEthStatsCollisions2Status, rmon1dayHCRxEthStatsPkts65to127Octets2=rmon1dayHCRxEthStatsPkts65to127Octets2, fanGroupIndex=fanGroupIndex, rmon1dayRxEthStatsUndersizePkts2Status=rmon1dayRxEthStatsUndersizePkts2Status, asLlfReceiveInfoLinkSts=asLlfReceiveInfoLinkSts, rsLofAlarm=rsLofAlarm, sncpGroupTable=sncpGroupTable, asSyncETHEntry=asSyncETHEntry, rmon15minHCRxEthStatsPkts1024to1518Octets2=rmon15minHCRxEthStatsPkts1024to1518Octets2, rmon1dayTxEthStatsPkts=rmon1dayTxEthStatsPkts, extClkLoop=extClkLoop, rmon1dayTxEthStatsPktsStatusInfo=rmon1dayTxEthStatsPktsStatusInfo, asLicenseAlarmIndex=asLicenseAlarmIndex, pmonTxRxLev1dayRxLevelMinCurrentData=pmonTxRxLev1dayRxLevelMinCurrentData, pmon15minDataThroughModeGroup=pmon15minDataThroughModeGroup, ppiAisAlarm=ppiAisAlarm, rmon15minHCTxEthStatsPkts65to127Octets2Status=rmon15minHCTxEthStatsPkts65to127Octets2Status, provVlanServicePortType=provVlanServicePortType, pmon15minDataTmDMRRsIfIndex=pmon15minDataTmDMRRsIfIndex, modemGroupTable=modemGroupTable, meteringFanEntry=meteringFanEntry, rmon15minRxEthStatsPkts128to255Octets=rmon15minRxEthStatsPkts128to255Octets, asETHCardIndex=asETHCardIndex, rmon1dayHCTxQueue5Discard2=rmon1dayHCTxQueue5Discard2, rmon15minRxEthStatsBroadcastPktsStatusInfo=rmon15minRxEthStatsBroadcastPktsStatusInfo, invMainInfoIndex=invMainInfoIndex, rmon15minRxEthStatsFragments=rmon15minRxEthStatsFragments, rmon15minPortTable=rmon15minPortTable, invOduProvRangeHysteresisMin=invOduProvRangeHysteresisMin, eventAdditionalText2=eventAdditionalText2, rmon1dayTxEthStatsBroadcastPkts2=rmon1dayTxEthStatsBroadcastPkts2, pmon1dayData16E1PdhValue=pmon1dayData16E1PdhValue, rmon1dayHCRxEthStatsPkts2=rmon1dayHCRxEthStatsPkts2, rmon1dayRxEthStatsOversizePkts=rmon1dayRxEthStatsOversizePkts, invModemParamInfoEntry=invModemParamInfoEntry, rmon15minHCTxEthStatsPkts1024to1518Octets2=rmon15minHCTxEthStatsPkts1024to1518Octets2, rmon1dayTxEthStatsPkts65to127OctetsStatusInfo=rmon1dayTxEthStatsPkts65to127OctetsStatusInfo, txSwReverseReqRecvStatus=txSwReverseReqRecvStatus, rmon15minHCTxQueue5Discard2=rmon15minHCTxQueue5Discard2, rmon1dayVlanPortMappingIfIndex=rmon1dayVlanPortMappingIfIndex, alarmIduSlotSummary=alarmIduSlotSummary, rmon1dayTxEthStatsPkts64OctetsStatusInfo=rmon1dayTxEthStatsPkts64OctetsStatusInfo, invClk2mFPGACodeNo=invClk2mFPGACodeNo, asRstpPortTable=asRstpPortTable, asETHPortSpeedDuplex=asETHPortSpeedDuplex, invSoftkeyInfoEntry=invSoftkeyInfoEntry, e1TypeMismatch=e1TypeMismatch, rmon1dayVlanMappingVlanIndex=rmon1dayVlanMappingVlanIndex, alarmEoamSummary=alarmEoamSummary, psGroupEntry=psGroupEntry, oduGroupEntry=oduGroupEntry, tcn1dayDataChRsTable=tcn1dayDataChRsTable, asFdbVlanLearningLimitOver=asFdbVlanLearningLimitOver, asCommonTable=asCommonTable, invOduFreqInfoSubBand8=invOduFreqInfoSubBand8, rmon15minRxEthStatsOversizePkts2Status=rmon15minRxEthStatsOversizePkts2Status, invChassisFirmVersion=invChassisFirmVersion, rmon1dayHCTxQueue7Discard2=rmon1dayHCTxQueue7Discard2, rmon1dayHCRxFilterDiscard2Status=rmon1dayHCRxFilterDiscard2Status, rmon15minHCRxEthStatsPkts256to511Octets2=rmon15minHCRxEthStatsPkts256to511Octets2, tcn15minDataChMsEntry=tcn15minDataChMsEntry, rmon15minTxEthStatsCollisions2=rmon15minTxEthStatsCollisions2, asStm1ChEntry=asStm1ChEntry, sectionTraceReceivedValue=sectionTraceReceivedValue, muteStatus=muteStatus, provVlanServiceTable=provVlanServiceTable, rmon15minNEAddress=rmon15minNEAddress, rmon15minHCTxEthStatsPkts1024to1518Octets2Status=rmon15minHCTxEthStatsPkts1024to1518Octets2Status, tcn15minDataChMs=tcn15minDataChMs, rmon1dayHCRxQoSDiscardStatusInfo=rmon1dayHCRxQoSDiscardStatusInfo, rmon15minHCRxMAClimit2Status=rmon15minHCRxMAClimit2Status, alarmSummaryPmonTcnInfoTable=alarmSummaryPmonTcnInfoTable, asFdbEquipmentNEAddress=asFdbEquipmentNEAddress, oduPsSetStatus=oduPsSetStatus, eventType=eventType, ipeTrapControlVars=ipeTrapControlVars, provVlanCBridgeCVlanIndex=provVlanCBridgeCVlanIndex, inventoryGroup=inventoryGroup, rmon1dayTxEthStatsCollisions2=rmon1dayTxEthStatsCollisions2, rmon15minTxEthStatsMulticastPktsStatusInfo=rmon15minTxEthStatsMulticastPktsStatusInfo, rmon15minHCTxQueue7Discard=rmon15minHCTxQueue7Discard, rmon15minHCTxQueue4DiscardStatusInfo=rmon15minHCTxQueue4DiscardStatusInfo, rmon1dayHCTxQueue2DiscardStatusInfo=rmon1dayHCTxQueue2DiscardStatusInfo, inPhaseStatus=inPhaseStatus, refClkChange=refClkChange, rmon15minVlanTable=rmon15minVlanTable, rmon1dayVlanEntry=rmon1dayVlanEntry, pmon15minDataChRsEntry=pmon15minDataChRsEntry, eventAdditionalText4=eventAdditionalText4, tcn15minDataTmRsEntry=tcn15minDataTmRsEntry, provDot1adPortCAccessVid=provDot1adPortCAccessVid)
